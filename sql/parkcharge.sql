/*
Navicat MySQL Data Transfer

Source Server         : local
Source Server Version : 50505
Source Host           : localhost:3306
Source Database       : parkcharge

Target Server Type    : MYSQL
Target Server Version : 50505
File Encoding         : 65001

Date: 2017-11-30 14:21:48
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for shop_owner
-- ----------------------------
DROP TABLE IF EXISTS `shop_owner`;
CREATE TABLE `shop_owner` (
  `id` bigint(20) NOT NULL,
  `nickname` varchar(20) DEFAULT NULL,
  `mobile` varchar(20) DEFAULT NULL,
  `pswd` varchar(32) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `salt` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of shop_owner
-- ----------------------------
INSERT INTO `shop_owner` VALUES ('1', '管理员2', '18626911058', '0d78c4dd9aa410f98770acc2498245e1', '2016-06-16 11:15:33', 'c30416c6ca33a902eb7d7a1e61bfcaa4');

-- ----------------------------
-- Table structure for sys_permission
-- ----------------------------
DROP TABLE IF EXISTS `sys_permission`;
CREATE TABLE `sys_permission` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `url` varchar(256) DEFAULT NULL COMMENT 'url地址',
  `name` varchar(64) DEFAULT NULL COMMENT 'url描述',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_permission
-- ----------------------------
INSERT INTO `sys_permission` VALUES ('4', 'permission:index', '权限列表');
INSERT INTO `sys_permission` VALUES ('6', 'permission:addPermission', '权限添加');
INSERT INTO `sys_permission` VALUES ('7', 'permission:deletePermissionById', '权限删除');
INSERT INTO `sys_permission` VALUES ('8', 'member:list', '用户列表');
INSERT INTO `sys_permission` VALUES ('9', 'member:online', '在线用户');
INSERT INTO `sys_permission` VALUES ('10', 'member:changeSessionStatus', '用户Session踢出');
INSERT INTO `sys_permission` VALUES ('11', 'member:forbidUserById', '用户激活&禁止');
INSERT INTO `sys_permission` VALUES ('12', 'member:deleteUserById', '用户删除');
INSERT INTO `sys_permission` VALUES ('13', 'permission:addPermission2Role', '权限分配');
INSERT INTO `sys_permission` VALUES ('14', 'role:clearRoleByUserIds', '用户角色分配清空');
INSERT INTO `sys_permission` VALUES ('15', 'role:addRole2User', '角色分配保存');
INSERT INTO `sys_permission` VALUES ('16', 'role:deleteRoleById', '角色列表删除');
INSERT INTO `sys_permission` VALUES ('17', 'role:addRole', '角色列表添加');
INSERT INTO `sys_permission` VALUES ('18', 'role:index', '角色列表');
INSERT INTO `sys_permission` VALUES ('19', 'permission:allocation', '权限分配');
INSERT INTO `sys_permission` VALUES ('20', 'role:allocation', '角色分配');
INSERT INTO `sys_permission` VALUES ('23', 'push:send', '消息推送');
INSERT INTO `sys_permission` VALUES ('24', 'push:index', '消息推送列表');
INSERT INTO `sys_permission` VALUES ('25', 'zhiku:industry', '行业知识');
INSERT INTO `sys_permission` VALUES ('26', 'zhiku:professional', '专业技术');
INSERT INTO `sys_permission` VALUES ('27', 'zhiku:ebook', '电子书');
INSERT INTO `sys_permission` VALUES ('28', 'zhiku:training', '对日培训');
INSERT INTO `sys_permission` VALUES ('29', 'zhiku:contact', '联系我们');

-- ----------------------------
-- Table structure for sys_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(32) DEFAULT NULL COMMENT '角色名称',
  `type` varchar(32) DEFAULT NULL COMMENT '角色类型',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_role
-- ----------------------------
INSERT INTO `sys_role` VALUES ('1', '系统管理员', 'SYS_ADMIN');
INSERT INTO `sys_role` VALUES ('3', '权限角色', 'SYS_ROLE_PERMISSION');
INSERT INTO `sys_role` VALUES ('4', '用户中心', 'SYS_USER');
INSERT INTO `sys_role` VALUES ('6', '测试角色1', 'TEST_ROLE_1');
INSERT INTO `sys_role` VALUES ('7', '123', '123');
INSERT INTO `sys_role` VALUES ('8', '55', '555');
INSERT INTO `sys_role` VALUES ('9', '培训学校', 'TRANING_SCHOOL');

-- ----------------------------
-- Table structure for sys_role_permission
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_permission`;
CREATE TABLE `sys_role_permission` (
  `rid` bigint(20) DEFAULT NULL COMMENT '角色ID',
  `pid` bigint(20) DEFAULT NULL COMMENT '权限ID'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_role_permission
-- ----------------------------
INSERT INTO `sys_role_permission` VALUES ('4', '8');
INSERT INTO `sys_role_permission` VALUES ('4', '9');
INSERT INTO `sys_role_permission` VALUES ('4', '10');
INSERT INTO `sys_role_permission` VALUES ('4', '11');
INSERT INTO `sys_role_permission` VALUES ('4', '12');
INSERT INTO `sys_role_permission` VALUES ('3', '4');
INSERT INTO `sys_role_permission` VALUES ('3', '6');
INSERT INTO `sys_role_permission` VALUES ('3', '7');
INSERT INTO `sys_role_permission` VALUES ('3', '13');
INSERT INTO `sys_role_permission` VALUES ('3', '14');
INSERT INTO `sys_role_permission` VALUES ('3', '15');
INSERT INTO `sys_role_permission` VALUES ('3', '16');
INSERT INTO `sys_role_permission` VALUES ('3', '17');
INSERT INTO `sys_role_permission` VALUES ('3', '18');
INSERT INTO `sys_role_permission` VALUES ('3', '19');
INSERT INTO `sys_role_permission` VALUES ('3', '20');
INSERT INTO `sys_role_permission` VALUES ('1', '4');
INSERT INTO `sys_role_permission` VALUES ('1', '6');
INSERT INTO `sys_role_permission` VALUES ('1', '7');
INSERT INTO `sys_role_permission` VALUES ('1', '8');
INSERT INTO `sys_role_permission` VALUES ('1', '9');
INSERT INTO `sys_role_permission` VALUES ('1', '10');
INSERT INTO `sys_role_permission` VALUES ('1', '11');
INSERT INTO `sys_role_permission` VALUES ('1', '12');
INSERT INTO `sys_role_permission` VALUES ('1', '13');
INSERT INTO `sys_role_permission` VALUES ('1', '14');
INSERT INTO `sys_role_permission` VALUES ('1', '15');
INSERT INTO `sys_role_permission` VALUES ('1', '16');
INSERT INTO `sys_role_permission` VALUES ('1', '17');
INSERT INTO `sys_role_permission` VALUES ('1', '18');
INSERT INTO `sys_role_permission` VALUES ('1', '19');
INSERT INTO `sys_role_permission` VALUES ('1', '20');
INSERT INTO `sys_role_permission` VALUES ('1', '23');
INSERT INTO `sys_role_permission` VALUES ('1', '24');
INSERT INTO `sys_role_permission` VALUES ('1', '25');
INSERT INTO `sys_role_permission` VALUES ('1', '26');
INSERT INTO `sys_role_permission` VALUES ('1', '25');
INSERT INTO `sys_role_permission` VALUES ('1', '26');
INSERT INTO `sys_role_permission` VALUES ('1', '27');
INSERT INTO `sys_role_permission` VALUES ('1', '28');
INSERT INTO `sys_role_permission` VALUES ('1', '29');
INSERT INTO `sys_role_permission` VALUES ('9', '29');
INSERT INTO `sys_role_permission` VALUES ('9', '28');

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `nickname` varchar(20) DEFAULT NULL COMMENT '用户昵称',
  `email` varchar(128) DEFAULT NULL COMMENT '邮箱|登录帐号',
  `pswd` varchar(32) DEFAULT NULL COMMENT '密码',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `last_login_time` datetime DEFAULT NULL COMMENT '最后登录时间',
  `status` bigint(1) DEFAULT '1' COMMENT '1:有效，0:禁止登录',
  `salt` varchar(32) DEFAULT NULL COMMENT '密码盐',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_user
-- ----------------------------
INSERT INTO `sys_user` VALUES ('1', '管理员2', 'admin', '0d78c4dd9aa410f98770acc2498245e1', '2016-06-16 11:15:33', '2017-11-30 14:06:13', '1', 'c30416c6ca33a902eb7d7a1e61bfcaa4');
INSERT INTO `sys_user` VALUES ('11', 'zhulin', '121256711@qq.com', 'f7223ffa41c1239c4e3e5a80f7bd818b', '2016-05-26 20:50:54', '2016-06-16 11:24:35', '1', '');
INSERT INTO `sys_user` VALUES ('12', '8446666', '8446666', '4afdc875a67a55528c224ce088be2ab8', '2016-05-27 22:34:19', '2016-06-15 17:03:16', '1', '');
INSERT INTO `sys_user` VALUES ('27', '3333', '3333', '66382acbe5453a983e5dedc77a5e4258', '2017-03-24 13:29:46', '2017-03-24 13:29:46', '1', 'c01020654d7fc50e5b2f8d7b300faee6');
INSERT INTO `sys_user` VALUES ('29', '测试2号', 'test2', 'f3316dc31c09433a6c7f0ed8a0cf0831', '2017-03-24 14:15:55', '2017-03-24 16:11:38', '0', 'e3c8b835ae97896815c0c893d5c0f854');
INSERT INTO `sys_user` VALUES ('30', 'wertert', 'werwer', '744ec65260df36e146ce33240b62b12c', '2017-03-29 14:55:03', '2017-03-29 14:55:04', '1', 'a735dcb3fc0bd522237ffe73ab9a3e44');
INSERT INTO `sys_user` VALUES ('31', 'test1313', 'test1313', '33b49de6c8c0bddf59fdad9a521da98c', '2017-07-04 14:10:21', '2017-07-04 14:10:21', '1', '838450a2c63a4ddf547afd56317fa5d3');
INSERT INTO `sys_user` VALUES ('32', '123123', '123123@11.com', 'cc79ba87e52acdbb4ea58a6a87ac2772', '2017-11-08 17:28:58', '2017-11-08 17:28:58', '1', '264424721071a206ae324c1f1a7a8f29');
INSERT INTO `sys_user` VALUES ('33', '123123', '123123@11.com', 'b2f6825db6b478493f5178a69adf83bb', '2017-11-08 17:28:58', '2017-11-08 17:28:58', '1', 'b3109cf1f3339a76bee32103c5bf5f55');
INSERT INTO `sys_user` VALUES ('34', '123123', '123@11com', '0291aa7e7e0e10bd8cefd8103b896005', '2017-11-08 17:30:16', '2017-11-08 17:30:25', '1', '481982612d87c8d76ad687c4d609c565');
INSERT INTO `sys_user` VALUES ('35', '123123', '123123@111.com', 'fbb6b6bbcef2ca696a1d33356b06aaa6', '2017-11-08 17:32:02', '2017-11-08 17:32:02', '1', '72c2facf35e75a303be6a7d960a74d00');
INSERT INTO `sys_user` VALUES ('36', '123123', '123@11.com', '66a81b5f416214571fc1a22f46e78a9c', '2017-11-08 17:33:07', '2017-11-08 17:33:07', '1', 'b7d29972dc054f3aa94a1bf5de64cb76');
INSERT INTO `sys_user` VALUES ('37', '123123', '12123@qq.com', '75936f4ad3c4ceb665ff4937f8589285', '2017-11-08 17:40:05', '2017-11-08 17:40:05', '1', 'e310dcaddfa402dfd508a37410d3ac5f');
INSERT INTO `sys_user` VALUES ('38', '123123', '123123', '79e3d5c847791c7bf13fe4c3c8a0fe8b', '2017-11-08 17:40:50', '2017-11-08 17:40:50', '1', 'e2ee216e8d65558a48be683b1cd02a41');
INSERT INTO `sys_user` VALUES ('39', 'peixunxuexiao', '18626911058', 'c5f9e54046f14eb6b40520ff179483e6', '2017-11-10 15:14:18', '2017-11-10 15:17:30', '1', '78c9e266f1de6b967cbc9889fd266023');

-- ----------------------------
-- Table structure for sys_user_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_user_role`;
CREATE TABLE `sys_user_role` (
  `uid` bigint(20) DEFAULT NULL COMMENT '用户ID',
  `rid` bigint(20) DEFAULT NULL COMMENT '角色ID'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_user_role
-- ----------------------------
INSERT INTO `sys_user_role` VALUES ('12', '4');
INSERT INTO `sys_user_role` VALUES ('11', '3');
INSERT INTO `sys_user_role` VALUES ('11', '4');
INSERT INTO `sys_user_role` VALUES ('1', '1');
INSERT INTO `sys_user_role` VALUES ('29', '3');
INSERT INTO `sys_user_role` VALUES ('29', '6');
INSERT INTO `sys_user_role` VALUES ('39', '9');

-- ----------------------------
-- Table structure for t_cuts
-- ----------------------------
DROP TABLE IF EXISTS `t_cuts`;
CREATE TABLE `t_cuts` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `cut_url` varchar(255) DEFAULT NULL,
  `point_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_cuts
-- ----------------------------
INSERT INTO `t_cuts` VALUES ('1', '/upload/1506752146017.jpg', '11');
INSERT INTO `t_cuts` VALUES ('2', '/upload/1506752280428.jpg', '11');
INSERT INTO `t_cuts` VALUES ('3', '/upload/1506755023370.jpg', '18');
INSERT INTO `t_cuts` VALUES ('4', '/upload/1506755378032.jpg', '12');
INSERT INTO `t_cuts` VALUES ('9', '/upload/1507624813227.jpg', '18');
INSERT INTO `t_cuts` VALUES ('12', '/upload/1508737837611.jpg', null);
INSERT INTO `t_cuts` VALUES ('14', '/upload/1508745760996.jpg', '20');
INSERT INTO `t_cuts` VALUES ('15', '/upload/1508816331631.jpg', '20');
INSERT INTO `t_cuts` VALUES ('16', '/upload/1508817768053.jpg', '20');

-- ----------------------------
-- Table structure for t_points
-- ----------------------------
DROP TABLE IF EXISTS `t_points`;
CREATE TABLE `t_points` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `parent_id` bigint(20) DEFAULT NULL,
  `title` varchar(255) DEFAULT NULL,
  `detail` blob,
  `p_order` int(255) DEFAULT NULL,
  `type` int(1) DEFAULT NULL COMMENT '0:HTML 1:CSS 2:JS 3:JQuery 4: VB 5:SQL',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_points
-- ----------------------------
INSERT INTO `t_points` VALUES ('1', null, '语法基础', null, '0', '5');
INSERT INTO `t_points` VALUES ('2', null, '运算符', null, '1', '5');
INSERT INTO `t_points` VALUES ('3', null, '流程控制', null, '2', '5');
INSERT INTO `t_points` VALUES ('4', null, '数组', null, '3', '5');
INSERT INTO `t_points` VALUES ('5', null, '枚举常量结构', null, '4', '5');
INSERT INTO `t_points` VALUES ('6', '2', '注释', 0x3C703ECED2CED2CED2CED2CED2B0A1CAAADFD5DFD53232323C2F703E, '1', '5');
INSERT INTO `t_points` VALUES ('7', '4', '常量', null, '1', '5');
INSERT INTO `t_points` VALUES ('8', '5', '变量', 0x
INSERT INTO `t_points` VALUES ('9', '4', '数据类型', 0x
INSERT INTO `t_points` VALUES ('10', '1', '类型转换', null, '5', '5');
INSERT INTO `t_points` VALUES ('12', '1', '作用域', null, '3', '5');
INSERT INTO `t_points` VALUES ('13', null, '123', 0x3C703E3132333C2F703E, '1', '5');
INSERT INTO `t_points` VALUES ('18', '1', '方法', 0x3C703EE59388E59388E59388E59388E59388E593884141414141413C2F703E, '2', '5');
INSERT INTO `t_points` VALUES ('19', null, '在HTML中使用CSS', null, '1', '3');
INSERT INTO `t_points` VALUES ('20', '19', '内嵌方式', 0x

-- ----------------------------
-- Table structure for t_tips
-- ----------------------------
DROP TABLE IF EXISTS `t_tips`;
CREATE TABLE `t_tips` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `tips_no` bigint(20) DEFAULT NULL COMMENT 'tips的编号',
  `tips_title` varchar(255) DEFAULT NULL COMMENT 'tips的标题',
  `func_title` varchar(255) DEFAULT NULL COMMENT 'tips使用功能/命令的标题',
  `func_desc` text COMMENT 'tips 功能/命令的描述',
  `tips_code` text COMMENT 'tips的示例代码',
  `tips_explain` text COMMENT 'tips的详解',
  `img_before` varchar(255) DEFAULT NULL COMMENT '运行前图片',
  `img_after` varchar(255) DEFAULT NULL COMMENT '运行后图片',
  `notice_title` varchar(255) DEFAULT NULL COMMENT '提示标题',
  `notice_content` text COMMENT '提示内容',
  `notice_code` text COMMENT '提示示例代码',
  `img_before_desc` varchar(255) DEFAULT NULL COMMENT '运行前图片描述',
  `img_after_desc` varchar(255) DEFAULT NULL COMMENT '运行后图片描述',
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `parent_id` bigint(20) DEFAULT NULL,
  `explain_table` text CHARACTER SET utf32,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=620 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_tips
-- ----------------------------
INSERT INTO `t_tips` VALUES ('1', '1', 'VBE的使用', '快捷键', '用VBA做项目就要使用VBE（Visual Basic Editor）。\n                VBE启动的方式有很多种，其中使用快捷键是非常方便的。按<Alt+F11>组合键就可以打开VBE窗口。\n                VBE启动之后，单击菜单中的\"插入\"→\"模块\"命令，在属性窗口上方将会出现一个默认名称为\"模块1\"的模块，\n                在这里用于存放代码。', '', '这个快捷键是可以切换VBE窗口和EXCEL窗口的。\n            \n            \n                VBE使用完后，点击[关闭]按钮。或者，如果直接关闭EXCEL窗口，VBE窗口也会自动关闭。', '/images/zhiku/TipsNO001-001.png', '/images/zhiku/TipsNO001-002.png', '关于VBE的启动方法', '启动VBE也可以通过菜单中的\"开发工具\"→\"Visual Basic\"按钮来做成。但是，一般\n                做成项目的时候，还是想利用效率稍微高一些的好方法。所以还是应该积极使用上文中提\n                到的<Alt+F11>组合键。', '', '(VBEを起動する)', '(VBEを起動した)', '2017-11-30 14:04:55', '2017-11-30 14:04:55', null, '');
INSERT INTO `t_tips` VALUES ('2', '2', '[开发工具]的表示', '[选项]弹出框', '用VBA做项目的时候，把菜单中的\"开发工具\"表示出来会很方便。\n                \"开发工具\"的表示方法是通过[Excel选项]弹出框来设置的。', '', '如果你的Excel里\"开发工具\"没有被表示出来的话，那么请如下图所示设置。Excel2013\n                /Excel2010版本，单击菜单中的\"文件\"→\"选项\"命令，弹出\"Excel选项\"框。\n                在\"自定义功能区\" 将\"开发工具\"选项框选中即可（Excel2007版本，单击\"Office\"→\"Excel选项(I)\"\n                命令，弹出\"Excel选项\"框，在\"常用\"里面将\"在功能区显示\"开发工具\"选项卡(D)\"选项选中）。', '/images/zhiku/TipsNO002-001.png', '/images/zhiku/TipsNO002-002.png', '关于\"开发工具\"', '我们将\"开发工具\"表示出来后，对\"加载项\"和\"信任中心\"的操作会感觉到很得心应手。\n                如果不通过\"开发工具\"来设定信任中心的话，就要单击菜单中的\"文件\"→\"选项\"→\"信任中心\"→\"信任中心设置(T)...\"命令，\n                弹出\"信任中心\"框。（在Excel2013的情况下必须这样设置）\n            \n            \n                \"开发工具\"被表示出来的话，就可以直接通过单击菜单中的\"开发工具\"→代码区域的\"宏安全性\"命令，弹出\"信任中心\"框。', '', '([開発]タブを表示する)', '([開発]タブを表示された)', '2017-11-30 14:04:55', null, null, '');
INSERT INTO `t_tips` VALUES ('3', '3', '设置安全级别', '安全中心', 'Excel有防止恶意程序（例如：macro virus 宏病毒）执行的安全功能。\n                设置那个水平的就是安全级别。', '', '根据安全水准的设定，带有宏的工作簿打开时会触发异常操作。安全水准分为以下4个阶段。\n            \n            \n                宏的安全水准设置，菜单中“开发工具”→代码区域的\"宏安全性\"命令被表示出来，在“安全中心”→“宏设置”进行。\n            \n            \n                另外，初始设定包括所有包含宏的工作簿都打开无效。之后，你可以选择是否启用宏。', '/images/zhiku/TipsNO003-001.png', '/images/zhiku/TipsNO003-002.png', '', '', '', '(从开发工具中打开安全中心)', '(设置安全中心)', '2017-11-30 14:04:55', null, null, '[{\"title\":\"4个阶段的安全水准\",\"heads\":[],\"rows\":[]}]');
INSERT INTO `t_tips` VALUES ('4', '4', '定制VBE的工作环境', '[工具]栏的[视图]菜单', 'VBE构成对象从“视图”菜单中设定。', '', 'VBE界面由以下对象构成。要使这些对象在表示和非表示之间切换，需要使用“工具”栏中的“视图”菜单。', '/images/zhiku/TipsNO004-001.png', '', '', '', '', '', '', '2017-11-30 14:04:55', null, null, '[{\"title\":\"VBE的各对象\",\"heads\":[\"对象\",\"说明\"],\"rows\":[[\"工程资源管理器\",\"显示所有工程文件\"],[\"属性窗口\",\"显示当前对象的属性\"],[\"代码窗口\",\"记述了所有代码\"],[\"立即窗口\",\"显示工程在执行过程中的值，执行代码后显示的值。\"],[\"监视窗口\",\"显示任意表达式的值的状态\"],[\"本地窗口\",\"显示正在运行的工程中的变量等的当前信息\"]]}]');
INSERT INTO `t_tips` VALUES ('5', '5', '程序的保护', '[VBAProject的特性]', '通过附加密码对已完成的程序进行保护。利用[VBAProject的特性]来进行密码的设置。', '', '在程序中附加密码，首先需要打开[工具]菜单，选择其中的[VBAProject属性]选项，将[保护]标签下的\n                [查看时锁定工程(V)]勾选上，然后保存，这样一旦关闭VBA，密码便开始生效。\n            \n            \n                参考文件的密码设定为[abc]。', '/images/zhiku/TipsNO005-001.png', '/images/zhiku/TipsNO005-002.png', '密码的解除', '需要注意的是，如果忘记了设定好的密码便无法解除这个程序的密码锁。\n                并且，因设定了密码而无法执行程序的时候，从VBA直接修正程序的代码就不能执行。', '', '(设定密码)', '(不输入密码便无法打开程序)', '2017-11-30 14:04:55', null, null, '');
INSERT INTO `t_tips` VALUES ('6', '6', '使用快捷键来提高作业效率', '快捷键', '使用VBE编写程序的时候，可以使用快捷键来提高工作的效率。', '', 'VBE中可以使用的主要快捷键如下所示。', '', '', '', '', '', '', '', '2017-11-30 14:04:55', null, null, '[{\"title\":\"与输入・编辑相关的主要快捷键\",\"heads\":[\"快捷键\",\"操作\"],\"rows\":[[\"<Tab>键\",\"插入一个缩进\"],[\"<Shift + Tab>键\",\"删除一个缩紧\"],[\"<Ctrl> + <Speace>键\",\"显示输入可选项\"],[\"<Ctrl> + <l>键\",\"显示快速提示\"],[\"<Ctrl> + <Shift> + 键\",\"显示参数提示\"],[\"<Ctrl> + <J>键\",\"属性/方法一览\"],[\"<Ctrl> + <Shift> + <J>键\",\"显示常量一览\"],[\"<Ctrl> + ↑键\",\"选择前一过程\"],[\"<Ctrl> + ↓键\",\"显示后一过程\"],[\"<Ctrl> + <Home>键\",\"将光标移动到组件的前端\"],[\"<Ctrl> + <End>键\",\"将光标移动到组件的末尾\"],[\"<Ctrl> + →键\",\"将光标移动到句右端末尾\"],[\"<Ctrl> + ←键\",\"将光标移动到句左端末尾\"],[\"<Home>键\",\"将光标移动到行右端末尾\"],[\"<End>键\",\"将光标移动到行左端末尾\"],[\"<Ctrl> + <F>键\",\"检索\"],[\"<Ctrl> + <Home>键\",\"置换\"],[\"<Ctrl> + <Z>键\",\"撤销\"],[\"<Ctrl> + <Y>键\",\"将光标所在行剪切（注意并不是撤销）\"],[\"<Ctrl> + <G>键\",\"显示立即窗口\"],[\"<F8>键\",\"逐语句\"],[\"<F9>键\",\"设定/解除断点\"],[\"<Ctrl> + <Shift> + <F9>键\",\"解除所有断点\"],[\"<F5>键\",\"运行宏\"],[\"<Ctrl> + <Break>键\",\"中断程序\"],[\"<Alt> + <F11>键\",\"显示Excel\"]]}]');
INSERT INTO `t_tips` VALUES ('7', '7', '制作宏', '代码窗口', '在[代码窗口]记述宏。', 'Sub Sample007()@        MsgBox \"Hello World\"@    End Sub', '制作宏。制作宏时打开VBE，在[插入]菜单选择[标准模块]。在[标准模块]，记述VBA的程序\n            \n            \n                在这里，[标准模块]追加后，在[代码窗口]表示[Hello World]的信息记述在这个程序中。\n                另外，在Excel2013，关闭空的程序时会自动消除。', '/images/zhiku/TipsNO007-001.png', '/images/zhiku/TipsNO007-002.png', '', '', '', '(添加[标准模块])', '(输入代码)', '2017-11-30 14:04:55', null, null, '');
INSERT INTO `t_tips` VALUES ('8', '8', '[记录宏]机能的使用', '[宏的记录]', '[记录宏]，是Excel中自动的制作宏的便利的机能。\n            \n                不仅是制作宏，忘记指令的时候，在[宏的记录]这一机能时，也可以使用帮助代替', 'Sub	Macrol()@    #@    #Macrol　Macro@    #@    #@        With Selection.Font	<cite>#设置选择部分的字体</cite>@            .Name = \"Calibri\"@            .Size = 14		<cite>#尺寸设置为14磅</cite>@            .Strikethrough = False@            .Superscript = False@            .Subscript = False@            .OutlineFont = False@            .Shadow = False@            .Underline = xlUnderlineStyleNone@            .ColorIndex = xlAutomatic@            .TintAndShade = 0@            .ThemeFont = xlThemeFontMinor@        End With@        Selection.Font.Bold = True	<cite>#字体设置为粗体字</cite>@    End Sub@    Sub Sample008()@        With Selection.Font@        <cite>#设定选择部分的字体</cite>@            .Size = 14		<cite>#尺寸设置为14磅</cite>@            .Bold = True	<cite>#粗体字</cite>@        End With@    End Sub', '使用[宏的记录]，制作宏。开始宏的记录时，点击[宏的记录]按钮。结束的时候，点击[结束宏的记录]\n            \n            \n                在这里，选择的单元格的字体大小设置为14磅，粗体字。[Macrol]程序，在[宏的记录]制作程序。\n                另外，[Sample008]程序是一个记叙了不要用宏记录进行相同处理的例子。\n            \n            \n                像这样使用[宏的记录]的时候，多余的处理也要被记述。但是，例如忘记设置字体为粗体字的时候，如果用\n                [宏的记录]制作代码的话，能够注意到粗体字的设定为[Bold]。根据所查找的内容的不同，与用help查询\n                相比，查询的时间可能提前。所以，擅长使用[宏的记录]对有效率的工作是很重要的。', '/images/zhiku/TipsNO008-001.png', '/images/zhiku/TipsNO008-002.png', '', '', '', '(开始[宏的记录])', '(结束[宏的记录])', '2017-11-30 14:04:55', null, null, '');
INSERT INTO `t_tips` VALUES ('9', '9', '保存包含宏的工作簿', '另存为', 'Excel2007以后的版本、有包含宏的工作簿和不包含宏的工作不簿、对应的工作簿的扩展名是不同的。\n                包含宏的工作簿的扩展名是“.xlsm”、不包含宏的工作簿的扩展名是“.xlsx”。', '', '包含宏的工作簿的保存、通过[另存为]对话框的[保存类型]下拉框选择[Excel启用宏的工作簿(*.xlsm)]。\n                要注意的是，选择通常的工作簿(扩展名.xlsx)的形式、生成的宏将会被删除。', '/images/zhiku/TipsNO009-001.png', '/images/zhiku/TipsNO009-002.png', '扩展名的显示', '通过windows能够设置扩展名的显示或者不显示。显示扩展名、在看文件种类的时候或非常方便。\n            \n            \n                扩展名的显示、“文件夹选项”对话框的“查看”“详细设定(高级设置)”有“隐藏已知文件类型的扩展名”标签，将其改为off。', '', '(另存为对话框)', '(保存的文件)', '2017-11-30 14:04:55', null, null, '');
INSERT INTO `t_tips` VALUES ('10', '10', '包含宏工作簿的打开', '信息', '包含宏工作簿的打开，“信任中心设置”的“宏设置”变成“禁用所有宏，并发出通知”宏被\n                禁用的状态被打开。Excel2013/Excel2010可以通过单击“安全警告”的“启用内容”使宏有效\n                (如果是Excel2007的话，单击“选项”显示“Micrasoft Office 信任中心设置”的对话框，选择)\n                “启用这个内容”。', '', 'Excel2010以后的版本，对于打开的一次有效宏的工作簿，如果不执行文件名的更改，就不会提示确认信息。\n            \n            \n                但是，事先启动Excel，然后打开VBE的时候，会提示确认对话框。', '/images/zhiku/TipsNO010-001.png', '/images/zhiku/TipsNO010-002.png', '', '', '', '(提示确认信息)', '(宏有效后提示信息消失)', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('11', '11', '个人宏工作簿的生成', '「PERSONAL.XLSB」文件', '个人宏工作簿是在Excel启动的时候自动读入的。自Excel2007以后，被叫做“PERSONAL.XLSB”的文件。\n            \n                普通的宏是和当前工作簿一起保存的。宏是为了工作簿的附属而存在的，工作簿不打开的情况下宏是无法被调用的。\n                不过个人使用宏的生成，可以跟Excel保存宏的方式相同。', '', '“PERSONAL.XLSB”工作簿的生成，使用“录制宏”。通过“录制宏对话框”将宏保存在指定的“个人宏工作簿”。\n                生成“PERSONAL.XLSB”文件。之后执行录制宏，在Excel关闭时，确认个人宏工作簿的保存。\n            \n            \n                通过这次，下次从Excel启动时开始，“PERSONAL.XLSB”工作簿也变成自动打开。\n                之后，通过“工程-VBAProject”打开“PERSONAL.XLSB”并记述。\n            \n            \n                然而，Excel2007以后，“PERSONAL.XLSB”的扩展名“.xls”取消了。\n                正因如此，Excel2003和Excel2007同时存在一台电脑的时候，要注意的是2007以后的个人宏工作簿\n                一编辑和保存的时候，Excel2003就不能被使用了。', '/images/zhiku/TipsNO011-001.png', '/images/zhiku/TipsNO011-002.png', '', '', '', '(个人宏的生成)', '(打开的“PERSONAL.XLSB”工作簿)', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('12', '12', 'VBE的构成要素的理解', '', 'VBA的代码是由对象、属性和方法等构成的。对于VBA学习者来说，学习VBA的构成要素有助于灵活运用VBA。', '', 'VBA的主要构成要素如下所示。\n            \n            \n                对象中有层级构造。所谓层级构造，是指对象中还有对象。\n                比如说，Workbook对象（book）中有Worksheet(wooksheet),进一步还有Range对象（cell）。\n            \n            \n                从对象的角度来说，上一层的对象是称之container。层级构造的理解是VBA学习进阶的第一步。\n            \n            \n                对象层级构造也称作对象模型。', '', '', '', '', '', '', '', '2017-11-30 14:04:56', null, null, '[{\"title\":\"VBA的主要构成要素\",\"heads\":[\"构成要素\",\"说明\"],\"rows\":[[\"对象\",\"Excel的worksheet和cell等，构成Excel的部分都称之为【对象】。\\n                        有Appliaction、Workbook、Worksheet、Range、Shape等。\"],[\"集合\",\"同一类对象的集合，称之为集合。集合里含有的对象称为集合的对象成员。包括Workboots(所有book的集合)，\\n                        Sheets(指定的活性book的worksheet·graphsheet等的所有sheet)等。\"],[\"属性\",\"对象属性称为属性。比如，说到font和颜色，font是对象，颜色是属性。\\n                        属性在程序中能够设定和取得（也有读取专用的属性）。\"],[\"方法\",\"操作对象或者集合的命令称为方法。比如，说到添加worksheet,【添加】就是一个方法。\"]]}]');
INSERT INTO `t_tips` VALUES ('13', '13', '编译和执行错误的理解', '', '程序的编写和执行中，都有可能发生错误。编程过程中发生错误是很正常的。熟悉错误种类，有助于提高编程的效率。', '', '程序的编写和执行中，都有可能发生错误。编程过程中发生错误是很正常的。熟悉错误种类，有助于提高编程的效率。', '/images/zhiku/TipsNO013-001.png', '/images/zhiku/TipsNO013-002.png', '', '', '', '', '', '2017-11-30 14:04:56', null, null, '[{\"title\":\"VBA的主要构成要素\",\"heads\":[\"构成要素\",\"说明\"],\"rows\":[[\"编译错误\",\"VBA中命令拼写错误、参数指定错误等等的情况，属于语法错误的范畴。\\n                        编译错误发生时，会弹出错误信息，错误的位置会标红。单击错误信息的OK按钮修正错误。\\n                        程序执行中发生编译错误时，会弹出错误信息，错误的位置会被表示出来。\\n                        此时程序进入中断模式，点击错误信息【OK】按钮，再点击工具条中的【reset】按钮，\\n                        程序会终止，此时进行错误修正。\"],[\"执行时错误\",\"程序执行发生错误时，根据执行情况会出现不同的错误。\\n                        对于指定的worksheet不存在，变量类型不一致等等，这样的情况就会发生错误。\\n                        执行错误发生时，错误序号和内容都会在错误信息里表示出来。\\n                        如果点击了【debug】，会停在错误发生的位置，程序进入终端模式。单击【stop】，程序停止。\"]]}]');
INSERT INTO `t_tips` VALUES ('14', '14', '通过中断方法确认错误发生的位置', '', '所谓调试，就是除掉程序中的虚错误（故障）。实行时有错误发生的话，单击[调试]之后，确认错误的位置。', '', '实行时发生错误的场合，为了查找错误的原因，确认变量的内容、属性的值。单击[调试]，\n                由于程序进入中断样式，不仅能确认错误的位置还可以在[Local Browser]中确认属性的值。', '/images/zhiku/TipsNO014-001.png', '/images/zhiku/TipsNO014-002.png', '修正错误', '通过中断确认错误的话，单击VBE的工具栏的[重新设置]按钮中断程序，修正错误。\n            \n            \n                这时，请注意程序是在哪个地方中断的。例如，属性「EnableEvents」变成False之后，\n                一旦程序终止，由于属性「EnableEvents」的值是False，之后作了和预期不一样的处理\n                (有属性「EnableEvents」，之后的事件不再触发)\n            \n            \n                那样的场合，在模拟窗口属性值变更后继续下面的处理。', '', '', '', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('15', '15', '程序实行时在特定的地方中断程序', 'ブレークポイント', 'プレークポイントは、プログラムの実行を設定した位置で中断することができる機能です。こうする\n               ことで、プログラムを段階的に実行してエラーの発生箇所をチェックすることができます。', '', 'プレークポイントを設定するには、コードウィンドウの左側の余白の部分をクリックするか、設定する\n                ステットメントにカーソルを置いてF9キー押します。解除するには、再度同じ箇所をクリックするか、F9キーを押します。\n            \n            \n                なお、すべてのプレートポイントを解除するには、Ctrlキー＋Shiftキー＋F9キーを押します。', '/images/zhiku/TipsNO015-001.png', '/images/zhiku/TipsNO015-002.png', 'Stopステートメント', 'Stopステートメントは、プレークポイントと同様に、処理を中断します。\n                次のサンプルを実行すると、ループ処理の後、Stopステートメントの箇所で処理が中断します。', 'Sub　Sample015_2()@        Dim temp(1 To 3) _@            As String@        Dim i As Long@        For i=1 To 3@            temp(i)= I@        Next@        Stop@    End Sub', '([開発]タブを表示する)', '([開発]タブを表示された)', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('16', '16', '程序的确认处理和执行(1)', '单步执行', '使用单步执行，每一行都会执行程序的规则，因为每一行都会执行，恰好发现程序的错误。', '', '单步执行，执行规则是传唤其他场合的程序，对方的程序，但执行每一阶段的规则。\n            \n            \n                单步执行，快捷键的使用很方便，单步执行的快捷键使用时F8键，还使用调试密封条，会执行单步入口。', '/images/zhiku/TipsNO016-001.png', '', '', '', '', '', '', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('17', '17', '程序的确认处理和执行(2)', '步骤执行/按步执行', '执行程序编码的每一步，并能确认有没有错误。\n            \n                步骤执行是执行编码的输出时的过程，连续执行输出终端的过程。按步执行是按步返回输出\n                终端的过程，连续执行到过程的最后。在main函数中是逐步的返回到下一行的过程。', '', '步骤执行/按步执行都可以使用快捷健，还有debug工具栏可以使用鼠标每次通过快捷键返回', '/images/zhiku/TipsNO017-001.png', '/images/zhiku/TipsNO017-002.png', '', '', '', '(temp = Sample017_2行至断点设定程序的执行)', '(摁住Shift键 + F8键去执行Sample017_2，移至MsgBox temp控制)', '2017-11-30 14:04:56', null, null, '[{\"title\":\"步骤执行/按步执行的快捷键\",\"heads\":[\"快捷键\",\"说明\"],\"rows\":[[\"Shift键　＋　F8键\",\"步骤执行的快捷键\"],[\"Ctrl键　+ Shift键　+　F8键\",\"按步执行的快捷键\"]]}]');
INSERT INTO `t_tips` VALUES ('18', '18', '对象的属性的值确认', '本地窗口/快速指针/监视窗口', '变量的值和参数的值确认、快速指针/指针窗口/局部窗口的利用。', '', '快速指针的停止方法的使用丶指针所在位置的变量和参数的值的表示。\n            \n            \n                监视窗口的中断方法是复数的变量和参数追加了指针，可以检查。\n            \n            \n                本地窗口的使用和模块内的变量的值可以确认。', '/images/zhiku/TipsNO018-001.png', '/images/zhiku/TipsNO018-002.png', '', '', '', '', '', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('19', '19', '变量的值的变化的表示', 'Print 方法', 'Print 方法是指定场合的object类型的Debug目的对象，[即时]输出窗口文本。变量outputlist是使\n                用指定方式再次输出样式的列表。省略的场合是出现空白行的时候做输出。而且，变量outputlist指\n                定的值请参照[详解]。', 'Sub Sample019()@        Dim i As Long@        Dim num As Long@        For   i = 1 To 10　　<cite>#反复处理10回</cite>@            num = num + i　　<cite>#代入变量num的值</cite>@            Debug.Print i; Tab(5); num@            <cite>#变量i和变量num的值使用Tab存储</cite>@            <cite>#输出[即时windows]</cite>@        Next@    End Sub', '这里是执行循环处理，输出变量的值的[即时窗口]。1行变量i的值连续用Tab插入5个文字，输出num的值。\n            \n            \n                而且，变量num的值是num和变量i的累计值。\n            \n            \n                Print方法指定的方式在有复数的场合是在段落后用这样的[;(分号)]分隔。还有使用的Tab是[Tab(n)],\n                space是[Spac(n)](它们括号里面的n是插入的文字数量)。', '/images/zhiku/TipsNO019-001.png', '/images/zhiku/TipsNO019-002.png', '', '', '', '(通过[即时窗口]进行值得输出操作)', '(通过[即时窗口]输出运行后的结果)', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('20', '20', '做到会利用help', 'help的安装', 'VBA的帮助是，安装Excel在标准场合，不做安装。在VBA这个场合点击[帮助]→\n                [Microsoft VisualBasic帮助]促使显示安装画面，按照指示安装。\n                中途，因为促使CD-ROM的插入显示出message，请事先准备CD-ROM。\n                此外，从Excel中参考help和启动Web浏览器，搜索Web上的目录。', '', '显示[Visual Basic的help]，显示目录。从目录里点击一下想要查找的项目，并能确认内容。\n                另外在[搜索框]输入想要搜索的关键字(key word)，也可以查找help。\n                现在输入的是代码，用代码窗口，按压F1键按照指示查找想要的的对象呀校正等等，能自动搜索。\n                此外，在Excel2010/Excel2007中help不能巧妙地显示的情况下，\n                请从help界面的[搜索]选择[这个电脑上的目录]的[DeveloperReference]。', '/images/zhiku/TipsNO020-001.png', '', '', '', '', '', '', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('21', '21', '使用Object浏览器', 'Object浏览器', '在Object浏览器的操作中包括研究课题一览表的等级和成员、这个定义能确定。启动Object浏览器\n                按Ｆ2键。', '', '用Object浏览器目的是查找等级呀成员呀、利用box[搜索文字列]。box[搜索文字列]里，用Object浏览器\n                输入字符串搜索。现在、在这里把想搜索的关键字显示在界面上，对比想要搜索的关键字按压shift键＋F2键.\n                \n                此外，在Object浏览器中，不会从开始显示全部的项目。不显示完成的原因，也有参照不到的项目。搜索\n                全部的项目૰可能会参照，在box[class]点击右键，点击[显示隐藏的内容]。另外，class名字等的前面有一个图标\n                的意思，像下面这样。', '/images/zhiku/TipsNO021-015.png', '', '关于VBE的启动方法', '启动VBE也可以通过菜单中的\"开发工具\"→\"Visual Basic\"按钮来做成。但是，一般\n                做成项目的时候，还是想利用效率稍微高一些的好方法。所以还是应该积极使用上文中提\n                到的<Alt+F11>组合键。', '', '', '', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('22', '22', 'Sub程序的使用', 'Sub声明', 'Sub使用声明，生成Sub程序，根据Sub声明指定的项目\n                和根据引数指定的项目，请参照[详解]。', 'Sub 	Sample022()@        Dim   I   As   Long@        Dim   num   As   Long@        For   I   =   1   To   5	<cite>反复修改5次</cite>@            num   =   num   +   Cells(i ,   2) .Value	<cite>需要将B列求和</cite>@        Next@        Range(\"B6\").Value   =   num	<cite>在B6单元格输入总和</cite>@    End   Sub', '在这，合计B1-B5。在B6单元格输入 B1-B5单元格的总和。\n                这次修改后新生成的这个程序名可以使用的字数是有限的。\n            \n            \n            　　● 半角文字在225字以内。\n            　　● 数字前不能使用（＿）。\n            　　● 下划线（＿）不可以用空格来表示。\n            　　● 不区分英文的大/小写字母。\n            　　● 全角英文字母自动转换成半角。\n            　　● 原则上不可以使用VBA事先定义好的关键字来起函数名。', '/images/zhiku/TipsNO022-001.png', '/images/zhiku/TipsNO022-002.png', '', '', '', '(求B列的合计值)', '(在B6单元格输入)', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('23', '23', '使用Function过程', 'Function声明', 'Function过程是返回处理结果的过程。利用用户定义的这类函数，Function过程就是\n                将指定值的过程名（name）和数据类型的值（[As type]指定）返回。\n                关于Function声明中指定的值，请参照Tips022。', 'Function Tax(ByVal Price As Currency) As Currency@    <cite>#用户自定义函数返回变比整型数据</cite>@    Tax = Int(Price * 0.05)	<cite>#求得消费税额	</cite>@    End Function', '在这里，使用使用用户自定义函数从【金额】求取消费税额。过程名为Tax，变量名取Price。\n                  处理结果返回变比整型数据。\n                  变量Price乘以0.05，使用int函数将结果转换为整数值，返回处理结果。\n                  该函数，在工作表中可以像通常的函数一样使用。使用Function过程，可以创建单独的函数。\n                  另外，过程名的命名存在命名规则，详细参照Tips022。', '/images/zhiku/TipsNO023-001.png', '/images/zhiku/TipsNO023-002.png', '', '', '', '(自定义函数)', '(用自定义函数计算消费税额)', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('24', '24', '使用Property过程', 'Property Let/Set/Get声明', '利用Property过程可以创建单独的属性。通常，使用类模型创建单独类时，作为该类的属性\n            来定义使用。Property Let声明就是声明设定属性（Property Set声明就是使用这个属性），\n            Property Get声明就是参照这个属性值。通常两个声明同时使用。这时，过程名必须相同。	\n            但是，只有用Property Get声明的属性才可以作成只读的属性。关于如何设置属性值，详细	\n            请参照Tips022。', '<cite>#Member类模型</cite>@    Private mName As String@    Private mAge As Long@    Public Property Let Name(ByVal vName As String)@    mName = vName@    End Property@    Public Property Get Name() As String@    Name = mNAME@    End Property@    Public Property Let Age(ByVal vAge As Long)@    mAge = vAge@    End Property@    Public Property Get Age() As Long@    Age = mAge@    End Property@    <cite>#标准Module</cite>@    Sub Sample024()@        Dim vMembers As Collection@        Dim clsMember As Member@        Dim i As Long@        Set vMembers = New Collection       <cite>#使用Collection</cite>@        For i = 1 To 2@        Set clsMember = New Member	     <cite>#Member类作成</cite>@            clsMember.Name = Cells(i + 1, 1).Value@            <cite>#A列的值设为Name参数</cite>@            clsMember.Age = Cells(i + 1, 2).Value@            <cite>#B列的值设为Age参数</cite>@             vMembers.Add clsMember	     <cite>#添加到Collection</cite>@            Set clsData = Nothing@        Next@        MsgBox \"第一个成员：\" &amp; vblf _@            &amp; \"姓名：\" &amp; vMembers.Item(1).Name &amp; vblf _@            &amp; \"年龄：\" &amp; vMembers.Item(1).Age@         <cite>#从Collection的第一个要素取得姓名和年龄</cite>@         <cite>#使用MsgBox表示</cite>@    End Sub', '在这里，使用Member类保存【姓名】和【年龄】。Member类中，用【Name】Property	\n                管理姓名，用【Age】Property管理年龄。	\n                在循环处理中作成Member类（Member类实例化），输入每个参数的值。	\n                如果要得到一个人的数据信息的话，追加Members Collection。这个处理按着人数来进行。\n                最后，从Members Collection获取第一个要素，使用Name参数和Age参数获取值，在MsgBox\n                中显示出来。', '/images/zhiku/TipsNO024-001.png', '/images/zhiku/TipsNO024-002.png', 'Collection工程和类', 'Collection工程可以指定工程的要素。利用这个特点，在管理类的实例化时使用更加便利。\n                这个实例中，将Member类的实例化追加到Collection中，然后从Collection中抽出数据。', '', '(取得[姓名]和[年龄])', '(表示[姓名]和[年龄])', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('25', '25', '调用其他的过程', 'Sub语句/Function语句', '工程中，对于共通处理共使用一个过程，从其他的过程调用该过程进行使用。这样的话便\n                可以作成一个易于维护的程序了(存在多个相同处理的时候，更加有效率，当需要修改时，\n                不用修改多个地方)。调用其他过程，调用父级过程和被调用过程的子程序。对于子过程，\n                不用理会是Sub过程或者Function过程。', 'Sub Sample025()@        If Sample025_2(Range(\"A1\").Value) Then@        <cite>#调用[Sample025_2]过程，对其处理结果进行处理</cite>@            MsgBox \"A1单元格中含有VBA\"@        Else@            MsgBox \"A1单元格中不含有VBA\"@        End If@    End Sub@    Function Sample025_2(ByVal vData As String) As Boolean@    <cite>#对参数vData的值验证，返回布尔类型的函数</cite>@        If InStr(vData,\"VBA\") &gt; 0 Then@        <cite>#对参数vData中是否含有[BVA]进行判断</cite>@            Sample025_2 = True@        Else@            Sample025_2 = False@        End If@    End Function', '在这里，从[Sample025]过程调用的[Sample025_2]过程。[Sample025_2]过程中，参数vData中\n                含有“VBA“时返回True，不含的情况下返回False。\n                这个函数是独立的函数，当不同的过程中有同样的处理要求时，也可以调用[Sample025_2]过程。\n                当[Sample025]过程调用这个过程时，A1单元格的值就会传到该过程中，就会显示出相对应的处理\n                结果。', '/images/zhiku/TipsNO025-001.png', '/images/zhiku/TipsNO025-002.png', 'Sub过程的灵活运用', '对于初学者来说，所有的处理往往都要要写到1个过程里。为此，太长的过程对于后期修改时，可读性低。\n                在实际中作成的时候，不与其他处理共享，若是在处理中预先将过程分开的话，可使程序的可读性提高，也利于维护。\n                最开始或许并没有那么容易，但请一定要掌握这种分割过程的意识。', '', '(对A1单元格进行验证处理)', '(信息显示)', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('26', '26', '程序中变量的递交', 'Sub 声明/Function 声明', '程序调用的时候，会给变量指定赋值。开始调用程序接收返回值的场合是在指定变量的时候，变量用\n                括号括起来。在不需要接收返回值的场合时不需要括号。', 'Sub Sample026()@        Sample026_2 Range(\"A1\")   <cite>#Sample026_2#程序调用</cite>@        End Sub@        Sub Sample026_2(ByVal vData As Range)@            <cite>#变量取得单元格(Range 对象)程序</cite>@            If InStr(vData.Value,\"VBA\")&gt;0 Then@            <cite>#这行是对单元格的值[VBA]是否包含的判断和处理</cite>@            vData.Interior.ColorIndex = xlNone@        Else@            vData.Interior.Color = RGB(255,0,0)@        End If@    End Sub', '这里是变量取得单元格（Range对象）完成的程序（Sample026_2)。\n                变量是用这个对象来指定。这里是变量作为接收单元格的值，单元格的值包含字符串[VBA]，那个\n                没有颜色的单元格[没有涂色]运行后包含输出的必须是是[红色]的单元格。\n                调用程序的一方面是，特别在开始调用程序时没有接收程序的返回值，为此变量不用在括号内指定\n                返回值。', '/images/zhiku/TipsNO026-001.png', '/images/zhiku/TipsNO026-002.png', '', '', '', '(单元格的值对应涂抹颜色发生变化)', '(单元格涂抹变成红色)', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('27', '27', '值传递和地址传递的比较', 'ByVal关键字/ByRef关键字', '关于参数，有值传递和地址传递两种传递方法。值传递时，用ByVal关键字指出参数；地址传递时，\n                用ByRef关键字指出参数。省略时，用地址传递。按值传递参数时，传递的只是变量的副本。因此、 如果\n                过程改变了这个值，则所作变动只影响副本而不会影响变量本身。相对来说，按地址传递参数时，传递的\n                是地址上的变量值。关于地址上的变量值，是在内存上保存的变量值。如果过程改变了这个值，值本身会\n                发生改变，则所作变动会影响变量本身。', 'Sub Sample027()@        Dim a As String, b As String@        a = Range(\"A1\").Value		         <cite>#代入单元格A1的值</cite>@        b = Range(\"A2\").Value		         <cite>#代入单元格A2的值</cite>@        Sample027_2 a, b			 <cite>#给Sample027_2程序传值</cite>@        MsgBox \"a的值：\"　&amp; a &amp; vbCrLf &amp; \"b的值：\" &amp; b@         <cite>#在MsgBox显示参数a和参数b的值</cite>@    End Sub@    Sub Sample027_2(ByVal a As String, ByRef b As String)@        a = \"ByVal变更\"				 <cite>#把值代入变量a</cite>@        b = \"ByRef变更\"				 <cite>#把值代入变量b</cite>@    End Sub', '在这里，把单元格A1和单元格A2的值分别代入到参数a和参数b。参数a是按值传递、参数b的值是\n                \"按地址传递、传递到Sample027_2程序。在Sample027_2程序中，分别收取代入的参数值。继续执行\"\n                Sample027_2程序，在MsgBox显示参数a和参数b的值。得到不同处理的结果，按地址传递的参数b的值\n                发生了变化。', '', '', '', '', '', '', '', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('28', '28', '用Function返回复数值的程序', 'ByRef关键字', '传递程序参数变量，变更变量值的场合，调用并影响初始值。只能被用作返回程序复数的值', 'Sub Sample028()@        Dim  P1  As  Double,  P2  As   Double@    P1  =  Range (\"A2\") . Value         <cite> # 赋予单元格A2的值	</cite>@        P2  =  Range (\"A2\") . Value      <cite># 赋予单元格A2的值</cite>@        Sample028_2  P1,  P2          <cite>#传递程序 Sample028_2的值</cite>@        Range (\"B2\") .Value  =  P1           <cite>#赋予单元格B2变量的值	</cite>@        Range (\"C2\") .Value  =  P1           <cite>#赋予单元格B2变量的值	</cite>@    End Sub@    Sub Sample028_2(ByRef  Price1  As  Double,  ByRef  Price2  As  Double)@        Price1  =  Price1  /  (1  +  0.05)           <cite> #求省去增值税的金额</cite>@        Price2  =  Price2  -  Price2  /  1.05         <cite>#求增值税金额</cite>@    End Sub', '使用传递参数，作函数处理复数的值。在这里，从含税金额去处理2次省去税金额到增值税\n                金额。传递参数变量，改变传递变量（在这里变量Price1和变量Price2）的值，调用初始变量P1和P2\n                的内容并更改', '/images/zhiku/TipsNO028-001.png', '/images/zhiku/TipsNO028-002.png', '', '', '', '(求省去税金额和增值税金额)', '(输入省去税金额和增值税金额)', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('29', '29', '创建含可选参数的过程', 'Optional关键字', '用Optional关键字修饰过程的参数，该参数变为可选的参数。可以指定缺省值(defaultvalue )，\n            也可以使用默认值。\n            另外，使用Optional关键字时，可选参数的后面的所有参数也必须是可选参数。', 'Sub Sample029()@        Dim Price As Double@        Dim Discount As Double@        Price = Range(\"A2\").Value <cite>#将A2单元格的值赋给变量</cite>@        If Range(\"B2\").Value = vbNULLString Then@        <cite>#B2单元格的值符合，参数的值变为[Sample029_2]过程的执行结果</cite>@            Range(\"C2\").Value = Sample029_2(Price)@        Else@            Range(\"C2\").Value = Sample029_2(Price, Range(\"B2\").Value)@        End If@    End Sub@    Function Sample029_2(ByVal Price As Double _@        , Optional ByVal Discount As Double =0.2) As Double@        <cite>#定义2个参数，数据类型为Double类型，过程返回值声明为Double</cite>@        <cite>#第2个参数省略时，默认值为0.2</cite>@        Sample029_2 = Price * (1 - Discount)	<cite>#求取打折后的金额</cite>@    End Function', '在这里，从[金额]对求取的打折后的金额做处理。这时，B2单元格为空的话，则使用默认打折\n                率即打折20%。\n                首先，将A2单元格的值赋给Price变量，验证打折率是否为空(B2单元格)，如果是空的话，\n                Sample029_2过程的第二个参数忽略输入。如果不是空的话，将B2单元格的值赋给这个参数。从而\n                分别取得处理结果(处理结果在C2单元格中显示)。', '', '', '', '', '', '', '', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('30', '30', '确认过程的参数被省略', 'IsMissing函数', 'IsMissing函数、可以省略的变数被省略的时候返回True。使用这个函数的时候、\n            可以省略的变量的数据类型不能被省略。', 'Sub   Sample030()@        Dim  Price  As  Double@        Price = Range(\"A2\").Value       <cite> # 把单元格A2的值代入到参数中</cite>@        If   Range(\"B2\").Value = vbNullString  Then@         <cite># 针对单元格B2的值、运行改变参数的过程「Sample030_2」</cite>@            Range(\"C2\").Value = Sample030_2(Price)@        Else@            Range(\"C2\").Value = Sample030_2(Price , Range(\"B2\").Value)@        End   If@    End   Sub@    Function  Sample030_2(ByVal  Price  As  Double , _)  As  Long@            Optional  ByVal  Discount  As  Variant)  As  Double@        If   IsMissing(Discount)   Then@         <cite># 确认变量是否被省略、进行下面处理</cite>@             Sample030_2　=　Price@        Else@             Sample030_2　=　Price * (1-Discount)@        End   If@    End  Function', '对打折后的金额进行処理。这时、B2的[折扣率]栏是空栏的时候按照原价处理\n                \n                最初、A2的值传到变量Price中。检查「折扣率」栏是否是空栏、是空栏的时候，\n                「 Sample030_2」的第二个变量省略。不是空栏的时候、B2的值传递到第二个变量里。\n                处理结果输入到单元格C2中', '', '', '', '', '', '', '', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('31', '31', '作成参数个数不确定的过程', 'ParamArray关键字', '如果在过程的参数中使用ParamArray关键字、指定的参数个数不一样的时候也可以\n            处理。如果带有ParamArray关键字、看成参数可以被省略的配列,只有最后的参数可以使\n            用ParamArray关键字。不可以和Optional、ByVal、ByRef的关键字一起使用。', 'Sub   Sample031()@        Dim  temp  As  Variant@        MsgBox　\"2个值合计　：　\"　＆　＿@            Sample031＿２(Range(\"A1\").Value,  Range(\"A2\").Value)  &amp; vbLf_@            &amp;  \"3个值合计　：　\"　＆　Sample031＿２(Range(\"A1\").Value_@            ,  Range(\"A2\").Value ,   Range(\"A3\").Value)@            <cite># 改变参数的个数，进行第二次处理、表示结果</cite>@    End   Sub@    Function  Sample031_2(ParamArray  args())  As  Long@       <cite>‘声明参数个数不确定的过程。</cite>@        Dim  buf  As  Long , i As  Long@        For  i = 0 To UBound (args)    <cite>#只处理参数值</cite>@             buf = buf + args(i)      <cite> #求和</cite>@        Next@             Sample031_2 = buf         <cite>#返回计算结果</cite>@    End  Function', '过程「Sample031＿２」、计算被指定的参数个数。每当想要改变参数的个数时\n                都要附加ParamArray关键字。为了把参数看成排列、要对循环処理的值求和。\n                \n                「Sample031」是调用的开始。刚开始时只有A1和A2单元格、下一步\n                把所有的三个值作为「Sample031＿２」的参数进行传递、处理结果显示在消息框中。', '', '', '', '', '', '', '', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('32', '32', '在过程的参数中使用排列', '', '可以在过程的参数中使用排列。这种场合、接收排列的过程是在参数名的后面附带上（）\n            表示这是一个排列。但是、接收Variant型数据的时候，后面不带（）。而且、指定排列的时候\n            ，参数是址传递。处理值传递的时候使用Variant型的参数。', 'Sub Sample032()@        Dim  temp(1 To 3) As  Long@        temp(1) = Range(\"A1\").Value  　<cite># A1的値引入变量中</cite>@        temp(2) = Range(\"A2\").Value  　<cite># A2的値引入变量中</cite>@        temp(3) = Range(\"A3\").Value  　<cite># A3的値引入变量中</cite>@        MsgBox  \"三个值相加　：\"　＆Sample032_2(temp)@        <cite># 传递排序到「Sample032_2」中、表示结果</cite>@    End Sub@    Function  Sample032_2(ByRef  args()  As  Long)  As  Long@    <cite># 声明接收排列作为参数的过程</cite>@        Dim  buf As  Long ,  i As  Long@        For  i = 1 To UBound(args)             <cite># 合计排序中的各要素</cite>@            buf = buf + args(i)@        Next  i@        Sample032_2 = buf@    End Function', '单元格A1～A3的值代入到排列变量中、把这个排列传递到过程「Sample032_2」\n                中、处理结果显示在消息框中。关于「Sample032_2」过程、排列作为参数被接收。使\n                用循环处理求和。而且、也可以作成以配列为返回值的过程。那种场合、要声明像\n                「Function Sample.32_2(ByRef  args()  As  Long)  As  Long 」的过程。', '', '', '', '', '', '', '', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('33', '33', '使用VBA启动VBE', 'Visible属性', 'VBE的主窗口、在VBE对象的主窗口取得属性。\n            指定Visible属性的object、能够启动VBE。表示的时候属性指定为true', 'Sub   Sample033()@        Application.VBE.MainWindow.Visible = True@        <cite># 启动VBE	</cite>@    End   Sub', '启动VBE。这个是、宏被登陆到「Sheet1」工作表单击「VBEを起動する」按钮、请确认动作', '/images/zhiku/TipsNO033-001.png', '/images/zhiku/TipsNO033-002.png', '为了从宏操作VBE的准备', '从宏操作VBE的时候、在「安全中心」对话框「宏设定」、「VBA Project Object Model的存取许可」勾选是有必要的', '', '(启动VBE)', '', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('34', '34', '使用VBA添加Module', 'Add方法', 'Aｄｄ方法使用VBComponent集，添加Module，而且，参数Commponent指定Module添加的\n           种类，请参照解说。', 'Sub Sample034()@           ThisWorkbook.VBProject.VBComponents.Add vbext_ct_StdModule@           <cite>#添加Module	</cite>@    End Sub', '添加标准Module、包含在Workbook宏中。而且、Add方法添加的Modulede指定的值中指定的值参照下面的\n                内容。', '/images/zhiku/TipsNO034-001.png', '/images/zhiku/TipsNO034-002.png', '', '', '', '(增加标准Module)', '(标准Module增加完了)', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('35', '35', '使用VBA删除Module', 'Remove方法', 'Remove方法是删除指定带参数Component的Module。指定Module是根据Item属性来记述Module的名。', 'Sub Sample035()@           With ThisWorkbook.VBProject.VBComponents@           .Remove .Item(\"Module2\")@    　　　　<cite>#删除Module2 	</cite>@    　　　　End With@    End Sub', '删除标准Module中的「Module2」、标准Module在Components集合中。\n                因此、在Remove方法中根据Item属性把指定对象的Module删除。', '/images/zhiku/TipsNO035-001.png', '/images/zhiku/TipsNO035-002.png', '', '', '', '(删除标准Module)', '(把标准Module删除了)', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('36', '36', '使用VBA输入/输出系数', 'Import方法Export方法', 'Import方法是，从指定文件夹输出系数。用引数filename指定対象的文件夹。\n           Export方法是，指定输出系数。Object指定対象的系数，引数fiename保存在指定文件夹名下。\n           再者，文件夹的扩展名是标准系数「.bas」、级系数「.cls」、通常的用户形式是「.frm」。', 'Sub Sample036()@        With ThisWorkbook.VBProject@        . VBComponents.Import ThisWorkbook.Path &amp; \"\\Module2.bas\"@        <cite>#Module2.输入系数。</cite>@        . VBComponents(\"Module3\").Export _@        ThisWorkbook.Path &amp; \"\\Module3.bas\"@        <cite>#Module3.输出系数。	</cite>@        End With@     End Sub', '在这里，「Module２」标准系数，这个宏指令是包含书和相同文件夹因此输入。另外，以「Module３.bas」形式保存「Module３」标准系数。', '/images/zhiku/TipsNO036-001.png', '/images/zhiku/TipsNO036-002.png', '', '', '', '(输入系数)', '(已被输入系数)', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('37', '37', '使用VBA获取code', 'Lines属性', 'Lines属性，在引数startline中指定行开始，在引数Count中获取指定行数分的code。object为了，指定\n　                   CodeModule程序语言。', 'Sub Sample037()@         MsgBox \"　第1　-　3行的data　：　\" &amp; vbLf _@            &amp; ThisWorkbook.VBProject _@            .VBComponents(\"Module1\").CodeModule.Lines(1,3)@         <cite>#Module1系数的第1行开始到第3行的MessageBox data 显示出来</cite>@　　 End Sub', '获取VBA的code。获取「Ｍodule」标准系数的第一行开始到第３行的code、显示在\n                MessageBox。VBComponents收集的变量指定「Module1」，用CodeModule属性，获取对象\n                CodeModule。', '/images/zhiku/TipsNO037-001.png', '/images/zhiku/TipsNO037-002.png', '删除code', '删除code的话，可以使用DeleteLines方法。下一次的样本，从「Module2」标准系数的第三行删除１行code。', 'Sub Sample037_2()@           ThisWorkbook.VBProject _@           .VBComponents(\"Module2\") . _@     CodeModule_@            .DeleteLines   4,   1@    End Sub', '(获取VBA的code)', '(把code显示在MessageBox)', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('38', '38', '使用VBA输入代码', 'InsertLines方法', 'InsertLine方法是、将参数line中指定的行的代码用参数code中指定的代码进行输入', 'Sub Sample038()@          Const str As String = ”MsgBox”  ”从程序输入”””@          <cite>#用定数声明插入的字符串</cite>@    　　　ThisWorkbook.VBProject.VBComponents(\"Modulel\")_@        　　　　.CodeModule.InsertLines 10, str@         <cite>#在第十行输入字符串「MsgBox”从程序输入”」</cite>@    End  Sub@    Sub Sample038_2()@    End  Sub', '在这里，MICRO中的「Module1」的第十行、追加文字「MsgBox”从程序输入”」', '/images/zhiku/TipsNO038-001.png', '/images/zhiku/TipsNO038-002.png', '', '', '', '', '', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('39', '39', '使用VBA输入代码', 'ReplaceLine方法', 'ＲeplaceLine的方法是、将参数line中指定的行的代码用参数code中指定的代码进行替换。', 'Sub Sample039()@          Const str As String = vbTab &amp; \"替换\"@          <cite>替换后的文字赋值给定数</cite>@    　    ThisWorkbook.VBProject.VBComponents(\"Module1\") _@        　　　　.CodeModule.ReplaceLine 10, str@           <cite>#将第10行的代码替换</cite>@    End  Sub@    Sub Sample039()_2()@           <cite>#将这个行替换</cite>@    End  Sub', 'ReplaceLine方法是用代码替换。在这里、「Module1」标准系数的十行代码,列表[替换]是用来替换文字行的。', '/images/zhiku/TipsNO039-001.png', '/images/zhiku/TipsNO039-002.png', '', '', '', '', '', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('40', '40', '因管理类而制作类', 'Collection对象/Add方法', '每使用Collection对象，collection就能管理一次对象，Collection通过Add方法添加对象\n            对指定变量请参照Tips608.', '<cite>#“Member”类模块记述	</cite>@    <cite>#类成员管理</cite>@    Private　ｍItems　As　Collection　<cite>为Collection创建私有成员变量</cite>@    Private Sub Class_Initialize()	<cite>‘类的初始化处理</cite>@        Set mItems = New Collection	<cite>‘创建Collection对象</cite>@    End Sub@    Public Sub Add(ByVal vName As String, ByVal vAge As Long)@        <cite>#定义增加成员的方法</cite>@        Dim tempMember As Member@        Set tempMember = New Member@        <cite>#实例化成员类</cite>@        tempMember.Name = vName		<cite>‘设定姓名属性</cite>@        tempMember.Age = vAge		<cite>#设定年龄属性</cite>@        mItems.Add tempMember		<cite>#在Collection中添加实例</cite>@    End Sub@    Public Property Get Item(ByVal vIndex As Long) As Member@    <cite>‘获得成员属性</cite>@        Set Item = mItems.Item(vIndex)@        <cite>#返回成员类的初始值</cite>@    End Property@    <cite>#“Member”类模块记述</cite>@    <cite>#个人的成员信息管理类</cite>@    Private mName As String	<cite>#创建String类型变量姓名</cite>@    Private mAge As Long	<cite>#创建Long类型年龄变量</cite>@    Public Property Let Name(ByVal vName As String)@        mName = vName@    End Property	<cite>#设置姓名属性</cite>@    Public Property Get Name() As String@        Name = mName@    End Property	<cite>#取得姓名属性</cite>@    Public Property Let Age(ByVal vAge As String)@        mAge = vAge@    End Property	<cite>#设置年龄属性</cite>@    Public Property Get Age() As　Long@        Age = mAge@    End Property	<cite>#取得年龄属性</cite>@   <cite> #在「Module1」标准模块内记述</cite>@    Sub Sample040()@        Dim TargetValue As Variant@        Dim vMembers As Members@        Dim i As Long@        With Range(\"A1\").CurrentRegion@            TargeｔValue = .Resize(.Rows.Count - 1).Offset(1).Value@        End With@       <cite> #原本的数据将以Variant类型来排列并取得</cite>@        Set vMembers = New Members@        For i = 1 To UBound(TargetValue)	<cite>#处理排列的所有要素</cite>@            vMembers.Add TargetValue(i, 1),TargerValue(i, 2)@            <cite>#成员类里添加数据</cite>@    Next@    MsgBox \"第二个成员：\"＆ ｖｂLf _@        ＆”姓名：” ＆ ｖMembers.Item(2).Name &amp; vbLf_@        ＆”年龄：” ＆ ｖMembers.Item(2).Age@        <cite>#第二个成员的姓名和年龄在留言板里表示</cite>@    End Sub', '在这里，使用两个类模块。一个是拥有成员个人的\"姓名\"和\"年龄\"的Member类。再一个，是为了管理\n                这个Member类。Members类是使用Collection对象，保持Member类。同时，为了追加成员的Add方法，\n                为了取得指定的成员的属性。', '/images/zhiku/TipsNO040-001.png', '/images/zhiku/TipsNO040-002.png', '', '', '', '(各成员的情报管理信息)', '(第2个成员的情报管理信息)', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('41', '41', '使用对象模块', 'Worksheet对象模块', '对象模块是包括Sheet模块，Book模块等等。Sheet模块是和各Sheet相关联的模块。\n             还有Book模块是和Book相关联。记述Worksheet，Book的事件程序时，这以外的代码也能记述。', '<cite>##在[Sheet1]Worksheet模块中记述</cite>@    Sub Sample041()@        MsgBox  \"Sheet名 : \" &amp; Name@        <cite>##在信息框中表示Worksheet名</cite>@    End Sub', '在这里，在[Sheet1]Worksheet中记述代码。像这样，在对象模块中能记述事件程序以外的代码。\n            \n            \n                   在[标准模块]中记述代码的场合，例如表示单元格范围属性是如果没有指定父对象就返回活动\n                   Sheet的单元格。但是在Sheet模块中记述的场合，把被记述的Worksheet作为对象。\n            \n            \n                这个例子中使用Name属性，但是没有指定像[Worksheets(1).Name]这样的父对象。\n                 尽管如此，因为在Sheet模块中记述所以没有Error。\n            \n            \n                但是，在对象模块中记述的优点是，即使有可能会不存在，也不需要确认。标准模块中，对象可能\n                 会不存在，需要确认。对象模块中不需要确认。', '/images/zhiku/TipsNO041-001.png', '/images/zhiku/TipsNO041-002.png', '', '', '', '表示Worksheet名', 'Worksheet名被表示', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('42', '42', '变量声明', 'Dim声明', 'Dim声明是变量声明的声明。As type是被指定的变量。能够使用的变量名要用哪些文字是有限制的。\n             详细内容请参照[解说]。', '', '变量解说有使用名字的规则。变量的命名规则是这次要掌握的要点。', '', '', '', '', '', '', '', '2017-11-30 14:04:56', null, null, '[{\"title\":\"\",\"heads\":[],\"rows\":[]},{\"title\":\"函数的通用范围有效区间\",\"heads\":[\"函数\",\"声明场所\",\"关键词\",\"范围\",\"有效区间\"],\"rows\":[[\"程序函数\",\"程序内\",\"Dim、Static\",\"函数声明的程序内\",\"程序运行中\"],[\"程序函数\",\"声明区间\",\"Dim、Private\",\"声明模块的全部的程序\",\"还没有声明（关闭解说，结束声明在运行等）\"],[\"程序函数\",\"声明区间\",\"Public\",\"全部的程序\",\"还没有声明（关闭解说，结束声明在运行等）\"]]}]');
INSERT INTO `t_tips` VALUES ('43', '43', '利用复数模块实现相同变量的使用', '公开声明', '宣布变量的公开声明的使用，能够参照宣布模块以外发现变化。另外，变量的宣布是模块的宣布的一部分。', '<cite>[Module2]标准模块的记述</cite>@        Public temp As Long@        <cite>[Module2]标准模块的记述</cite>@    Sub Sample043()@        temp = Range(\"A1\").Value@        MsgBox\"变量的值：\"＆temp&amp;vblf@        &amp;\"10倍变量的值：\"&amp;temp*10@    End Sub', '在这里，[Module2]的标准模块记述是通过[Module1]中使用变量的标准记述实现的。\n                [Module1]中的标准模块，变量temp还没有宣布。但是，实际上已经实现了这个规则的动作。\n                这就是，变量temp是通过[Module2]的标准模块记述，使用公开声明来宣布的原因。', '/images/zhiku/TipsNO043-001.png', '/images/zhiku/TipsNO043-002.png', '', '', '', '其他模块变量的使用', '正确运行', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('44', '44', '指定变量的数值型', 'AS关键字', '变量和常量、属性、函数的返回值的数据、表示数据类型的数据种类。声明变量时、AS关键字\n                指定连续的数据类型。类型指定的值、请参照详解。', '', '以下是数据类型作为能指定的主要类型。', '', '', '省略数据型的指定', '声明变量时、一旦省略数据型的指定就变成了Variant型的变量。', '', '', '', '2017-11-30 14:04:56', null, null, '[{\"title\":\"主要数据类型\",\"heads\":[\"数据类型\",\"占用空间\",\"说明\"],\"rows\":[[\"Byte（字节型）\",\"1字节\",\"0～255整数値。存储二进制数值\"],[\"Boolean（布尔型）\",\"2字节\",\"取Ture或者False\"],[\"Integer(整数型)\",\"2字节\",\"存储-32.768～32.767的整数値\"],[\"Long（长整数型）\",\"4字节\",\"存储-2,147,483.648～2,147,483.647的整数値\"],[\"Single(单精度浮动小数点数型)\",\"4字节\",\"存储小数点数値\"],[\"Double(双精度浮动小数点数型)\",\"8字节\",\"存储比Single更大位数的包括小数点数値\"],[\"Currency(通货型)\",\"8字节\",\"存储包含15位整数和4位的小数数値\"],[\"Date(日期型)\",\"8字节\",\"存储日期、时间\"],[\"String(字符串型)\",\"8字节＋文字列的长度(可变长)、文字列的长度(固定长)\",\"文字列。有可变长和固定长两种类型。变量存在文字列里时用双引号包围。\"],[\"Object(Object型)\",\"4字节\",\"存储去参照Object\"],[\"Variant(Variant型)\",\"16字节(数値)、22字节＋文字列的长度(文字列)\",\"能存储全部的数值\"]]}]');
INSERT INTO `t_tips` VALUES ('45', '45', '声明数值型使用类型声明文字', '类型声明文字', '', 'Sub Sample045()@        Dim Name$                 #声明字符串的变量使用类型声明文字@        Dim Age&amp;                  #声明长整数型的变量使用类型声明文字@        Name = Range(\"A2\").Value  #把变量代入A2单元格的值@        Age  = Range(\"B2\").Value  #把变量代入B2单元格的值@        MsgBox \"姓名:\" &amp; Name &amp; vbLf _@        &amp; \"年龄:\" &amp; Age    #各个值表示在信息箱里。@    End Sub', '这里、使用类型声明文字、声明完后单元格的值在信息箱里表示。\n            \n            \n               以下是类型声明文字的种类。还有、类型声明文字能使用的值。可能可能记述「i=100&」这样的。', '/images/zhiku/TipsNO045-001.png', '/images/zhiku/TipsNO045-002.png', '', '', '', '另存为对话框', '保存的文件', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('46', '46', '使用目的对象变量', 'Set 声明', '代入目的对象使用的场合是利用Set 声明。保存目的对象变量和调用目的对象变量。\n            \n               目的对象变量是，因为没有保存那个目的变量，目的对象上面哪个位置有值就意味着保存这个消息。\n                在这个位置上，表示出来[代入参照的目的对象]。', 'Sub  Sample046()@        Dim sh As Worksheet@        <cite>#定义工作表类型的目的对象变量</cite>@        Set sh = ThisWorkbook.Worksheets(\"Sheet1\")@        MsgBox \"姓名:\" &amp; sh.Range(\"A2\").Value@        <cite> #[Sheet1]工作表的单元格A2的值使用MsgBox表示</cite>@    End Sub', '这里是使用参照工作表的方式代入目的对象变量，使用目的对象变量获得单元格的值。', '/images/zhiku/TipsNO046-001.png', '/images/zhiku/TipsNO046-002.png', '', '', '', '目的对象变量使用工作表访问', '表示单元格的值', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('47', '47', '确认客观变量的种类', 'TyepName函数', 'TyepName函数， 用字符串返回变量的信息和客观变量的种类，关于TypeName函数的返回值，请参照「详解」。', 'Sub  Sample047()@        Dim vName As Variant,vAge As Variant, sh As Variant@              <cite>用Variant型定义所有的变量</cite>@               vName = Range(\"A2\").Value  <cite>用变量代入单元格A2的值</cite>@               vAge = Range(\"B2\").Value   <cite>用变量代入单元格A2的值</cite>@               Ｓｅｔ　ｓｈ　＝　Worksheets(1) <cite>用变量代入单元格A2的值</cite>@               MsgBox \"「姓名 \" ＆　TypeName(vＮame) &amp; vbLf@                   &amp; \"身高 \" &amp;　TypeName(vAge) &amp; vbLf@                   &amp; \"ｗｏｒｋｓｈｅｅｔ\"　&amp; TypeName(sh)@               <cite>分别用MsgBox类型表示</cite>@    End Sub', '首先，向单元格代入输入值，向Worksheet中代入参照变量。这时，用Variant型定义所有的变量\n                那样就完成了。获得TypeName函数输入的类型，这样就能判断输入的值是否正确。\n            \n            \n                 　TypeName函数第二次返回同样的字符串，那么排列变量时分别在字符串类型后用「()」表示，\n               例如：Long(长整数)型排列时用「Long()」。', '/images/zhiku/TipsNO047-001.png', '/images/zhiku/TipsNO047-002.png', '', '', '', '取得单元格范围内数据类型', '分别获得单元格范围数据类型', '2017-11-30 14:04:56', null, null, '[{\"title\":\"TypeName函数主要返回的字符串\",\"heads\":[\"文字列\",\"解释\"],\"rows\":[[\"Workbook\",\"工作手册\"],[\"Worksheet\",\"工作页\"],[\"Range\",\"单元格\"],[\"Long\",\"長整数型（Long）\"],[\"Double\",\"双精度浮点数型\"],[\"Currency\",\"货币型\"],[\"Date\",\"日期型\"],[\"String\",\"字符串型\"],[\"Boolean\",\"布尔类型\"],[\"Error\",\"未初始值\"],[\"Null\",\"无效值\"],[\"Nothing\",\"没参照客观的客观变量\"]]}]');
INSERT INTO `t_tips` VALUES ('48', '48', '确认变量的类型', 'VarType函数', 'VarType函数是返回整数值表达变量内部处理形式。关于VarType函数返回值，请参照详解', 'Sub sample048()@        Dim  vName   As   Variant ,  vAge  AS  Variant,  vTitle  As  Variant@              <cite>声明所有Variant型的变量</cite>@               vName  =  Range (\"A2\") . Value   <cite>赋予单元格A2的变量</cite>@               vAge  =  Range (\"B2\") . Value     <cite>#赋予单元格B2的变量</cite>@               Set  vTitle  =  Range (\"A1:B1\")   <cite>赋予A1-B1的比值的变量</cite>@               MsgBox  \"「氏名」のデータ型：\"　＆　Vartype(vName)  &amp;  vbLf _@                    &amp;  ”「年齢」のデータ型 : ”&amp;    Vartype(vAge)  &amp;  vbLf _@                    &amp;  ”「見出し」のデータ型 : ”&amp;    Vartype(vTitle)@               <cite>每个变量的内容处理形式的值用MsgBox表示</cite>@    End Sub', '在这里，给每个Variant型的变量赋予单元格的值和单元格的范围，使用VarType函数\n                取得数据型变量VarType函数是对Variant型的排列和处理。VarType函数的返回值是下一次\n                的结果。排列的时候返回其他类型值的合计值。例如Variant型排列时，“12（vbVariant）”\n                +“8192（ｖｂArray）”返回的结果是“8240”', '', '', '', '', '', '', '', '2017-11-30 14:04:56', null, null, '[{\"title\":\"VarType函数的主要返回值\",\"heads\":[\"常数\",\"值\",\"解说\"],\"rows\":[[\"ｖｂEmpty\",\"0\",\"Empty值（未初始化）\"],[\"ｖｂNull\",\"v\",\"Null值（无效的值）\"],[\"ｖｂInteger\",\"2\",\"整数型（Integer）\"],[\"vbLong\",\"3\",\"长整数型（Long）\"],[\"vbDouble\",\"4\",\"双精度浮点型（Double）\"],[\"vbDate\",\"5\",\"日期型（Date）\"]]}]');
INSERT INTO `t_tips` VALUES ('49', '49', '列举型的使用', 'Enum 声明', 'Enum声明，数个Long型的常数集中管理。Enum声明是模块水平使用。Enum声明的时候，VBE的自动表示（「,(句号)」输入，自动输入后备表示功能），程序的输入变容易。', 'Private Enum PrColumn <cite>列举型常数的声明</cite>@        prColName = 1@        prcolage = 2@        <cite>各个常数的分配</cite>@        End Enum@        Sub Sample049()@            MsgBox \"氏名：\" &amp;  Cells(2,PrColumn.prColName).value@                &amp; vbLf &amp; \"年齢：\"　＆　Cells(2,PrColumn.prcolage).value@            <cite>单元格的值列举型常数使用的参考，用留言框表示</cite>@    End Sub', '这个单元格A2姓名和B2年龄使用的参照。列举型的使用，暂时对象列替换的时候，列举型的宣言部分变更，错误的防止。', '/images/zhiku/TipsNO049-001.png', '/images/zhiku/TipsNO049-002.png', '', '', '', '「姓名」和「年龄」的取得', '各个值在留言框中的显示', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('50', '50', '对常数的理解', '用户定义常数/编入常数', '所谓常数，和变数一样要暂时把数据放在开辟的空间里。可是，他与变数也是有差别的，最初指定的\n            值后，程序就无法对其进行变更了。在程序中使用，比如会计处理的程序，常数输入消费税率，程序的保守\n            性得到了提高。', '', '用户声明的常数Const，分为用户定义常数和Excel与VBA中使用的已准备好的编入常数。', '/images/zhiku/TipsNO050-001.png', '', '编入常数的资料', '编入常数可以在帮助对象，浏览器中确认，微软公司的网站也可以进行确认。请参照下面的URL。\n            http://msdn.microsoft.com/ja-jp/library/jj692807.aspx', '', '', '', '2017-11-30 14:04:56', null, null, '');
INSERT INTO `t_tips` VALUES ('51', '51', '用户声明一个定义常数', 'Const的声明', '用户利用Const声明一个定义常数。常数保存值由声明时决定。程序中不能代入新值通常“Const”\n                是指用户声明定义常数。\n            \n                Const声明的类型的设定值，请参照Tips044。', 'Sub sample051()@            Const tax As Double = 0.05     <cite>常量的声明</cite>@            Range(\"C2\").Value = Range(\"B2\").Value * tax@            <cite>通过B2栏金额的值求C2中的消费税额。</cite>@    End Sub', '使用常数进行计算处理。这个B2格的金额栏的值乘以消费税率即常数tax，可以得出C2格中的消费税额。\n            \n            \n                 　这个例子中的常数tax，无论是使用1处，多处，还是以后消费税率变更，只需要修改声明部分中的常数，程序的保守性很好提高。', '/images/zhiku/TipsNO051-001.png', '/images/zhiku/TipsNO051-002.png', '', '', '', '使用常数求消费税额', '输出消费税额', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('52', '52', '自定义常数的确认', '对象浏览器', '自定义常数值的调用，对象浏览器的使用效率。', '', '对象浏览器的检索框，调用自定义常数点击输出检索按钮，会进行自定义常数的确认。同时可以更方便的确认自定义常数的成员。\n            \n            \n                 　这个图是自定义常数在xlSheetVeryHidden的检索。工作表的表示/非表示的设定Visible属性指定\n                值，用户操作工作表重新定义这个常数。如果对象浏览器确认，那么这个常数是内部有效的。', '/images/zhiku/TipsNO052-001.png', '/images/zhiku/TipsNO052-002.png', '自定义常数的值', '解说使用常数，内部数值使用的自定义常数的名字通俗易懂。因为实际编程时，自定义常数表示数值常数也可能代替使用。\n        多个版本对应的编码记述的场合 ，自定义常数的数值并不能使用。比如说在Excel2013常数偶尔使用，在过去的版本中编译就会出错。', '', '自定义常数「xlSheetVeryHidden」的检索', '「xlSheetVeryHidden」值的确认', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('53', '53', '运算符的理解', '运算符在加减法等运算、字符串连接、数值的比较等功能的使用。', '=(右边代入左边)', '', '所谓的运算符有算术运算符，比较运算符，字符串连接运算符，逻辑运算符，位运算符，代入运算符六种。运算符具有优先级。各种运算符的次序如下。', '', '', '', '', '', '', '', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('54', '54', '运算符比较级', '比较运算符', '作计算时用比较运算符做数据的比较', 'Sub Saple054()@         Count Discount As Double = 0.2  <cite>声明折扣率为Double类型并赋值</cite>@         Dim Price As Long@         Dim Num As Long@         Price = Range(\"B2\").Value  <cite>将金额的变量代入</cite>@         Num = Range(\"C2\").Value  <cite>将销售数量的变量代人</cite>@         If Num &gt;= 10 Then  <cite>判断销售数量是否大于10</cite>@             RanGe(\"D2\").Value = Round(Price * Num * (1 - Discount),0)@             <cite>当销售数量大于10的时候、使用折扣</cite>@         Else@             Range(\"D2\").Value = Price * Num@            <cite>当销售数量小于10的时候，用单价求销售总金额</cite>@         End If@    End Sub', '在这里，当销售数量的值大于10的时候，对金额进行8折处理，使用IF判断和比较远算符\n                判断销售数量的值是否大于10、使用算数运算符求各种情况的值', '/images/zhiku/TipsNO054-001.png', '/images/zhiku/TipsNO054-002.png', '', '', '', '求销售数量的总金额', '填入计算结果', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('55', '55', '二进制运算的执行', '逻辑运算符', '位运算，是二进制数的一位表示。电脑的内部全部用二进制数进行处理。\n                二进制数只有，「0」和「1」两种表现方式。顺便说一下，我们平日使用的方法为10进制数\n                另外，时钟的秒和分是60进制（0～59为止的60个值）进一位的方式解决。\n                这就是二进制数的每个位数的运算，位的运算方法', 'Sub Sample055()@         Dim num As Long , temp As Long@         num = =range(\"A1\") . Value <cite>把A1的值的变量代入</cite>@         temp = num &amp; 1 <cite>变量值1进行逻辑运算</cite>@         If temp = 0 Then <cite>变量temp的值进行检验</cite>@            MsgBox num &amp; \"は偶数です\"@        Else@           MsgBox num &amp; \"は奇数です\"@        End If@    End Sub', '这是逻辑运算符的使用方法，判断值是偶数还是奇数。在判断运算符的构造下次就能够得出结果\n            \n            \n                 　比如，「5」的二进制表示为「101」，「4」的二进制为「100」。这个「1（001）」和运算符二进制演算，下次就能够得出结果。\n            \n                               101                    100\n                   001                And 001\n             And ______                  ______\n\n                   001                    000\n            \n            \n                 　这样，偶数的情况结果为「0」，奇数的情况右第一位数得到「1」。\n                这就是这次样品的构造和利用方法', '', '', '', '', '', '', '', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('56', '56', '进行满足条件的处理', 'If语句', 'If语句是在指定条件(condition)是True和False的场合的分歧处理。\n            \n                  满足条件(True)的场合执行statements，不满足条件(False)的场合执行elsestatements。', 'Sub Sample056()@         Dim  Num  As  Long@         Num  =  Range(\"B2\").value <cite>#把单元格B2的值赋给变量</cite>@         If  Num  &gt;=  100  Then    <cite>把变量的值大于等于100作为判断条件</cite>@             MsgBox  \"销售数量大于等于100\"   <cite>大于等于100的场合的信息</cite>@         Else@             MsgBox  \"销售数量小于100\"        <cite>小于100的场合的信息</cite>@         End  If@    End Sub', '使用If语句，判断单元格B2的[销售量]的值是否大于等于100，并且表示信息。\n                使用If语句，对应条件的处理是可能的。还有就是能指定If语句的条件部是返回Boolean值的\n                属性(Property)和方法等等。那样的场合，因为这个[If Property = True Then]处理的标记\n                和这个[If True = True Then]处理是一样的，所以是冗长的。如果判断是否是True\n                  就用这个[If Property Then]记述。', '/images/zhiku/TipsNO056-001.png', '/images/zhiku/TipsNO056-002.png', '', '', '', '判断销售数量的值', '信息被表示', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('57', '57', '复数条件下指定分支处理（1）', 'IF声明/逻辑', '', 'Sub Sample057()@         Dim Num As Long@         Num = Range(\"B2\").Value <cite>#设置Ｂ2的值作为参数代入</cite>@         If Num &gt;= 100 And Num &lt;= 150 Then    <cite>参数的值为１００以上不到150的判定</cite>@             MsgBox \"销售数量是,100以上,不到150\"   <cite>条件都满足的场合信息表示</cite>@         Else@             MsgBox \"贩卖数量不是,100以上,不到150\" <cite>条件都不满足的场合信息表示</cite>@         End  If@    End Sub@    解説@    这里是And逻辑的使用，复数的条件下使用的判定处理方法。And逻辑是用「并且」表示。@    这里是「贩卖数量」在100以上不到150情况的判定。这里是逻辑的使用，复数的条件下的@    使用条件可能的分支处理。', '', '/images/zhiku/TipsNO057-001.png', '/images/zhiku/TipsNO057-002.png', '', '', '', '「贩卖数量」值的判定', '', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('58', '58', '多个条件进行判断的不同处理(2)', 'if 声明', '使用If和Elselｆ声明、可以使多分支按条件处理变的可能。最开始condition的FaIse的情\n                况、有ElseIf段、那个部分再一次去条件判定。可能出现多个Elselｆ段如果出现的多程序可读性\n                就会下降。那样的场合、请使用Select Case声明。有关Select Case的声明、请参考Tips059。', 'Sub Sample058()@         Dim Num As Long@         Num = Range(\"B2\").Value              <cite>给变量赋给B2单元格的值</cite>@         If Num &gt;= 150 Then                   <cite>判断变量num的值是不是在150以上</cite>@            MsgBox  \"贩卖量在150以上\"         <cite>在150以上的内容</cite>@         ElseIf Num &gt;= 100 Then               <cite>判断变量num的值是不是在100以上</cite>@            MsgBox \"贩卖量在100以上、不满150\" <cite>在100以上时输出的内容</cite>@         Else@            MsgBox \"贩卖量不满100\"            <cite>除此以外的场合输出的内容</cite>@         End  If@    End Sub', '', '', '', '', '可以在单元格B2输入出售数量的值，可以表示判断条件的信息。最先的条件判定的出售数量在150以上时，或者不道150以上的场合，\n                然后用ElseIf段判断是否在100以上。各段判段的结果输出相应的信息。', '', '', '', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('59', '59', '多条件分支判断的处理(1)', 'Select Case 声明', 'Select Case的声明是在testexpression位置添加表达式指定条件，如果于Case段的值一致，\n                就执行那段语句。找到适合Case段的场合，从那以后的处理不能进行。', 'Sub Sample059()@         Dim Num As Long@         Num = Range(\"B2\").Value              <cite>给变量赋给B2单元格的值</cite>@         Select Case num                      <cite>给定要处理的变量num的値</cite>@            Case Is &gt;=150                     <cite>值在150以上的场合</cite>@                      MsgBox  \"贩卖量在150以上\"@            Case Is &gt;100@                      MsgBox  \"贩卖量大于100、不满150\"@            Case 100@                      MsgBox  \"贩卖量是100\"   <cite>除以外的场合</cite>@            Case Else@                      MsgBox  \"贩卖量在100以下\"@        End Select@    End Sub', '', '', '', '', '可以在单元格B2输入出售数量的值,Select Case后面是需要判断的值。使用那个值根据is后面的表达式进行演算。', '', '', '', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('60', '60', '判断复数条件的分歧处理', 'Select Case语句', 'Select Case语句是对应指定testexpression公式，如果和Case后的值一致就执行这个Case段。\n                在testexpression条件中指定Boolean值，在Case中能记述具体的判断。实际上，进行判断Case的值\n               是否和True/False相等', 'Sub Sample060()@         Select Case True@                Case Range(\"A2\").Value = \"张\"     <cite>如果这个公式是True,进行以下处理</cite>@                     MsgBox \"姓名是[张]\"@                Case Range(\"A2\").Value Like \"张*\" <cite>如果这个公式是True,进行以下处理</cite>@                     MsgBox \"姓名是以[张]开始\"@                Case Else@                     MsgBox \"不符合条件\"@         End Select@    End Sub', '在Case中指定任意的公式进行分歧处理。在例子中判断单元格A2的值。\n                像这样在Select Case语句中能指定最初的公式是Boolean值。', '/images/zhiku/TipsNO060-001.png', '/images/zhiku/TipsNO060-002.png', '', '', '', '表示对应[姓名]栏的值', '信息被表示', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('61', '61', '函数使用分支处理', 'IIF函数', 'IIF函数中，在参数expr中指定处理条件。True(真)的情况，执行参数truepart，False(假)的情况，执行参数(falsepart)。', 'Sub Sample061()@        MsgBox IIF(Range(\"B2\").Value &gt;= 100, \"100以上\", \"不到100\")@         <cite>##判断B2的值，100以上和不是100以上时，返回不一样的提示消息。</cite>@    End Sub', '这是对（贩卖数量）输入数据B2的值的判定。100以上和不是100以上时，表示不一样的消息。', '/images/zhiku/TipsNO061-001.png', '/images/zhiku/TipsNO061-002.png', '', '', '', '()', '()', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('62', '62', '特定的值处理分支', 'Switch函数', '但是，Switch函数指定的条件要全部判断一边', 'Sub Sample062()@        Dim num As Double@        num = Range (\"B2\") . Value@        <cite>设置B2的值的参数</cite>@    MsgBox Switch( num　＞＝　100, \"100以上\"、num &gt;= 50 _@        , \"50以上\", num &gt;= 0, \"0以上\" )@        <cite>对应这些条件下的表示</cite>@    End Sub', '这个是「销售数量」的值', '/images/zhiku/TipsNO062-001.png', '/images/zhiku/TipsNO062-002.png', '', '', '', '根据「販売数量」的值表示消息', '消息被表示了', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('63', '63', '满足条件到实行循环处理', 'Do Loop语句', '另外，中途中断处理时用「Exit　Do」叙述。', 'Sub Sample063()@        Dim num As Long, I As Long@        i=1@        Do Until num &gt;= 5@        <cite>对num变量大于5以上的进行反复处理</cite>@             i=i+1@             <cite>对变量i进行加1</cite>@             num =Cells(I,1).Value　　@             <cite>代入表里的变量num的值</cite>@        Loop@        MsgBox \"5以上の最初のセル：\"@             ＆　Cells(I,1).ADDress(False,False)@             <cite>表中用Address表示MsgBox</cite>@    End Sub', '在这里，表A2以降序的方式输入值，对表中5以上的值反复的检查。请注意观察变化的变量。每次循环处理这个值就会加1运算，然后表A2会再一次检查，循环处理会终止。这样会避免无限循环。如果以某些理由进行了无限循环的时候，请按Esc中断处理。\n        运用循环处理的时候，请注意无限循环。', '', '', '', '', '', '', '', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('64', '64', '满足条件的时候进行循环处理', '满足条件的时候，进行循环处理', '满足反复条件下，Do关键字继续记述条件，循环进行处理判定Loop关键字继续记述进行最后的处理。', 'Sub Sample064()@        Dim num As Long, I As Long@        i=1@        Do While num &lt; 5@        <cite>变量num的值小于5 反复处理</cite>@            i=i+1@            <cite>对变量i进行加1</cite>@            num =Cells(I,1).Value　　@            <cite>将变量cell的值代入</cite>@        Loop@    MsgBox \"5以上值：\"@        ＆　Cells(I,1).ADDress(False,False)@        <cite>用MsgBox表示Cell Address</cite>@    End Sub', '在这里，A2以后输入的值，Cell的值小于5，反复检查请注意，改变cell变量i的值。每次循环处理，这个值加1运算迅速检查A2是否有异常。否则终了循环处理。这样会避免无限循环。如果以某些理由进行了无限循环的时候，请按Esc中断处理。', '', '', '', '', '', '', '', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('65', '65', '至少有一次实行循环处理', 'Do Loop 声明', 'Do Loop声明是实行循环处理的。最少一次进行循环处理时，Loop关键字继续指定条件。', 'Sub Sample065()@        Dim msg As VbMsgBoxResult@    Do@        Range(\"A2\").Value = Range(\"A2\").Value + 5@        <cite>单元格A2的值加5</cite>@        msg = MsgBox(\"是否进行重复处理？\",vbYesno)@        <cite>「いいえ」选择到被重复处理</cite>@        Loop Until msg = vbNo@    End Sub', '在这里，表单元A2的值进行加5运算的处理，一次循环以后，确认的信息，「いいえ」选择到被重复处理。记述了Loop循环处理的最终条件，这个处理必须实行一次。', '/images/zhiku/TipsNO065-001.png', '/images/zhiku/TipsNO065-002.png', '', '', '', '(表单元A2的值加5运算)', '(选择「否」时重复处理)', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('66', '66', '指定次数进行循环处理', 'For Next声明', '执行循环处理一次，counter的値是自动加算。', 'Sub Sample066()@        Dim   I   As   Long@        For   i   =   1   To   5 Step 2@        <cite>##进行循环处理</cite>@            Cells(i + 1, 1).Interior.Color _@            <cite>##求B列的总和</cite>@                = RGB(100,  200,  255)@                <cite>##求B列的总和</cite>@        Next@    End Sub', '这里，每隔一行将A列的数据涂色。由于For Next声明的step【2】指定，进行每一行置换的处理。', '/images/zhiku/TipsNO066-001.png', '/images/zhiku/TipsNO066-002.png', '', '', '', '(每隔一行将单元格的数据涂色)', '(给单元格添加颜色)', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('67', '67', '对对象集合实行循环处理', 'For Each Next声明', 'For Each Next 声明，group指定集合，loop会循环集合中的各要素。', 'Sub Sample067()@       Dim sh As WorkSheet ,temp As WorkSheet@        For Each temp In ThisWorkbook.WorkSheets@        <cite>#现在用loop处理工作簿中的操作页对象</cite>@            If temp.Name=\"Sheet2\" Then@            <cite>#判断Sheet页名字是否为Sheet2</cite>@                 MsgBox\"找到「Sheet2」操作页\"@                <cite>#能看到「Shete2」操作页的处理场合</cite>@                 Exit For@                <cite>#停止loop处理</cite>@            End If@        Next@    End Sub', '那么，确认[Sheet2]操作页存在，使用For Each Next声明。去处理全部操作页的对象，使用Name特性确认操作页名。找到表示消息的场所。Exit For 停止处理loop声明。完成处理。', '/images/zhiku/TipsNO067-001.png', '/images/zhiku/TipsNO067-002.png', '', '', '', '', '', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('68', '68', '跳出循环', 'Exit语句', 'Exit语句是在循环处理，程序处理等中途跳出时使用的语句。', 'Sub Sample068()@       Do@         Range(\"A2\").Value = Range(\"A2\").Value + 10@         <cite> #在单元格A2的值上加[10]</cite>@         If Range(\"A2\").Value &gt; 100 Then@         <cite> #判断单元格A2的值大于100</cite>@              Exit Do@              <cite>##大于100的场合跳出循环</cite>@         End If@       Loop@       MsgBox \"单元格A2的值：\" &amp; Range(\"A2\").Value@       <cite>##在信息框中表示单元格的值</cite>@    End Sub', '在这里，循环时单元格A2的值累加[10]，累加的值大于100时跳出循环。在这个例子的Do Loop语句中，注意没有使用Until关键字和While关键字。单元格A2的值小于100的场合，不跳出循环处理。', '/images/zhiku/TipsNO068-001.png', '/images/zhiku/TipsNO068-002.png', '', '', '', '(如果单元格A2的值比100大时，终止循环处理)', '(循环处理终止，信息被表示)', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('69', '69', '死循环的使用', '死循环的使用', 'Do Loop声明循环的处理行为。循环处理的终止的条件不满足的场合，那个处理无限继续循环。这个死循环，循环处理时学习[是不需要注意的事情]去做。但是，if语句和Exit Do 语句这样使用，死循环变为灵活的程序。', 'Sub Sample069()@        Dim num As Long, I As Long@        i=1@        Do Until num &gt;= 5@        <cite>对num变量大于5以上的进行反复处理</cite>@             i=i+1@             <cite>对变量i进行加1</cite>@             num =Cells(I,1).Value　　@             <cite>代入表里的变量num的值</cite>@        Loop@        MsgBox \"5以上の最初のセル：\"@             ＆　Cells(I,1).ADDress(False,False)@             <cite>表中用Address表示MsgBox</cite>@    End Sub', '在这里，表A2以降序的方式输入值，对表中5以上的值反复的检查。请注意观察变化的变量。每次循环处理这个值就会加1运算，然后表A2会再一次检查，循环处理会终止。这样会避免无限循环。如果以某些理由进行了无限循环的时候，请按Esc中断处理。\n        运用循环处理的时候，请注意无限循环。', '', '', '', '', '', '', '', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('70', '70', 'Function过程', 'Function过程', '如果使用递归处理，在重复同样的操作的情况下，可以把程序进行简单的记述，但是，在递归处理脱离条件不恰当的话会变成错误。', 'Sub Sample062()@        Dim num As Double@        num = Range (\"B2\") . Value@        <cite>设置B2的值的参数</cite>@    MsgBox Switch( num　＞＝　100, \"100以上\"、num &gt;= 50 _@        , \"50以上\", num &gt;= 0, \"0以上\" )@        <cite>对应这些条件下的表示</cite>@    End Sub@    Function Sample070_2(ByVal vStart As Long , ByVal vEnd As Long)@    <cite>##在Function过程中定义两个变量</cite>@        If vStart &gt; vEnd Then@        <cite>##判断变量vStart是否超出参数vEnd</cite>@            Sample070_2 = 0@        <cite>##超出则返回0</cite>@        Else@            Sample070_2 = vStart +Sample070_2(vStart + 1 , vEnd)@            <cite>##没有超出的情况，变量vStart的值加1后再作为变量</cite>@            <cite>##调用自己的进程</cite>@        End If@    End Function', '在这里，使用递归处理处理指定值，进行指定值的累计的处理。调用“Sample070”过程到“Sample070_2”过程。 后来，在「Sample070_2」过程内，变量vStart的值加1后调用自己的进程。变量vStart的值，vEnd的值超过时，“Sample070_2”进程返回“0”，然后结束自己的进程。', '/images/zhiku/TipsNO070-001.png', '/images/zhiku/TipsNO070-002.png', '递归处理的例子', '递归处理，用其他的例子来说的话，包含子文件夹的文件的搜索等也被使用。\n            \n            \n                下一个例子是将制定的文件夹内的文件包含子文件夹内的文件，显示在所有立即窗口中。', 'Sub Sample070_3_@            (ByVal Path As String)@            Dim buf As String@            Dim fso As Object@            buf = Dir(Path &amp; \"\\*.*\")@            Do While buf &lt;&gt; \"\"@                Debug.Print buf@                buf = Dir()@            Loop@            With _@            CreateObject _@            (\"Scripting.FileSystemObject\")@                For Each fso In _@                    .GetFolder(Path) _@                    .SubFolders@                    Sample070_3_@                    fso.Path@                Next@            End With@        End Sub', '(指定值的累加)', '(表示处理结果)', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('71', '71', '信息提示框的显示', 'MsgBox函数', '如果使用递归处理，在重复同样的操作的情况下，可以把程序进行简单的记述，但是，在递归处理脱离条件不恰当的话会变成错误。同时显示信息和图标。请根据MsgBox函数的参数、参照“详解”来做。', 'Sub Sample071()@        MsgBox\"单元格B2的值：\"＆　Range(\"B2\").Value,vbInformation@        <cite>##信息在单元格B2中显示</cite>@    End Sub', '这里、单元格B2的值已经通过信息框表示。通过以下来对指定话框中的信息。', '', '', '', '', '', '', '', '2017-11-30 14:04:57', null, null, '[{\"title\":\"MsgBox函数设定的项目\",\"heads\":[\"值\",\"说明\"],\"rows\":[[\"prompt\",\"指定显示信息的文字格式。长度为半角1024字符，通过利用vbCrLf，信息也可以换行显示。\"],[\"buttons(可以省略)\",\"指定显示按钮的种类及数目，使用的图标样式，标准按钮等。也有可能多个显示省略值为“0”。\"],[\"title(可以省略)\",\"生成指定的字符串。如果省略，则显示应用程序的名字。\"],[\"helpfile(可以省略)\",\"为了依靠对话框设定的帮助，使用指定的帮助文件如果指定了参数helpfile，也要指定context参数。\"],[\"context(可以省略)\",\"用指定的数值表达式表示帮助上下文编号。如果，指定了context参数，也要指定helpfile参数\"]]},{\"title\":\"buttons参数设置值\",\"heads\":[],\"rows\":[]},{\"title\":\"[MsgBox函数的返回值]\",\"heads\":[\"常数\",\"値\",\"说明\",\"常数\",\"值\",\"说明\"],\"rows\":[[\"vbOK\",\"1\",\"“确定”\",\"vblgnore\",\"5\",\"“忽略”\"],[\"vbCancel\",\"2\",\"“取消”\",\"vbYes\",\"6\",\"“是”\"],[\"vbAbrot\",\"3\",\"“终止”\",\"vbYes\",\"7\",\"“否”\"],[\"vbRetry\",\"4\",\"“重试”\",\"\",\"\",\"\"]]}]');
INSERT INTO `t_tips` VALUES ('72', '72', 'MsgBox上表示多个按钮', 'MsgBox函数', 'MsgBox函数是用户自定义的显示信息的对话框。可以设置多个按钮。根据MsgBox函数的参数请参照Tips071来作。', 'Sub Sample072()@        MsgBox\"单元格A1的值是「\"＆　Range(\"A1\").Value@            ＆　\"」对么？\",　ｖｂYesNo + ｖｂInformation@        <cite>##会有“是”和“不是”两个按钮显示</cite>@    End Sub', '在这里有“是”和“不是”两种按钮会显示。这两种按钮的显示是通过指定vbYseNo的参数bottons\n            然后通过这个例子“是”“不是”的点击事件结束的。', '/images/zhiku/TipsNO072-001.png', '/images/zhiku/TipsNO072-002.png', '', '', '', '(将会有两个按钮在信息框中显示)', '(信息提示框被显示)', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('73', '73', '按钮点击处理分支', 'MsgBox函数', 'MsgBox函数是用户自定义的信息表示对话框，可以配置多个按钮。根据MsgBox函数的参数请参照Tips071来作。', 'Sub Sample073()@       If MsgBox(\"单元格A1的值是「\" &amp; Range(\"A1\").Value &amp;\"」 _@            么？\", vbYesNo + vbInformation) = _@            vbYes Then@       <cite>##判断MsgBox函数返回值是不是ｖｂYes</cite>@            MsgBox　\"「\" &amp; Range(\"A1\").Value &amp; \"」 = OK\"@            <cite>##「是」被点击的情况</cite>@       Else@            MsgBox　\"「\" &amp; Range(\"A1\").Value &amp; \"」不是\"@            <cite>##「不是」被点击的情况</cite>@       #End If@    End Sub', '这里，通过MsgBox函数，回应按钮被点击处理的行为。MsgBox函数会返回回应按钮被点击的值。在这里配置了“是”和“不是”两个按钮的信息弹框。按钮被点击返回值分别是vbYes，vbNo如果想要声明，判断返回值是不是“vbYes”，分别会有对应的信息显示。', '/images/zhiku/TipsNO073-001.png', '/images/zhiku/TipsNO073-002.png', '', '', '', '', '', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('74', '74', '显示用于输入的对话框', 'InputBox函数', '使用InputBox函数、可以显示出带有能够输入用户数据的文本框的对话框，这个被称为输入框。文本框输入的值，本转换成字符串类型的数据。对于InputBox函数指定的项目，请参照“详解”', 'Sub Sample074()@        Dim　temp As String@        temp = InputBox(\"检索输入的用户名\")@        <cite>##显示输入框，写入输入的值</cite>@        On Error Resume Next@        <cite> #错误处理</cite>@        Range(A1:A5).Find(temp).Activate@        <cite>##在单元格A1:A5之间检索，自动显示找到的数据</cite>@        #If　Err.Number &lt;&gt; 0 Then@            MsgBox \"未找到\"@            <cite>##未发现的情况，显示的信息</cite>@        #End If@    End Sub', '这里，从单元格A1到A5检索输入框输入的值，检索到了自动选中那个单元格。检索执行find方法，未检索到的情况，不返回任何值。如果由于执行Activate方法发生错误，进行错误处理。', '/images/zhiku/TipsNO074-001.png', '/images/zhiku/TipsNO074-002.png', '取消按钮的处理', 'InputBox函数中，“取消”按钮触发事件“值为0的字符串”作为特殊的返回值被返回。利用这个事件可以对“取消”按钮的触发事件作出判断。利用StrPtr函数对“值为0的字符串”进行检查。这个函数的参数是“值为0的字符串”时，返回指定的值“0”\n            \n            \n                追加上个例子“取消”按钮的触发事件，如下：', 'Sub Sample074_2_@            Dim temp As String@            temp = InputBox _@            (\"检索输入的用户名\")@            If StrPtr(temp) = 0 Then@                MsgBox \"已取消\"@                Exit Sub@            End If@            On Error Resume Next@            Range(\"A1:A5\").Find(temp).Activate@            If Err.Number &lt;&gt; 0 Then@                MsgBox \"已取消\"@            End If@        End Sub', '', '', '2017-11-30 14:04:57', null, null, '[{\"title\":\"InputBox函数的设定项目\",\"heads\":[\"指定項目\",\"说明\"],\"rows\":[[\"prompt\",\"显示消息的字符串表达式，最大长度半角1024字符，可以使用vbCrLf换行\"],[\"title(可选的)\",\"显示对话框标题栏中的字符串表达式，如果省略，则把应用程序名放入标题栏中\"],[\"default(可选的)\",\"显示文本框中的字符串表达式，如果省略，则文本框为空\"],[\"xpos(可选的)\",\"对话框的左边与屏幕左边的水平距离，指定twip单位。如果省略，则对话框会在水平方向居中\"],[\"ypos(可选的)\",\"指定对话框的上边与屏幕上边的垂直距离，指定twip单位。如果省略，则对话框被放在屏幕垂直方向距离下边大约三分之一的位置\"],[\"helpfile(可选的)\",\"用该文件对话框提供剩下文相关的帮助，如果已提供helpfile，则必须提供context\"],[\"context(可选的)\",\"由帮助文件的作者指定给某个帮助主题的帮助上下文编号，如果已提供context，则也必须提供helpfile\"]]}]');
INSERT INTO `t_tips` VALUES ('75', '75', '显示用于输入的对话框(2)', 'InputBox方法', '对于InputBox方法指定的项目，请参照“详解”', 'Sub Sample075()@        Dim temp As Range@        Set temp = Application.InputBox _@            (\"删除选中的范围\"、Type：＝８)@        <cite>##在inputBox中显示选中单元格的范围</cite>@        <cite>##单元格的范围可以参照输入的变量</cite>@        #temp.ClearContents@        <cite>选中的范围被删除</cite>@    End Sub', 'ここでは、セル範囲を選択できるインプットボックスを表示します。インプットボック「OK]ボタンをクリックすると、そのセル範囲のデータをクリアします。', '/images/zhiku/TipsNO075-001.png', '/images/zhiku/TipsNO075-002.png', '取消时的处理', 'InputBox方法，“取消”按钮被按下的时候，返回布尔类型的数据。这样，用变量Variant宣告接收被输入的值，通过使用VarType函数变量的数据类型确认，就可以判定“取消”按钮是否被按下。\n            \n            \n                但是这个例子使用的参数Type\'8\'是参照单元格来做的情况，会和错误处理组合记述。', '', '', '', '2017-11-30 14:04:57', null, null, '[{\"title\":\"InputBox関数の設定項目\",\"heads\":[\"指定項目\",\"说明\"],\"rows\":[[\"Prompt\",\"对话框中显示的信息。参数可以是字符串、数字、日期、或者一个布尔类型的值\"],[\"Title(可选的)\",\"输入框的标题。如果省略，将使用默认的标题\"],[\"Default(可选的)\",\"制定一个初始值，并在对话框显示时出现在文本框中。如果省略，文本框内容将是空的\"],[\"Left\",\"指定对话框相对于屏幕左上角到对话框的左端水平方向的距离，用磅单位表示\"],[\"Top\",\"指定对话框相对于屏幕左上角到对话框的上端垂直方向的距离，用磅单位表示\"],[\"HelpFile\",\"此输入框使用的帮助文件名。如果存在HelpFile和HelpContextID参数，对话框中将出现一个帮助按钮\"],[\"HelpContextID\",\"HelpFile中帮助上下文标识号。\"],[\"Type\",\"赶回指定的数据类型。如果省略，对话框返回字符串\"]]},{\"title\":\"引数「Type」に指定する値\",\"heads\":[\"値\",\"意思\"],\"rows\":[[\"0\",\"意思\"],[\"1\",\"数值\"],[\"2\",\"公式\"],[\"4\",\"文本\"],[\"8\",\"逻辑值true和false\"],[\"16\",\"单元格引用\"],[\"64\",\"错误值\"],[\"Type\",\"值得数组\"]]}]');
INSERT INTO `t_tips` VALUES ('76', '76', '关于错误的种类理解', '错误的种类和错误号码', '程序的做成，执行中有不预期的动作。错误有[编译错误][执行时错误][逻辑错误]三类。对于错误预先分配固有号码。发生错误时，表示对应的信息。', '', '关于错误的种类和错误的号码，有像下面那样的记述。', '', '', '440错误', '440错误是[自动控制]错误。这个是Excel的方法上不能操作，执行VBA发生的场合。比如删除所有的工作页，所说的处理符合那个。调试时发生这个错误的场合，详查代码，追究错误的原因。因为思维差异，有书写发生错误代码的可能。', '', '', '', '2017-11-30 14:04:57', null, null, '[{\"title\":\"错误的种类以及意思\",\"heads\":[\"种类\",\"说明\"],\"rows\":[[\"编译错误\",\"指向从文章结构的错误和拼写错误等文法上的错误发生的错误。\"],[\"执行时错误\",\"程序执行时发生错误。比如把字符串代入Long型的变量发生。\"],[\"逻辑错误\",\"程序的逻辑错误。求消费税的时候、因为是乘以0.05除算不能。程序作成者有必要好好的测试。\"]]},{\"title\":\"主要的错误号码和信息\",\"heads\":[\"番号\",\"メッセージ\"],\"rows\":[[\"0\",\"调用过程或者参数不正确\"],[\"5\",\"调用过程或者参数不正确\"],[\"6\",\"溢出了。\"],[\"9\",\"索引不在有效范围内。\"],[\"10\",\"排列被固定或者暂时被锁了。\"],[\"11\",\"以0除了。\"],[\"13\",\"形式不相符。\"],[\"20\",\"不能错误没发生的时候实行Resume。\"],[\"28\",\"栈领域不足。\"],[\"35\",\"Sub或Function没被定义。\"],[\"51\",\"内部错误。\"],[\"52\",\"文件名或者号码不正确。\"],[\"53\",\"文件找不到。\"],[\"54\",\"文件模式不正确。\"],[\"55\",\"文件已经被打开。\"],[\"57\",\"设备I/O错误\"],[\"58\",\"既に同名のファイルが存在しています。\"],[\"59\",\"记录长度不一致。\"],[\"61\",\"磁盘可用空间不足着。\"],[\"70\",\"写入不能。\"],[\"75\",\"路径名无效。\"],[\"76\",\"路径找不到。\"],[\"91\",\"object变量或With块变量未被设定。\"],[\"93\",\"字符串型不正确。\"],[\"94\",\"Null的使用方法不正确。\"],[\"321\",\"不正确的文件形式。\"],[\"380\",\"属性值不正确。\"],[\"383\",\"不能设定值。仅能取得值的可能属性。\"],[\"387\",\"不能设定值。\"],[\"424\",\"对象是必要的。\"],[\"448\",\"找不到名字附着参数。\"],[\"449\",\"参数不能省略。\"],[\"461\",\"方法或数据成员找不到。\"],[\"744\",\"检索字符串没找到。\"]]}]');
INSERT INTO `t_tips` VALUES ('77', '77', '错误处理', 'On Error Goto语句', 'On Error Goto语句是如果发生错误就转移到指定line行标签或者行号的处理。', 'Sub Sample077()@        Dim sh as Worksheet@        On Error Goto ErrHd1@        <cite>##开始错误处理</cite>@        Set sh = Worksheets(\"Sheet2\")@        <cite>##把对[Sheet2]工作表的参照赋给对象变量sh</cite>@        <cite>##[Sheet2]工作表不存在时报错误</cite>@        Exit Sub@        <cite>##处理结束</cite>@    ErrHd1:@        <cite>##错误发生的标签</cite>@        MsgBox \"发生错误\"@        <cite>##错误发生时的信息</cite>@    End Sub', '在这里，确认实际发生错误时的动作。把对[Sheet2]工作表的参照赋给对象变量sh，因为Book中不存在[Sheet2]工作表，所有就发生错误。因为使用On Error Goto语句，所以一发生错误 就转移到[ErrHdl]标签的处理。\n        还有，标签是像[标签名：]这样，在标签名后加上[：]输入设定的。', '/images/zhiku/TipsNO077-001.png', '/images/zhiku/TipsNO077-002.png', '', '', '', '(参照[Sheet2]工作表，发生错误)', '(错误时的信息被表示)', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('78', '78', '无视错误执行之后处理', 'On Error Goto语句', 'On Error Resum Next语句是即使发生错误，无视这个错误执行之后处理。即使错误发生想执行后续处理时使用。', 'Sub Sample078()@        Dim sh as Worksheet@        On Error Resume Next@        <cite>##开始错误处理</cite>@        Set sh = Worksheets(\"Sheet2\")@        <cite>##把对[Sheet2]工作表的参照赋给对象变量sh</cite>@        <cite>##[Sheet2]工作表不存在时报错误</cite>@        If Err.Number &lt;&gt; 0 Then@            MsgBox \"发生错误\"@            <cite>##错误发生场合的信息</cite>@        #End If@    End Sub', '在这里，确认实际发生错误时的动作。把对[Sheet2]工作表的参照赋给对象变量sh，因为Book中不存在【Sheet2】工作表，所有就发生错误。因为使用On Error Resum Next语句，所以即使发生错误之后的处理也执行。\n        在之后的处理中，使用Err对象的Number属性，确认是否发生错误。错误不发生时，Number属性是0。', '/images/zhiku/TipsNO078-001.png', '/images/zhiku/TipsNO078-002.png', '', '', '', '(参照[Sheet2]工作表，发生错误)', '(错误时的信息被表示)', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('79', '79', '错误发生时的无效处理', 'On Error Goto 0语句', 'On Error Goto 0语句将错误处理无效化。', 'Sub Sample079()@        Dim sh as Worksheet@        On Error Resume Next@        <cite>##开始错误处理</cite>@        Set sh = Worksheets(\"Sheet2\")@        <cite>##因为[Sheet2]工作表不存在所以发生错误</cite>@        <cite>##将该错误无效化</cite>@        On Error Goto 0@        <cite>##终止错误处理</cite>@        Set sh = Worksheets(\"Sheet2\")@        <cite>##错误发生</cite>@    End Sub', '在这里，确认On Error Goto 0语句的动作。\n        将[Sheet2]的参照赋给最初对象变量的处理中因为有On Error Resume Next语句所以无视错误发生。但是，在第2次处理中因为它的前一个是On Error Goto 0语句，该语句不能无效化错误处理，所以错误发生。\n        像这样，On Error Goto 0是把以On Error Goto 0语句和On Error Resume Next语句开始的错误处理变成无效化时使用的。所谓的错误处理是，从程序的最初到最后不能随便使用，要尽可能限定分配的场所，这样后期修正时才不会混乱。', '/images/zhiku/TipsNO079-001.png', '/images/zhiku/TipsNO079-002.png', '', '', '', '(参照[Sheet2]工作表，发生错误)', '(第二次处理发生错误)', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('80', '80', '错误发生时执行返回处理', 'Resume语句', 'Resume语句是在错误处理中使用的。在错误处理例外中从错误发生的行开始再次执行程序。还有，[Resume line]指的是可以从行标签开始重新执行程序。', 'Sub Sample080()@        Dim num as Long@        On Error Goto ErrHdl@        num = InputBox(\"输入数值\")@        <cite>##表示输入框，把输入的值赋给变量</cite>@        MsgBox \"输入值：\" &amp; num@        <cite>##把输入的值表示在信息框中</cite>@        Exit Sub@    ErrHdl:@        MsgBox \"请输入数值\"@        <cite>##错误时的信息</cite>@        Resume@    End Sub', '确认Resume语句的动作。用InputBox函数打开输入用的输入框。将输入的值赋给变量，因为变量的数据类型是Long型所以输入数值以外的值时会发生错误。如果发生错误就跳转到【ErrHdl】标签的处理。表示信息后，使用Resume语句返回到InputBox函数的处理，再次表示输入框。', '/images/zhiku/TipsNO080-001.png', '/images/zhiku/TipsNO080-002.png', '', '', '', '(输入数值以外的字符)', '(错误时的信息被表示，再次表示输入框)', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('81', '81', '错误发生时返回到下一行执行处理', 'Resume Next语句', 'Resume Next语句在错误处理例外中使用，从错误发生场所的下一行重新执行。', 'Sub Sample081()@         Dim i as Long@                On Error Goto ErrHdl                <cite>开始错误处理</cite>@                For i = 1 To 5                      <cite>重复5次</cite>@                    Cells(i + 1, 1).Value = _@                         Cells(i + 1, 1).Value + 10 <cite>单元格的值加上[10]</cite>@                Next@                Exit Sub                            <cite>结束处理</cite>@        ErrHdl:                                     <cite>误发生时的处理</cite>@            Resume Next                             <cite>从错误发生的处理的下一行重新执行</cite>@    End Sub', '确认Resume语句的动作。在这里，单元格A2以后输入的值进行加[10]处理。但是，因为单元格A5的\n                 值是[-]，所以单纯的给单元格的值进行加处理时发生错误。在这里，单元格的值是[-]时无视。\n            \n            \n                使用On Error Goto语句错误发生时，跳过错误处理，使用Resume Next语句从发生错误语句的下一行\n                开始重新执行。', '/images/zhiku/TipsNO081-001.png', '/images/zhiku/TipsNO081-002.png', '', '', '', '因为给单元格的值进行加法运算所以如果没有输入值时就会发生错误', '错误发生后处理继续', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('82', '82', '根据错误的种类', 'Number属性', 'Number属性是object中Err的客观指定的错误编号的取得方法Err的客观发生错误的信息保持有关。\n                错误的番号取得Number的属性此外，错误的内容有着Description属性。', 'Sub Sample082()@        Dim I As Integer                                    <cite>定义变量</cite>@                On Error Resume Next                        <cite>开始处理错误</cite>@                i = Range(\"A2\").Value                       <cite>把A2的值的变量代入</cite>@                MsgBox \"エラーの番号 :\" &amp; Err. Number &amp; vbCrLf@                    &amp; \"エラーの内容 :\" &amp; Err. Description   <cite>发生错误的信息用信息对话框表示[10]</cite>@    End Sub', '这是Integer型的变量Integer型的范围可以代人更大的值，\n                使错误的发生发生错误的错误番号和错误内容用一个信息对话框表示\n            \n            \n                 Integer型的最大值是「65537」，单元格A2可以被输入「65537」。其他\n               单元格A2的值的变量代入时会发生错误', '/images/zhiku/TipsNO082-001.png', '/images/zhiku/TipsNO082-002.png', '', '', '', '单元格A2的值Integer型的变量代入', '错误的发生，错误的编号和内容在信息对华框表示', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('83', '83', '根据错误的不同错误处理的分支', 'Number属性', 'NNumber属性是object中Err的客观指定的错误编号的取得方法 Err的客观发生错误的信息保持有关。If声明和Case声明组合的事\n                错误的内容（错误的编号）问题处理的实行做成。', 'Sub Sample083()@        Dim num1 As Long , num2 As Long,ans As Double@                On Error GoTo ErrHdl                        <cite>开始处理错误</cite>@                num1 =Range(\"A2\") . Value                   <cite>把A2的值的变量代入</cite>@                num2 =Range(\"B2\") . Value                   <cite>把B2的值的变量代入</cite>@                ans = num1 /num2                            <cite>除法的实行</cite>@                MsgBox num1 &amp; \"÷\"＆　num2 &amp; \"=\" &amp; ans      <cite>结果留言表示</cite>@                Exit Sub                                    <cite>处理结束</cite>@        ErrHdl@                Select Case Err.Number                      <cite>错误编号的处理实行</cite>@                    Case 11                                 <cite>错误编号为11时的处理</cite>@                         MsgBox \"0で除算はできません\"@                    Case 13                                 <cite>错误编号为13时的处理</cite>@                         MsgBox \"整数を入力してください\"@                End Select@    End Sub', '实行单元格A2的值除去B2的方法。这时单元格B2的值为「0」的情况下\n                除法的错误发生。又有哪个单元格中文字列输入的情况错误不会发生\n                错误的编号分别为「11」和「13」的结果，错误的处理实行的值Select Case\n                声明错误编号表示错误的信息的变更', '', '', '', '', '', '', '', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('84', '84', '错误发生时警告音响起', 'Beep声明', 'Beep声明是计算机的扬声器发出的警告音', 'Sub Sample084()@        On Error GoTo ErrHdl                    <cite>错误开始处理</cite>@        Worksheets(\"Sheet1\").Name = \"Sheet2\"    <cite>工作sheet名字变更为「Sheet2」</cite>@                Exit Sub                        <cite>处理结束</cite>@        ErrHdl:                                 <cite>错误处理</cite>@                Beep                            <cite>发出警告音</cite>@                MsgBox    \"错误发生了\"          <cite>信息表示</cite>@    End Sub', '这里是，工作sheet名字变更时发生的错误。因为Sheet2是已经存在的工作sheet，所以sheet1\n                 工作sheet的名字不能更改为sheet2。这里会发生错误，错误发生了，Beep声明会发出警告音，\n                同时，会弹出窗口表示信息。', '/images/zhiku/TipsNO084-001.png', '/images/zhiku/TipsNO084-002.png', '', '', '', '单元格A2的值Integer型的变量代入', '错误的发生，错误的编号和内容在信息对华框表示', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('85', '85', '强制发生错误', 'Raise方法', '使用Raise方法可以强制发生错误。指定各参数的值，例如：参数Number  错误编号，参数description  错误内容', 'Sub Sample085()@        On Error Goto ErrHdl                          <cite>开始错误处理</cite>@        If InStr(Range(\"A2\").Value,\"VBA\") = 0 Then    <cite>确认在单元格A2的字符串中是否包</cite>@                                                      含[VBA]@                Err.Raise Number:=1500 _@                    , Description:=\"不包含VBA\"        <cite>不包含的场合错误发生</cite>@        End If@        Exit Sub                                      <cite>结束处理</cite>@    ErrHdl:@          MsgBox \"错误编号：\" &amp; Err.Number &amp; vbCrLf _@              &amp; \"错误内容：\" &amp; Err.Description        <cite>将发生错误的错误编号和内容表示</cite>@                                                      到信息框中@    End Sub', '在这里检查单元格A2的字符串，不包含【VBA】的场合，强制发生错误。使用InStr函数判定指定的字符\n                串中是否包含【VBA】。不包含的场合，使用Raise方法报错误编号【1500】，错误内容【不包含VBA】的\n                错误。在错误处理中将错误编号和错误内容在信息框中表示。此外，错误编号的范围是0~65535。但是，\n                因为0~512的值是系统错误编号，所以用户自定义的错误编号要使用513~65536。', '/images/zhiku/TipsNO085-001.png', '/images/zhiku/TipsNO085-002.png', '', '', '', '单元格A2的字符串中不包含【VBA】就会发生错误', '错误发生', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('86', '86', '声明排列', 'Dim声明', '声明排列的参数，通常利用参数相同的Dim声明。配列的参数为基础\n                 声明配列容纳资料（「要素」）的数决定的。这个「要素」是做索引番号的管理\n                 另外，索引的原则是从番号为「0」开始的。因为要素数的「3」个分支的场合是\n                 利用「0」~「2」的索引番号。因此声明排列的参数，实际的准备为指定分支的要素数\n                 要素数从「-1」的数，而且声明指定（4 To10）的要点范围的事。', 'Sub Sample086()@        Dim AppName(2) As String                       <cite>声明要素数为「3」的排列参数</cite>@        Dim i As Long@        For i = 0 To 2                                 <cite>反复处理3回</cite>@                AppName(i) = Cells(i + 2, 1).Value     <cite>排列的各要素A列的值代入</cite>@                   Next@                   MsgBox \"第二行的应用的名\"_@                       ＆AppName(1)                    <cite>排列的第二资料</cite>@    End Sub', '这是，表示A列的数据排列容纳，特定的要素数据的信息对话框。\n                排列要素编号指定的值的设定/能够取得事件。因此，这个样品循环处理\n                组合成A列的数据排列容纳。', '/images/zhiku/TipsNO086-001.png', '/images/zhiku/TipsNO086-002.png', '', '', '', '取得Ａ列的数据并排列', '第二行的数据用信息对话框表示', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('87', '87', '将数组的索引号的最小值设定为1', 'Option Base语句', '数组的索引号的开始值既定是[0]。使用Option Base语句可以将开始值指定为[1]\n                   Option Base语句是在模块的声明块中进行声明。', 'Option Base 1                                     <cite>将数组的索引号的最小值设定为1</cite>@    Sub Sample087()@        Dim AppName(3) As String                      <cite>声明因数是3的数组</cite>@        Dim i As Long@        For i = 1 To 3                                <cite>循环处理3次</cite>@            AppName(i) = Cells(i + 1, 1).Value        <cite>将A列的值置换给数组</cite>@                   Next@                   MsgBox \"第二行的应用的名\"_@                       ＆AppName(2)                   <cite>将数组的第二个索引的数据表示到信息框中</cite>@    End Sub', '使用Option Base语句，将数组的索引号设定为1。因此声明因数是3的数组时，要用[AppName(3)]声明。\n            \n            \n                     循环数组置换A列的值。这时使用循环处理变量i的值从1开始。\n            \n            \n                     最后将数组的第二个数据在信息框中表示。', '/images/zhiku/TipsNO087-001.png', '/images/zhiku/TipsNO087-002.png', '', '', '', '将A列的数据放入到数组中', '将第二个数据在信息框中表示', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('88', '88', '将数组的索引号设定成任意数', 'To关键字', '使用To关键字，可以指定数组的索引号的任意范围。还有，最小值可以是【0】或者【1】以外的值。', 'Sub Sample088()@        Dim AppName(2 To 4) As String               <cite>声明数组的索引号是从2到4</cite>@        Dim i As Long@        For i = 2 To 4                              <cite>循环处理</cite>@             AppName(i) = Cells(i, 1).Value         <cite>将A列的值赋给数组</cite>@                   Next@                   MsgBox \"第二个应用程序名：\" _@                       ＆AppName(3)                 <cite>将数组的第二个索引的数据表示到信</cite>@                                                    息框中@    End Sub', '使用To关键字将数组的索引号设定为任意的范围。在这里，因为要保存数据是单元格A2~A4，所以和行号一起声明。\n            \n            \n                     把数据赋给数组的循环处理中变量i的值是2~4。\n            \n            \n                     把数据赋给数组，最后将第二个数据在信息框中表示。', '/images/zhiku/TipsNO088-001.png', '/images/zhiku/TipsNO088-002.png', '', '', '', '使用数组取得单元格的数据', '将第二个数据在信息框中表示', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('89', '89', '用Array函数往数组中存值', 'Array函数', 'Array函数是从指定函数参数的复数个值中生成数组。生成的数组要保存到Variant型的变量中。还有，\n                 在帮助文件中有这样的记述[使用Array函数作成的数组，数组索引的最小值通常是0。它和其他种类的数组\n                 不同，在Option Base语句中即使不指定最小值也没有影响。]，这个是错误的。Option Base语句是有影\n                 响的。', 'Sub Sample089()@        Dim temp As Variant                         <cite>声明保存数组的变量</cite>@        Dim i As Long@        temp = Array(\"Excel\", \"Access\", \"Word\")     <cite>给变量temp赋值</cite>@             For i = 0 To 2                         <cite>循环3次</cite>@                  Cells(i + 2, 1).Value = temp(i)   <cite>把数组的值在输入到A列中</cite>@             Next@    End Sub', '在这个例子中，使用Array函数把数组的值输入到单元格A2以后。像例子那样，把用Array函数\n                作成的数组传给Variant型的变量。', '/images/zhiku/TipsNO089-001.png', '/images/zhiku/TipsNO089-002.png', '', '', '', '将数组的值输入到单元格中', '输入到单元格A2之后的单元格中', '2017-11-30 14:04:57', null, null, '');
INSERT INTO `t_tips` VALUES ('90', '90', 'Join函数的使用排列的值的整理', 'Join函数', 'Join函数是，参数sourcearray指定返回结合1次元排列的值。值的区间也可能是指定的文字。\n                 省略区间文字，数据被区间化。其他的文字不要的情况用「\"\"」指定。', 'Sub Sample090()@        Dim temp(2) AS String                           <cite>要素的数3的排列宣告</cite>@        Dim i As Long@             For i = 0 To 2                             <cite>循环3次</cite>@                  Cells(i + 2, 1).Value                 <cite>排列代入A列的值</cite>@             Next@        MsgBox \"A列的数据　：　\"&amp; vbLf &amp; Join(temp,\",\") <cite>Join函数排列的数据区间用逗号</cite>@                                                        连接信息对话框表示@    End Sub', '这里是，设置A2—A4的值一次元排列代入，这个排列的值使用Join函数，用逗号分隔区间的文字列，作为信息对话框表示。', '/images/zhiku/TipsNO090-001.png', '/images/zhiku/TipsNO090-002.png', '', '', '', '将数组的值输入到单元格中', '输入到单元格A2之后的单元格中', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('91', '91', '使用Split函数收藏排列的值', 'Split函数', 'Split函数是收藏指定字符串变量expression和指定标记字符排列的变量delimiter。在省略变\n                 量delimiter的时候，解除标记字符的半角空格。变量limit是截取指定排列因数的最大上限。例，省\n                 略变量limit的时候，第二个因数之后是忽略标记字符，每一个字符串都严格对待。', 'Sub Sample091()@        Dim  temp  As  Variant@        Dim   i   As  Long@        temp    =  split (\"Excel,Access,Word\",\",\")      <cite>用逗号标记排列字符串</cite>@        For  I  =  0  To  2                             <cite>3次循环处理</cite>@                  Cells(I  +  2, 1).Value = temp(i)     <cite>排列的每个因数赋予A2单元格</cite>@             Next@    End Sub', '在这里字符串\"Excel,Access,Word\"用逗号标记排列去置换函数temp的值，循环输入A2的值。', '/images/zhiku/TipsNO091-001.png', '/images/zhiku/TipsNO091-002.png', '', '', '', '输入单元格A2之后的数据', '输入数据之后', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('92', '92', '定义动态数组', 'ReDim声明', '不能事先确定数组元素的时候，可以使用动态数组。动态数组是在定义时将紧跟着变量名之后的（）内的数值省略，\n                 在过程中使用ReDim来重新确定元素。', 'Sub Sample092()@        Dim temp() As String                            <cite>定义未定元素的数组</cite>@        Dim num As Long@        Dim i As Long@        num = Range(\"A1\").CurrentRegion.Rows.Count  -  1<cite>取得表的行数，将没有索引的数</cite>@                                                        付值给变量@        ReDim temp(1 To num)                            <cite>确定数组的元素</cite>@        For i = 1 To num                                <cite>对数组元素循环操作</cite>@            temp(i) = Cells(i + 1, 1).Value             <cite>将A列的值付给数组</cite>@        Next@        MsgBox \"第2条数据 : \" &amp; temp(2)                 <cite>将数组的第2条数据存入MsgBox中</cite>@    End Sub', '在这里，需要说明一下在不清楚元素又或者是元素可能会变化的时候数组的使用方法。事先不能确定元素的时候，就可以使用动态数组。\n            \n            \n                     在这里，利用Count属性，取得表的行数，通过索引为[-1]来指定数组的元素，这时，索引号会从最小值1开始。\n            \n            \n                     使用循环来取得数组的数据，将第二条数据存储到MsgBox中。\n            \n            \n                     同时，即使在A5单元格中追歼数据，这个样例也会在数组中取得所有的数据。', '/images/zhiku/TipsNO091-001.png', '/images/zhiku/TipsNO091-002.png', '', '', '', '将A列的数据存储到数组中', '将第二条数据表示到MsgBox中', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('93', '93', '2维数组的声明', 'Dim声明', '声明数组的时通过指定2个索引号，便可以做成一个2维数组。在第1维和第2维中，可以指定不同的元素。', 'Sub Sample093()@        Dim temp (1 To 3, 1 To 1) As Variant             <cite>声明3 x 1的元素数组</cite>@        temp(1, 1) = \"Excel\"@        temp(2, 1) = \"Access\"@        temp(3, 1) = \"Word\"                              <cite>把值付给各自的元素</cite>@        Range(\"A2:A4\").Value = temp                      <cite>在单元格A2~A4中输入数组的数</cite>@                                                         据@    End Sub', '关于2维数组的使用。这里，准备3行1列。将值付给各自的元素后，再将数组的元素值输入到单元格中。\n            \n            \n                     关于数组中的值，可以在单元格中输入一次。但是之前输入的类型就会变得跟数组中类型不同。在此，\n                准备一个三行一列的数组，将数据输入到A2~A4这个三行一列的单元格范围内，这样便可以将所有的数据归纳并输入。\n            \n            \n                     同时，输入框的单元格范围比较小的时候，无视数组元素超出单元格的部分。', '/images/zhiku/TipsNO093-001.png', '/images/zhiku/TipsNO093-002.png', '', '', '', '使用2维数组，将输入输入到单元格中', '数据被输入到单元格中', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('94', '94', '求数组的因子数', 'Ubound函数/Lｂound函数', 'Ubound函数、Lｂound函数能取得数组的最小下标和最大下标。求数组的因子数是「Ubound函数\n             求得的结果-Lｂound函数求得的结果＋1」的结果。还可以使用参数[ dimension]来求得某个维度的数\n             组的最小下标(最大下标)。 如果省略不写，责按第[1]个维度处理。', 'Sub Sample094()@        Dim temp () As Variant@        Dim num As Long@        num = Range(\"A1\").CurrentRegion.Rows.Count - 1  <cite>求A列的数据的个数</cite>@        ReDim temp(1 To num)                            <cite>设定数组的因子数的原来数据的个数 </cite>@        MsgBox \"因子数:\"  &amp; UBound(temp) - LBound(temp) + 1 &amp; vbLf _@                &amp;  \"最小下标:\" &amp;  LBound(temp) &amp; vbLf _@                &amp;  \"最大下标:\" &amp;  UBound(temp)          <cite>数组的因子数、最小下标和最大下标使用弹窗的形式表示 </cite>@    End Sub', '求数组的因子数、最小下标和最大下标这样那样的值使用弹窗形式表示来表示。\n            \n            \n                     在这里使用动态的添加数组，在A列合并数组的因子数，得到数据的总条数。\n            \n            \n                     数据的个数是使用Count属性求处表的行数-1的得到的。', '/images/zhiku/TipsNO094-001.png', '/images/zhiku/TipsNO094-002.png', '', '', '', '在A列输入要求的数组', '数组的因子数，最小下标最大下标表示出来了', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('95', '95', '保留数组值的同时，变更元素', 'Preserve关键字的语法', '使用Preserve关键字， 向变动的数组中存储的值并不会丢失，可以变更数组中的元素。\n                 并且，通过Preserve关键字来变更元素，只能变更数组的最后一个维度。', 'Sub Sample095()@        Dim temp () As String                           <cite>声明动态数组</cite>@        ReDim temp(1) As String                         <cite>第2个元素</cite>@        temp(0) = \"Excel\"@        temp(1) = \"Access\"                              <cite>将数据付到数组中</cite>@        MsgBox \"现在数组中的内容：\" &amp; Join(temp, \", \")  <cite>用逗号来分割数组中的内容并结</cite>@                                                        合在一起 @        ReDim Preserve temp(2) As String                <cite>变更数组的元素 </cite>@        temp(2) = \"Word\"                                <cite>将数据付给3号元素 </cite>@        MsgBox \"变更后数组的内容：\" &amp; Join(temp, \", \")  <cite>用逗号来分割数组中的内容 </cite>@    End Sub', '下面介绍一下数组元素的变更。在这里，一旦数组的元素变为第[2]个元素。那么，赋予数据后，元素\n                将增加变为第[3]个元素。这时，将在ReDim声明中赋予一个关键字。元素变更后进行赋值，将数组的内容\n                表示在MsgBox中。这时候，使用Join函数，将数组中的各个元素以逗号来分割并将它们拼成一个字符串。', '/images/zhiku/TipsNO095-001.png', '/images/zhiku/TipsNO095-002.png', '', '', '', '将两条数据代入到数组中', '数组的元素号被改变，将显示三条数据', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('96', '96', '数组的初期化', 'Erase声明', '若使用Erase来声明，通常的数组便会使数组元素初期化，而动态数组便会释放所分配的内存。', 'Sub Sample096()@        Dim temp(1) As String                                    <cite>声明动态数组</cite>@        temp(0) = \"Excel\"@        temp(1) = \"Access\"                                       <cite>将数据代入到数组各</cite>@                                                                 个元素中@        MsgBox \"现在数组的内容：\" &amp; vbCrLf &amp; Join(temp, \", \")    <cite>将数组的内容以逗号</cite>@                                                                 分割并作为字符串@        Erase temp                                               <cite>初期化数组</cite>@        MsgBox \"初期化后的数组内容：\" &amp; vbCrLf &amp; Join(temp, \", \")<cite>将数组的内容以逗号</cite>@                                                                 分割并作为字符串 @    End Sub', '根据Erase的声明来确认数组的初期化。将数据赋给数组变量temp。这些被赋予的值通过使用Join函数\n                以逗号来进行分割，分割成的字符串存入MsgBox中。然后使用Erase声明方法来进行初期化。\n            \n            \n                     被初期化的数组内容虽然像之前那样被存储到MsgBox中，但是被初期化的值则不能被显示(只能显示通\n                过使用Join函数而指定的逗号)。', '/images/zhiku/TipsNO096-001.png', '/images/zhiku/TipsNO096-002.png', '', '', '', '将两条数据代入到数组中', '数组的元素号被改变，将显示三条数据', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('97', '97', '确认动态数组的初期状态', 'UBound函数', '确认动态数组的初期状态，要结合UBound函数和Error处理来进行。\n            \n               动态数组通过ReDim声明来确认元素，确认后通过Erase声明将数组初期化时，若使用UBound函数则会发生Error。', 'Sub Sample097()@        Dim temp() As String                                    <cite>定义动态数组</cite>@        Dim num As Long@        ReDim temp(0 To 1)                                      <cite>确定数组的元素</cite>@        Erase temp                                              <cite>数组初期化</cite>@        On Error Resume Next                                    <cite>开始异常处理</cite>@        num = UBound(temp)@        If Err.Number &lt;&gt; 0 Then                                 <cite>判断是否发生异常</cite>@             MsgBox \"数组是初期化的状态\"                        <cite>发生异常时的Msg</cite>@        End If@        On Error GoTo 0@    End Sub', '判断动态数组是否时常保持在初期化的状态。这里，一旦使用ReDim来声明并确认动态数组的元素后，\n                通过Erase声明来使数组初期化。此后，使用UBound函数，数组的状态就会发生异常。确认Err对象的Number属性是否发生异常，\n                若发生异常则将信息放入MsgBox中。', '/images/zhiku/TipsNO097-001.png', '/images/zhiku/TipsNO097-002.png', '', '', '', '确认动态数组的初期状态', '显示MsgBox', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('98', '98', '用工作表排列', 'Value属性的语法', 'Range对象的Value属性 取得Variant型变量的值置换，排列变量。在这里利用它可以处理工作\n                 表数据的效率。特别是，有大量数据vde时候，处理速度这方面会达到期待的效果。', 'Sub Sample098()@        Dim   DataRange   As   Range@        Dim   DataValue  As   Variant@        Dim  i   As   Long@        Set    DataRange   =  Range(\"A1\").CurrentRegion          <cite>取得单元格A1的范围</cite>@        DataValue   =   DataRange.Value                          <cite>取得输入变量的范围值</cite>@        For   I = 2  To  UBound(DataValue)                       <cite>关于处理排列的要素</cite>@               DataValue( i,  2)  =  DataValue( i ,  2)  *  1.2  <cite>是配列第二行数据</cite>@                                                                 的1.2倍@        Next@        DataRange.Value  =  DataValue                            <cite>赋予排列数据的单元</cite>@                                                                 格范围@    End Sub', '在这里，排列取得单元格范围的数据，提高关于处理排列数据的效率。检验，更改单元格的值\n                的时候，每次存取单元格的处理时间都非常短。因此，单元格的值一旦输入排列，检查，更改排列\n                时的数据的时候，会大幅度缩短处理时间。\n            \n            \n                     输入的单元格范围的值是Variant型的变量时，这个变量的单元格范围自动的和排列的大小相同。\n                排列时的数据更改后，包含原本单元格的书写范围。', '/images/zhiku/TipsNO098-001.png', '/images/zhiku/TipsNO098-002.png', '', '', '', '更新销售数量的数据', '更新销售数量的数据之后', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('99', '99', '选取单元格·范围单元格', 'Range属性/Select方法', '用Range属性来选取单元格或范围内的单元格。Range属性是将参数指定成A1单元格内的形式，然后\n             取得单元格或者范围内的单元格所表示的Range属性。同时，也会合并单元格属性。若省略对象的话活性的Sheet页就会成为对象。', 'Sub Sample099_1()@        Range(\"A3:C5\").select    <cite>选择单元格A4～C5</cite>@    End Sub', '在对象中可以按着[Range(\"D3\").Range]这种方式设定Range对象，这样，以D3为基准，可以参照的单元格就变成D4.\n            \n            \n                    对于Range属性的参数来说有很多种，可以参考下述参数。', '/images/zhiku/TipsNO099-001.png', '/images/zhiku/TipsNO099-002.png', '', '', '', '选择单元格A1', '单元格A4~C5被选中', '2017-11-30 14:04:58', null, null, '[{\"title\":\"单元格指定的参考\",\"heads\":[],\"rows\":[[\"单一单元格\",\"Range(\\\"A1\\\")\"],[\"复数单元格A1,A5\",\"Range(\\\"A1,A5\\\")\"],[\"连续的范围单元格A1~D5,F1~H3\",\"Range(\\\"A1:D5\\\")或Range(\\\"A1\\\",\\\"D5\\\")\"],[\"复数连续的范围单元格A1~D5,F1~H3\",\"Range(\\\"A1:D5\\\",\\\"F1:H3\\\")\"],[\"A列~C列\",\"Range(\\\"A:C\\\")\"],[\"从第3行到第5行\",\"Range(\\\"3:5\\\")\"]]}]');
INSERT INTO `t_tips` VALUES ('100', '100', '选取其他sheet页的单元格', 'Activate方法/Select方法', 'Activate方法是将指定的object对象活性化的命令。所谓的[活性化]，就是指将对象定为将要操作的对象。\n            \n                 Select方法是选择被指定的对象的命令。通过指定Range对象来选择单元格或范围单元格。', 'Sub Sample100_1()@        WorkSheets(\"Sheet2\").Activate    <cite>将「Sheet2」指定为活性</cite>@        Range(\"A1\").select               <cite>选择A1单元格</cite>@    End Sub', '现在选取跟活性的WorkSheet页不同的WorkSheet页时，一旦作为对象的sheet页需要变成活性。那\n                么，就跟通的操作下[Sheet2]处于活性状态而不能选中[Sheet1]的单元格一样。若不习惯，就会按着[Work\n                Sheets(\"Sheet1\").Range(\"B1\").Select]这样来写，所以要注意这养的异常。', '/images/zhiku/TipsNO100-001.png', '/images/zhiku/TipsNO100-002.png', '', '', '实际上执行下一个代码时，                    Sub Sample100_2()@    要预先确认对象的WorkSheet                           WorkSheets(\"Sheet2\")@    若不是活性就不会被正确的执行。                          .Range(\"A1\").Select@                                                End Sub', '「Sheet1」WorkSheet为活性', '「Sheet2」WorkSheet的A1单元格被选取', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('101', '101', '通过指定行号和列号来选择单元格', 'Cells属性', 'Cells属性，行号和列号通过行列顺序指定成参数，可以参照单一单元格。\n                通过行番号从worksheet顶端，列番号从左侧开始累加的数值来指定，\n                虽然列番号可以通过拉丁字母来指定，那时，就需要像\"B\"这样用双引号来捆绑。\n                同时，由于要利用变量来指定行号和列号，可以通过对范围内的单元格依次进行处理。\n	            并且，省略object时，当作活性页全体被设定来进行处理。', 'Sub Sample101_1()@	Dim i As Long@        For i = 1 To 5      <cite>#变量i的值从1到5循环处理</cite>@            cells(i, 1).Value = i   <cite>#第1列中输入变量i的值</cite>@        Next@    End Sub', '若使用Cells属性，像参考代码中那样对于复数的单元格依次进行处理。\n                但是，与Range对象不同的是可以通过Cells属性来指定的单元格只有1个，\n                不能指定范围内的单元格。同时，Cells属性要进行范围指定，需要按着\n                [Range(Cells(2, 2), Cells(4, 5))]这样来进行与Range属性进行组合来编写。', '/images/zhiku/TipsNO101-001.png', '/images/zhiku/TipsNO101-002.png', '', '', '', '(在A列中输入连续的数据)', '(A列有连续的1到5被输入)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('102', '102', '指定对应单元格', 'Offset属性', '利用Offset属性，可以从基准单元格开始指定到相应位置的单元格。\n                参数RowOffset可以指定行方向的位置，参数ColumnOffset可以指定列方向的位置。\n                在指定位置以下方(RowOffset)以及右侧(ColumnOffset)则为正数，\n                在指定位置以上方(RowOffset)以及左侧(ColumnOffset)则为负数。\n	            并且，参数指定为0或省略的时候，指定与作为基准相同位置的单元格。', 'Sub Sample102_1()@	Range(\"B2\").Offset(2, 3).select@        <cite>#以单元格B2为基准，选择2行以下，3列之后的单元格</cite>@    End Sub', '选择基准下数2行，右数3列的单元格。\n            \n            \n                结果便是单元格E4被选中。请注意并不包含基准单元格。', '/images/zhiku/TipsNO102-001.png', '/images/zhiku/TipsNO102-002.png', 'Offset属性省略参数', '利用Offset属性，参照单元格A1的第二列右侧的单元格，有以下两种写法。\n            \n            \n    \n\n            \n            \n                由于行方向从基准单元格起不动，可以省略也可以指定[0]。\n                这样，虽然两个方法都是正确的，但是省略参数的话一旦忘记了逗号便会便不会指定列，\n                为了避免这种情况的发生，尽量保持不省略参数而是指定为[0]的习惯。', 'Range(\"A1\"）.Offset(, 2).Select@Range(\"A1\"）.Offset(0, 2).Select', '(以B2为基准)', '(E4被选中)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('103', '103', '跳到指定的单元格', 'Goto方法', 'Goto方法是选择指定的单元格·范围内单元格。\n                参数Scroll中若值为True,则选择的范围内单元格迁移到画面的左上角。', 'Sub Sample103_1()@	Application.Goto Reference:=Range(\"A3:C10\"), Scroll:=True@        <cite>#选择范围内单元格（A3~C10），并将其显示在画面左上角</cite>@    End Sub', '若是利用Goto方法，可以跳到指定的单元格位置。这一机能与跳转技能类似。', '/images/zhiku/TipsNO103-001.png', '/images/zhiku/TipsNO103-002.png', '与Select方法的不同', '对象单元格子在不同sheet页的时候，利用Select方法的时候，\n                需要预先将对象所在的sheet页置为活性，Goto方法便不需要考虑这个，\n                下一个例子就是选择[sheet2]的A3~C10单元格。', 'Sub Sample103_2()@        Application.Goto _@	Reference := Worksheets(\"Sheet2\") _@	.Range(\"A3:C10\"), Scroll:=True@    End Sub', '(选择A1单元格)', '(A3~C10单元格被选中，显示在画面左上角)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('104', '104', '变更选择的范围的大小', 'Resize属性', 'Resize属性是将选择的单元格·范围内单元格按照指定的大小来变换。\n                对要进行操作的对象进行单元格·范围内单元格变换时使用。', 'Sub Sample104_1()@        Range(\"A3:C10\").Resize(1).Select@        <cite>#将单元格A3~C10按着开头第一行的大小来变化.</cite>@    End Sub', '在这里，首先使用Range属性来指定单元格A3~C10。\n                然后通过Resize属性仅以第一行的数据来变换单元格范围并选择。\n                结果为单元格A3~C3被选中。', '', '', 'Resize属性参数的省略', '例子中省略了参数Columnsize，如果省略Resize属性的参数，便会保持跟原来相同的大小。', '', '', '', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('105', '105', '将多个单元格合并', 'Merge方法', 'Merge是将选中范围内的单元格合并的方法。\n                参数Across如果为True则将指定的范围内单元格向行方向合并。', 'Sub Sample105_1()@	Range(\"A1\").HorizontalAlignment = xlCenter@        <cite>#A1单元格的文字位置置为居中</cite>@	Range(\"A1:C1\").Merge	<cite>#将单元格A1～C1结合</cite>@    End Sub', '这个样例实在单元格结合之前，将文字设置成居中。\n                对于通过Excel的操作使用VBA将进行[单元格结合并居中]的处理，\n                需要预先将结合的范围内单元格的左上角单元格的格式设定好。', '/images/zhiku/TipsNO105-001.png', '/images/zhiku/TipsNO105-002.png', '不显示单元格结合时的警告信息', '单元格结合时，若在指定范围的坐上角单元格之外有数据，则清空这些数据。\n                并且这时会显示警告。\n                如果不想显示这个警告信息的话。按着下面这样使用DisplayAlerts。\n                DisplayAlerts属性中指定False的话就不会显示警告信息了。\n            \n            \n                同时，DisplayAlerts属性的宏在设定之后会有残留值，必须要将其还原成True.', 'Sub Sample105_2()@        Application.DisplayAlerts = _@            False@        Range(\"A1\").HorizontalAlignment _@            = xlCenter@        Range(\"A1:C1\").Merge@        Application.DisplayAlerts = True@    End Sub', '(在表头单元格A1中输入数据)', '(按着指定大小来结合单元格)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('106', '106', '解除单元格的合并', 'UnMerge方法', '使用UnMerge方法会将已经结合的单元格解除结合。\n                单元格解除结合之后，需要注意的是原本输入的\n                数据就只会显示到最左上角的单元格中。', 'Sub Sample106_1()@	Range(\"A1\").HorizontalAlignment = xlGeneral@	<cite>#A1单元格的格式设定成[标准]</cite>@        Range(\"A1:C1\").UnMerge	<cite>#解除A1单元格的结合</cite>@    End Sub', '在这里，首先将A1单元格中的文字格式设定成[表针]，然后再进行单元格结合的解除。', '/images/zhiku/TipsNO106-001.png', '/images/zhiku/TipsNO106-002.png', '其他单元格结合的解除方法', '要解除范围内结合中的单元格首先需要复制范围内的单元格，\n                然后保持原本的状态粘贴后再解除单元格的合并。\n                这样便与在Excel的Sheet页上的操作相同，\n                下面这个样例就是先复制单元格要解除的部分然后保持原本的状态粘贴。', 'Sub Sample106_2()@	Range(\"A1:C1\").Copy _@	Destination:=Range(\"A1\")@    End Sub', '(单元格A1～C1是单元格结合状态)', '(单元格结合解除)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('107', '107', '参照已结合的单元格', 'MergeArea属性', '使用MergeArea属性，将含有指定的单元格的结合范围显示出来。\n                若指定的单元格没有结合单元格则返回指定的单元格。', 'Sub Sample107_1()@	MsgBox \"含有单元格A1的结合范围是\" _@	    &amp; Range(\"A1\").MergeArea.Address &amp; \"区域\"@	<cite>#将含有单元格A1的结合单元格的位置显示在MsgBox中</cite>@    End Sub', '在这里，使用MergeArea属性取得含有单元格A1的结合单元格范围，\n                通过Adress属性取得这些单元	格的位置。', '/images/zhiku/TipsNO107-001.png', '/images/zhiku/TipsNO107-002.png', 'MergeArea属性的活用', '使用MergeArea属性可以缺德单元格·范围内单元格。\n                因此，也可以取得借个的单元格的数量，行和列。\n            \n            \n                下面的样例中，取得含有单元格A1的结合单元格的列，并显示在MsgBox中。', 'Sub Sample107_2()@        MsgBox \"结合的单元格列是\" _@            &amp; Range(\"A1\").MergeArea. _@            Columns.Count &amp; \"列\"@    End Sub', '(单元格A1～C1是单元格结合状态)', '(结合中的单元格范围显示在MsgBox中)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('108', '108', '取得并设定范围内结合的单元格', 'MergeCells属性', '利用MergeCells属性可以取得指定范围内的单元格的结合情况。\n                结合的状态下返回True，没有结合的状态下返回False。\n                并且为True时将单元格，指定为False时解除单元格的结合状态。', 'Sub Sample108_1()@	Range(\"A1:C1\").MergeCells = Not Range(\"A1:C1\").MergeCells@	<cite>#设定单元格A1～C1的结合</cite>@    End Sub', '这里，通过跟Not运算符相结合进行单元格A1~C1的结合、解除。\n                MergeCells属性的返回值是True或False。\n                对与Not运算符，跟之前的正好相反。利用这点可以对1行代码的结合或者解除进行交替处理。', '/images/zhiku/TipsNO108-001.png', '/images/zhiku/TipsNO108-002.png', '不使用Not运算符的时候', '与这个样例相同的处理，不实用Not运算符来编写的话，可以参照下面的代码。\n            \n            \n                这里，MergeCells属性来判断结合的状态，对于判断的结果，\n                进行单元格结合状态的解除(UnMerge方法)，或者进行单元格之间的结合(Merge方法)。', 'Sub Sample108_2()@        If Range(\"A1\").MergeCells Then@            Range(\"A1\").UnMerge@        Else@            Range(\"A1:C1\").Merge@        End If@    End Sub', '(单元格A1～C1是结合状态)', '(解除单元格的结合)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('109', '109', '处理复数结合的选择范围', 'Union方法', '使用Union方法，两个以上的单元格，单元格的范围结合作为一个处理。\n                设置一次后，追加指定的新内容。', 'Sub Sample109_1()@        Dim   i   As   Long@        Dim   Target  As Range@        For  i = 0  To  8	<cite>#i从0开始到8为止反复处理9次</cite>@            If  Range(\"C4\").offset(i).Value = \"川崎\" Then@            <cite>#从单元格C4开始顺序进行对单元格值得判断</cite>@                If  Target  Is  Nothing  Then@                <cite>#变量Target是不是Nothing进行判断</cite>@                    Set Target  =  Range(\"C4\").offset(i)@                    <cite>#对变量Target设置现在的单元格</cite>@                Else@                    Set Target  =  Union(Target,Range(\"C4\").offset(i))@                    <cite>#对变量Target设置新的结合后的单元格</cite>@                End  If@            End  If@        Next@        Target.Select@        <cite>#对结合后的单元格进行1次全部选择</cite>@    End Sub', '这里是，使用Offset属性顺序检查C列的值，选择值是[川崎]的单元格。\n                Offset属性是仅仅以相邻单相对应位置的单元格取得相应属性。\n                相对应位置的单元格取得相应属性。\n            \n            \n	            单元格的值是[川崎]的场合时，对变量Target是否是Nothing进行检查。\n                这是Union方法参数设置为Nothing为了防止出现错误。\n            \n            \n                而且，最后变量Target设置全部单元格通过Select方法选择。', '', '', '', '', '', '', '', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('110', '110', '象范围内单元格中多个范围单元格的确认', 'Areas属性', 'Areas属性是将指定的范围内单元格领域(不相邻的范围单元格)聚集起来。\n                要指定特定的范围单元格时，需要指定参数Index的索引号。', 'Sub Sample110_1()@	Dim num1 As Long, num2 As Long@	Dim I As Long@	num1 = Range(\"A1:A3,A5:A6\").Rows.Count@        <cite>#代入单元格A1~A3T和A5~A6的行号</cite>@	For I = 1 To Range(\"A1:A3,A5:A6\").Areas.Count@	<cite>#对单元格A1~A3和A5~A6各自部分的处理</cite>@	    num2 = num2 + range(\"A1:A3,A5:A6\").Areas(i).Rows.Count@	    <cite>#对各自部分的行号进行加算</cite>@	Next@	MsgBox \"没有使用Areas属性:\" &amp; num1 &amp; \"行\" &amp; vbLf _@	    &amp; \"使用了Areas属性: \" &amp; num2 &amp; \"行\"@	    <cite>#将变量num1和变量num2的值存入MsgBox中</cite>@    End Sub', 'Row是取得对象范围内单元格的行的属性。同时，Count属性是取得行数的属性。\n                在这个样例中多个部分的单元格当作为对象，若单单将Rows属性和Count属性相结合的话，\n                并不会取得正确的行号。这样，Rows属性只能取得最初部分的行。\n                这种情况下，就可以使用Areas属性了。', '/images/zhiku/TipsNO110-001.png', '/images/zhiku/TipsNO110-002.png', '', '', '', '(对象的范围单元格是A1～A3和A5～A6这两个部分)', '(显示使用Areas属性和不使用Areas属性的结果)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('111', '111', '选择表全体', 'CurrentRegion属性', '通过CurrentRegion属性可以取得含有被指定的单元格活性的单元格部分。\n                所谓的活性部分，就是指空白行和空白列锁围城的单元格范围。\n                在WorkSheet页上，通过<Ctrl>键+<*>键可以选择相同的部分。', 'Sub Sample111_1()@	Range(\"A3\").CurrentRegion.Select@        <cite>#选择含有单元格A3的活性部分</cite>@    End Sub', '在这里以A3单元格为基准，被指定的单元格所包含的部分如果在指定的表内，\n                也可对单元格A4或B6这样的单元格进行同样的操作。', '/images/zhiku/TipsNO111-001.png', '/images/zhiku/TipsNO111-002.png', '关于表的形式', '利用CurrentRegion属性，表的大小即使发生变化也可以取得全体表中的数据。\n                所以，通用性和便利性都很强。但是，由于表的作成方式不同，这种便利也并不会共享。\n                CurrentRegion属性就是取得这种活性部分的属性。\n                所以，若输入表所找到的行上紧邻的行中[9月份]或[单位：千元]这样的数据的\n                话，通过该单元格所包含的形式取得范围内单元格的内容，就会损失CurrentRegion的通用性。\n                已作成的表通过程序来操作的话，也是需要考虑这种情况的。', '', '(セルA3以降に票が作成されている)', '(表全体が選択された)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('112', '112', '使用WorkSheet进行范围选取', 'UsedRange属性', 'UsedRange属性是通过使用指定的WorkSheet来进行范围单元格的选取。\n                需要注意在之前作为对象来操作的单元格也是可以取得的。', 'Sub Sample112_1()@	ActiveSheet.UsedRange.Select@	<cite>#选择活性Sheet页中被使用的范围</cite>@    End Sub', 'UsedRange属性是选取指定的的WorkSheet页中被使用的范围单元格。\n                要注意作为对象的WorkSheet。\n                将单元格作为一个对象那么便会发生异常。\n                并且，被使用的范围单元格并不限制于只有数据的范围内。\n                需要注意设定了单元格的格式的时候也是要判断的。', '/images/zhiku/TipsNO112-001.png', '/images/zhiku/TipsNO112-002.png', 'WorkSheet中是否有数据的判断', '使用UsedRange属性可以判断当前页中是否含有数据。\n                下面的样例就是UsedRange的结果仅在单元格A1中没有数据的时候，该Sheet页并没有被使用的判断。', 'Sub Sample112_2()@        If ActiveSheet.UsedRange.Address _@	    = \"$AS1\" And _@	    IsEmpty(Range(\"A1\")) _@		Then@	    MsgBox _@	        <cite>\"当前Sheet页未使用\"	</cite>@        End If@    End Sub', '(包含表的WorkSheet页作为对象)', '(选择被使用的范围单元格)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('113', '113', '获取单元格的位置', 'Address属性', 'Address属性是将指定的单元格·范围内单元格的位置返回。根据指定的参数不同取得方式也会不同。\n                参数RowAbsolute和ColumnAbsolute是指定取得作为各自的行(RowAbsolute)列(ColumAbsolute)的绝\n                对参照。True是绝对参照、False是相对参照。默认值是True。参数ReferenceStyle是指定的参照形式。\n            \n                参数External若指定True则会返回外部参照。默认值是False。\n                参数RelativeTo是在参数RowAbsolute和ColumnAbsolute两方都指定为False、\n                参数ReferenceStyle指定为xlR1C1时使用的。指定参照的起点单元格。', 'Sub Sample113_1()@	MsgBox \"选择的范围单元格的位置是\" _@	    &amp; Selection.Address &amp; \"区域\"@        <cite>#将被选择的范围内单元格的位置显示在MsgBox中</cite>@    End Sub', '这里，将事先被选择的范围单元格作为对象。\n                请注意选择单元格意外的对象会发生异常。\n                并且，参数ReferenceStyle中指定的值请参照下面的值。', '/images/zhiku/TipsNO113-001.png', '/images/zhiku/TipsNO113-002.png', '', '', '', '(选择任意的单元格范围)', '(选择的范围内单元格的位置显示在MsgBox中)', '2017-11-30 14:04:58', null, null, '[{\"title\":\"参数ReferenceStyle中指定的XlReferenceStyle类的常量\",\"heads\":[\"名\",\"值\",\"说明\"],\"rows\":[[\"xlA1\",\"1\",\"指定xlA1、则返回形式为A1的参照。\"],[\"xlR1C1\",\"-4150\",\"指定xlR1C1、则返回形式为R1C1的参照\"]]}]');
INSERT INTO `t_tips` VALUES ('114', '114', '数据的被输入时参照终端单元格', 'End属性', 'End属性是，工作表上的Ctrl+方向键(↑、↓、→、←中的哪一个)对应的操作。\n                数据连接被输入可以从区域的上端，下端，右端，左端的单元格取得。\n                表的最后一行等等取得的时候可以使用。', 'Sub Sample114_1()@	Range(\"A3\").End(xlDown).Eng(xlToRight).Select@	<cite>单元格A3为基准，取得下面的值，右边的值也取得</cite>@    End Sub', 'End 属性的变量Direction指定的值是下一个行的值。', '/images/zhiku/TipsNO114-001.png', '/images/zhiku/TipsNO114-002.png', '', '', '', '(单元格A3的值表示右下端单元格的选择)', '(右下端单元格被选择)', '2017-11-30 14:04:58', null, null, '[{\"title\":\"变量Direction指定XlDirection等级的定数\",\"heads\":[\"定数\",\"意义\"],\"rows\":[[\"xlDown\",\"下\"],[\"xlToLeft\",\"左\"],[\"xlToRight\",\"右\"],[\"xlUp\",\"上\"]]}]');
INSERT INTO `t_tips` VALUES ('115', '115', '删除先头行 选择范围', 'Resize属性/Offset属性', '用Resize属性改变单元格范围的大小、用Offset属性来移动单元格到指定位置，\n                就会取得表先头行以外的数据。', 'Sub Sample115_1()@	With Range(\"A3\").CurrentRegion@	<cite>#对包含单元格A3的范围进行处理</cite>@	    .Resize(.Rows.Count - 1).Offset(1).Select@        <cite>#行数减1，选择的单元格范围向下移动1</cite>@	End With@    End Sub', '这里，为了取得全体表要使用CurrentRegion属性。\n                CurrentRegion属性是取得含有指定的单元格的活性领域中的内容。\n                对于取得的表来说，因为需要行数减1所以通过Rows属性来获取表的全体行，\n                通过Count属性来获取行中的列数。', '/images/zhiku/TipsNO115-001.png', '/images/zhiku/TipsNO115-002.png', 'Resize属性和Offset属性的顺序', '通常情况下，Resize属性和Offset属性的顺序并没有先后之分。\n                但假如元表的WorkSheet中行数（或者列数）刚刚好结束的时候，\n                之前的Resize大小不事先变化的话就可能会出现异常。\n                所以，事先指定Resize属性这样的习惯，若有这样的处理也不会担心。', '', '(单元格A3以下有表)', '(部分数据被选中)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('116', '116', '取得/参照周围的单元格', 'Previous属性/Next属性', 'Previous属性是取得/参照指定的单元格左侧的单元格的值，\n                Next属性是取得/参照指定的单元格右侧的单元格的值。', 'Sub Sample116_1()@	MsgBox \"单元格B4左边的值: \" &amp; Range(\"B4\").Previous.Value _@        &amp; vbCrLf &amp; \"单元格B4右边的值:\" &amp; Range(\"B4\").Next.Value@        <cite>#取得并显示单元格B4左右两侧的单元格的值</cite>@    End Sub', '通过使用Previous/Next属性来取得指定单元格左右两侧的单元格中的值。\n            \n            \n                在这里虽然能取到值，但是通过Select方法来选择的时候，\n                这个操作与在各自WorkSheet页中使用\n                <Shift>+<Tab>键和<Tab>键的操作相同。', '/images/zhiku/TipsNO116-001.png', '/images/zhiku/TipsNO116-002.png', '其他的方法', '同样的处理，可以使用Offset属性。下面的样例就是使用Offset属性来实现的。', 'Sub Sample116_2()@	MsgBox \"单元格B4左侧单元格的值:\"_@	    &amp; Range(\"B4\").Offset(, -1) _@		    .Value _@            &amp; vbCrLf _@            &amp; \"单元格B4右侧单元格的值:\"_@            &amp; Range(\"B4\").Offset(, -1) _@                .Value@    End Sub', '(以单元格B4为基准取得左右单元格的值)', '(将各自的值显示在MsgBox中)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('117', '117', '选择空白的单元格', 'SpecialCells方法', '利用SpecialCell方法，满足指定的条件取得可能的单元格。\n                选择空白的单元格,指定变量的类型为\"xlCellTypeBlanks。\n            \n                另外，符合SpecialCell方法时。请注意结果没有错误的单元格。', 'Sub Sample117_1()@	Range(\"A3\").CurrentRegion.SpecialCells(xlCellTypeBlanks).Select@	<cite>#包含单元格A3选择空白单元格</cite>@    End Sub', '在这里，使用CurrentRegion属性取得所有的表，\n                在那个单元格范围内对单元格进行处理。这样、可以获得表中的空白单元格\n            \n            \n                 指定的SpecialCell方法的变量类型和方法值、下次执行。', '', '', '', '', '', '', '', '2017-11-30 14:04:58', null, null, '[{\"title\":\"指定变量Type的XlCellType类的常量\",\"heads\":[\"常量\",\"说明\"],\"rows\":[[\"xlCellTypeAllFormatConditions\",\"表示设置单元格的形式\"],[\"xlCellTypeAllValidation\",\"包括单元格条件的设置\"],[\"xlCellTypeBlanks\",\"空白的单元格\"],[\"xlCellTypeComments\",\"包括单元格注释\"],[\"xlCellTypeConstants\",\"包括单元格常量\"],[\"xlCellTypeFormulas\",\"包括单元格公式\"],[\"xlCellTypeLastCell\",\"使用在范围内的最后的单元格\"],[\"xlCellTypeSameFormatConditions\",\"表示设置相同的单元格形式\"],[\"xlCellTypeSameValidation\",\"包括设置单元格的相同条件\"],[\"xlCellTypeVisible\",\"所有的可见单元格\"]]},{\"title\":\"指定变量Value的XlSpecialCellsValue类的常量\",\"heads\":[\"定数\",\"说明\",\"定数\",\"说明\"],\"rows\":[[\"xlErrors\",\"错误值\",\"xlNumbers\",\"数值\"],[\"xlLogical\",\"逻辑值\",\"xlTextValues\",\"文字\"]]}]');
INSERT INTO `t_tips` VALUES ('118', '118', '计算单元格个数', 'Count属性', '利用Count属性计算单元格的个数。', 'Sub Sample118_1()@	MsgBox \"数据条数 : \" &amp; _@		Range(\"A3\").CurrentRegion.Resize(, 1).Count - 1 &amp; \"条\"@	<cite>#利用CurrentRegion 属性和Resize属性取得一列</cite>@	<cite>#利用Count属性取得单元格个数、索引减1</cite>@    End Sub', '在这里，是求表的数据个数。因为要使用Count属性计算单元格的个数，\n                所以利用Resize属性对在一列的单元格范围内的对象进行处理。', '/images/zhiku/TipsNO118-001.png', '/images/zhiku/TipsNO118-002.png', '各种Count属性的对象', '在这里对单元格做的处理，其他的行、列、工作簿、\n                练习薄等等也都有Count属性做对象。\n                对任何一个对象的个数进行计算的的属性。\n                这样，VBA的命令中对不同的对象有相同名字的属性存在。', '', '(求所有数据的数据条数)', '(数据条数使用MsgBox显示)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('119', '119', '只选择可见单元格', 'SpecialCells方法', '使用SpecialCells方法，可以获取满足指定条件的单元格。\n                选择可见单元格，指定CellTypeVisible的参数类型Type。\n            \n                再者，要注意的是SpecialCells方法如果没有符合的单元格，或产生错误。', 'Sub Sample119_1()@	MsgBox\"女性会员的人数:\" &amp; _@	    Range(\"A3\").CurrentRegion.Resize(,1) _@		.SpecialCells(xlCellTypeVisible).Count - 1 _@		&amp; \"名\"@	<cite>#获取单元格A3列，计算可见单元格个数</cite>@	<cite>#显示减去标题行的信息框</cite>@    End Sub', '这里，因为自动筛选器对表进行处理，只是单纯的求取显示的个数，\n                未显示的单元格如果被计数了的话就不会顺利进行。', '/images/zhiku/TipsNO119-001.png', '/images/zhiku/TipsNO119-002.png', '', '', '', '(从性别栏抽出女性的数据)', '(显示抽出数据的结果件数)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('120', '120', '计算表的行数和列数', 'Rows属性/Columns属性/Count属性', 'Rows属性取得对象的行数，Columns属性取得对象的列数。\n                与Count属性组合使用计算对象的行列数。可以取得表格的行数和列数。', 'Sub Sample120_1()@	With Range(\"A3\").CurrentRegion	<cite>#处理包含单元格A3的表格</cite>@	MsgBox \"顾客List\" &amp; vbCrlf _@	    &amp; \"行数 ：\" &amp; .Rows.Count &amp; vbCrlf _@            &amp; \"列数 ：\"　&amp; .Columns.Count	<cite>#表示求的行列数</cite>@	End With@    End Sub', '这里，首先用CurrentRegion属性取得表全体，进行处理。\n                可以把Rows属性、Columns属性和Count 属性组合使用。', '/images/zhiku/TipsNO120-001.png', '/images/zhiku/TipsNO120-002.png', '', '', '', '(对单元格A3以后的表进行处理)', '(行数和列数被表示)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('121', '121', '单元格的数据获取', 'Value属性', 'Value属性，返回object指定的单元格。', 'Sub Sample121_1()@        MsgBox Range(\"A1\").Value@        <cite>#MsgBox 表示A1单元格的值</cite>@    End Sub', 'Value属性就是取得单元格内值的属性。向表格中输入计算式，取得结果。\n                另外，设定表示形式的时候，无视表示形式取得的值。', '/images/zhiku/TipsNO121-001.png', '/images/zhiku/TipsNO121-002.png', '表示形式也包含取得的值', '表示形式也包含取得单元格中的值使用Text属性。\n                Text属性，取得单元格来表示文字列的值。\n                因此，单元格足够宽时[###]表示单元格的对象。\n                Text属性取得的值也是[###]。Text属性的例子，如下', 'Sub Sample121_2()@        MsgBox Range(\"A1\").Text@    End Sub', '', '', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('122', '122', '取得单元格的序列值', 'Value2属性', 'Value2属性和Value属性一样，都是取得指定单元格的值。\n                但是，日期和货币，取得的是Double类型。\n                因此，Value2属性用于取得输入日期的单元格的序列值。', 'Sub Sample122_1()@        MsgBox\"序列值：\" &amp; Range(\"D4\").Value2@        <cite>#将单元格D4的序列值表示在MessageBox里</cite>@    End Sub', '单元格D4中输入日期数据。取得这个日期数据的序列值，\n                表示在MessageBox里。	关于序列值，请参照[Memo]。', '/images/zhiku/TipsNO122-001.png', '/images/zhiku/TipsNO122-002.png', '所谓序列值', '在Excel中，日期/时刻的数据用序列值来管理。\n            \n            \n                正常来说，以1901/1/1为起点，1天就是[1]。\n                因此，1小时就是[1/24]，1分钟又是1小时的1/60。', '', '(往单元格D4里输入日期)', '(表示单元格D4的序列值)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('123', '123', '取得单元格的公式', 'Formula/FormulaR1C1属性', '往单元格里写入公式，使用Formula属性\n                和FormulaR1C1属性就可以取得写入的公式。\n                Formula属性使用的是A1形式，\n                FormulaR1C1属性使用的是R1C1形式，来处理单元格地址。', 'Sub Sample123_1()@        With Range(\"D13\")@        <cite>#将单元格D13作为处理对象</cite>@            MsgBox\"Formula属性：\" &amp; .Formula &amp; vbCrLf _@                &amp; \"FormulaR1C1属性：\" &amp; .FormulaR1C1@            <cite>#用A1形式、R1C1形式分别取得公式来表示</cite>@        End With@    End Sub', '这里写入到单元格D13的公式，用A1形式和R1C1形式分别取得，表示到messagebox。', '/images/zhiku/TipsNO123-001.png', '/images/zhiku/TipsNO123-002.png', '用R1C1形式来设定公式', '用FormulaR1C1属性取值时，与Excel的参照形式无关，直接可以用R1C1形式取到公式。\n                但是，设定公式的时候，如果Excel的参照形式是A1时，即使用FormulaR1C1属性设定，写入的公式还是A1形式。', '', '(取得写入到单元格D13的公式)', '(表示A1形式和R1C1形式的公式)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('124', '124', '判断单元格是否为公式', 'HasFormula属性', '使用HasFormula属性可以取得指定的单元格或者单元格范围内是否包含公式。\n                指定单元格范围的时候，所有的单元格里都有公式时返回True，\n                都没有公式时返回False，混合时返回Null。', 'Sub Sample124_1()@        If Range(\"D13\").HasFormula Then@        <cite>#判断单元格D13里有没有公式</cite>@            MsgBox\"已设定公式\"@            <cite>#有公式的message</cite>@        Else@            MsgBox\"未设定公式\"@            <cite>#没有公式的message</cite>@        End If@    End Sub', '这里利用HasFormula属性判断单元格D13里有没有公式。\n                单元格D13里设定了SUM函数。\n                因此，表示出“已设定公式”的信息。', '/images/zhiku/TipsNO124-001.png', '/images/zhiku/TipsNO124-002.png', '', '', '', '(检查单元格D13的值)', '(表示出“已设定公式”的信息)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('125', '125', '判断单元格是否为日期', 'IsDate函数', '使用IsDate函数，可以调查指定的数据是做为日期还是时间来处理的。\n                作为时间/日期处理的情况返回True，\n                不是作为时间/日期处理的情况返回False。', 'Sub Sample125_1()@        If IsDate(Range(\"D4\").Value) Then   <cite>#判断单元格D4中的值是否为日期</cite>@            MsgBox\"是日期数据\"   <cite>#是日期数据的情况的处理</cite>@        Else@            MsgBox\"不是日期数据\"  <cite>#不是日期数据的情况的处理</cite>@        End If@    End Sub', '这里，在D4单元格中输入日期。检查这个数据。\n                IsDate函数是判断是否能够作为日期处理的函数，并返回值。\n                所以，比如说“10月30日”这样的用全角输入的文字列，返回True。', '/images/zhiku/TipsNO125-001.png', '/images/zhiku/TipsNO125-002.png', '判断是否输入了正确的日期类型(序列值)', 'IsDate函数如果处理日期的话会返回True。\n                所以，不是序列值也会有返回True的情况。\n                调查是否为序列值要配合使用IsNumeric函数。\n            \n            \n                IsNumeric函数在参数指定的值为数值的情况返回True。\n                请确认下面的例子。由于要取得单元格中输入的序列值，\n                所以使用Value2属性。', 'Sub Sample125_2()@        If IsDate(Range(\"D4\").Value) And _@        IsNumeric(Range(\"D4\").Value2) Then@            MsgBox\"是日期数据\"@        Else@            MsgBox\"不是日期数据\"@        End If@    End Sub', '(检查单元格D13的值)', '(表示出“已设定公式”的信息)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('126', '126', '判断单元格是否为空', 'IsEmpty函数', 'IsEmpty函数是判断参数中指定的值是否为空的函数。\n                Empty的情况返回True，不是Empty的情况返回False。', 'Sub Sample126_1()@        If IsEmpty(Range(\"D4\").Value) Then  <cite>#判断单元格D4的值是否为Empty</cite>@            MsgBox\"单元格为空\"   <cite>#Empty的情况的处理</cite>@        Else@            MsgBox\"单元格不为空\"  <cite>#不是Empty的情况的处理</cite>@        End If@    End Sub', '判断单元格是否为空要使用IsEmpty函数。\n                单元格的初始值虽然目视为空，但在Excel里为Empty。\n                空栏与[\"\"]大致上是一样的，但在细节上是有区别的。请注意。', '/images/zhiku/TipsNO126-001.png', '/images/zhiku/TipsNO126-002.png', 'Empty和[\"\"]', '很多情况，两者都可以将单元格作为空栏的值来使用，\n                但是对象单元格的格式是文字列的情况，用“ActiveCell Value = ”来清空单元格时，\n                IsEmpty函数返回的结果是False。\n                而且，UsedRange方法的处理结果也是被输入了[\"\"]的单元格。\n            \n            \n                细节上如果理解不到位的话，会出现原因不明的错误。请注意。', '', '(判定单元格D4的值)', '(表示判定结果)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('127', '127', '判断单元格的值是否为错误', 'IsError函数', 'IsError函数可以判断参数中指定的值是否为错误值。\n                错误值的情况返回True,不是错误值的情况返回False。', 'Sub Sample127_1()@        If IsError(Range(\"B15\").Value) Then <cite>#判断单元格B15的值是否为错误</cite>@            MsgBox\"计算结果错误\"  <cite>#错误值的情况的处理</cite>@        Else@            MsgBox\"计算结果无误\"  <cite>#不是错误值的情况的处理</cite>@        End If@    End Sub', '这里，在单元格B15中输入了求销售额的平均值的公式。\n                但是，由于“件数”栏是“0”，发生 了除0的错误。\n                这个错误值需要IsError来判断。', '/images/zhiku/TipsNO127-001.png', '', '错误值的种类', '定量\n                        说明\n                    \n                    \n                        ＃NULL！\n                        单元格的指定方法错误\n                    \n                    \n                        ＃DIV/O！\n                        除0\n                    \n                    \n                        ＃VALUE！\n                        输入了不正确的数据\n                    \n                    \n                        ＃REF！\n                        单元格参照的错误\n                    \n                    \n                        ＃NAME！\n                        函数名和单元格范围等名称错误\n                    \n                    \n                        ＃NUM！\n                        数值过大/过小\n                    \n                    \n                        ＃N/A！\n                        没有值', '', '(检查单元格B15的值，表示信息)', '', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('128', '128', '在单元格中输入值', 'Value属性', '如果使用Value属性，就可以在object中指定的单元格、单元格范围中输入值。\n                也可以合并多个单元	格，输入相同的值。', 'Sub Sample128_1( )@        Range(\"C5,C8,C11\").Value = “沈阳”@        <cite>#在C5，C8，C11单元格中输入文字列“沈阳”</cite>@    End Sub', '这里，对多个单元格输入相同的值。\n                像这样，使用Value属性，对于多个单元格也可以一次输入相同的值。', '/images/zhiku/TipsNO128-001.png', '/images/zhiku/TipsNO128-002.png', '清空数值', '工作表函数中如果使用过IF函数，将单元格清空的时候要使用[\"]。\n                但是，在VBA中不使用[\"]。这样，对象单元格的格式是文字列的情况，\n                即使看上去是空栏，实际上并不是空栏。\n                如果清空单元格的值，要使用专门的命令ClearContents方法。\n                下面的例子是清空单元格A5中的值的例子。', 'Sub Sample128_2()@        Range(\"A5\").ClearContents@    End Sub', '(往空单元格里写入“沈阳”)', '(“沈阳”写入)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('129', '129', '在单元格中输入公式', 'Formula属性', '在Object中指定的单元格中输入公式。对于多个单元格也可以一次输入。\n                但是，这种情况单元格参照是相对参照还是绝对参照是需要注意的。', 'Sub Sample129_1( )@        Range(\"E4:E11\").Formula = \"=C4*D4\"  <cite>#在单元格E4~E11中输入公式</cite>@    End Sub', '这里，在E列输入求商品销售金额的公式“单价”×“数量”。\n                这时，指定的公式是“ = C4*D4”，\n                但是由于如果实行代码使用相对参照的方式来输入的，\n                所以在第11行的“=C11*D11”输入的是正确的公式。', '/images/zhiku/TipsNO129-001.png', '/images/zhiku/TipsNO129-002.png', '相对参照和绝对参照', '指定公式的时候，单元格地址中如果使用“$\"，可以用绝对参照形式指定公式。\n                这个例子中如果指定的公式”=$C$4*$D$4\"是这样，就可以输入绝对参照的公式(当然，计算结果是不对的)\n            \n            \n                连续的单元格范围中输入算式的情况，能够进行一个单元格中输入算式后，\n                再复制这个单元格这样的操作。这个例子中，可以进行一次“输入”→“复制”这样的处理。', '', '(往销售金额栏里写入计算公式)', '(写入计算公式，求出销售金额)', '2017-11-30 14:04:58', null, null, '');
INSERT INTO `t_tips` VALUES ('130', '130', '插入单元格', 'Insert方法', '在工作表的指定范围中插入空白的单元格、单元格范围要利用Insert方法。\n                在Shift参数中，可以指定插入单元格的移动方向（转换方向）。\n                有省略的情况Excel会自动进行判断并转换。\n                而且，参数CopyOrigin会指定继承了单元格插入后的公式的单元格。', 'Sub Sample130_1( )@        Range(\"B6:D6\").Insert Shift: = xlDown@        <cite>#在单元格B6~D6中插入单元格，并转换成下方向</cite>@    End Sub', '这里，在单元格B6~D6中插入单元格。\n                在参数Shift中指定xlDown，插入后转换成下方向。\n                而且，参数CopyOrigin指定继承了单元格插入后的公式的单元格。\n            \n            \n                每个参数指定的值分别如下所示。', '/images/zhiku/TipsNO130-001.png', '/images/zhiku/TipsNO130-002.png', '', '', '', '(往单元格B6～D6中插入单元格)', '(插入单元格，数据往下放移动)', '2017-11-30 14:04:59', null, null, '[{\"title\":\"参数Shift指定的XIInsertShiftDirection类的定量\",\"heads\":[\"名称\",\"说明\"],\"rows\":[[\"xlShiftDown\",\"插入单元格后，转换成下\"],[\"xlShiftToRight\",\"插入单元格后，转换成右\"]]},{\"title\":\"参数CopyOrigin中指定XIInsertFormatOrigin类\",\"heads\":[\"名称\",\"说明\"],\"rows\":[[\"xlFormatFromLeftOrAbove\",\"从上以及/或者左边的单元格复制格式\"],[\"xlFormatFromRightOrBelow\",\"从下以及/或者右边的单元格复制格式\"]]}]');
INSERT INTO `t_tips` VALUES ('131', '131', '消除单元格', 'Delete方法', '删除单元格、单元格范围要利用Delete方法。\n                用参数Shift可以指定删除后的单元格的移动方向（转换方向）。\n                省略的情况，Excel会自动的判断并转换。', 'Sub Sample131_1( )@        Range(\"E3\").Delete  <cite>#删除E3单元格</cite>@    End Sub', '这里，删除输入“销售金额”的E3单元格。', '/images/zhiku/TipsNO131-001.png', '/images/zhiku/TipsNO131-002.png', '删除后的转换方向', '省略参数Shift的情况，Excel会自动判断单元格删除后的转换方向。\n                基本上，包含对象单元格的活性单元格领域的行数和列数为基准。\n                行数多的情况转换成上方向，列数多的情况转换成左方向。\n                行数和列数相同的情况，转换成上方向。', '', '(删除销售金额的单元格)', '(销售金额的单元格被删除了)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('132', '132', '移动单元格', 'Cut方法', 'Cut方法是剪切指定的单元格、单元格范围，并将其粘贴到剪切板或指定范围的命令。\n                利用参数Destination，粘贴到指定的单元格中。\n                而且，在存储到剪切板中的情况下也可以用Paste方法进行粘贴。', 'Sub Sample132_1( )@        Range(\"C3：E11\").Cut Destination: = Range ( \"D3\")@        <cite>#将C3~E11单元格中的值移动到D3之后的单元格中</cite>@    End Sub', '可以用剪切、粘贴对象单元格范围的方法来移动单元格。\n                这时，在Cut方法中的参数Destination中指定粘贴地址。\n                因为在粘贴地址中如果已经输入数据会被覆盖，请大家注意。', '/images/zhiku/TipsNO132-001.png', '/images/zhiku/TipsNO132-002.png', 'Paste方法的用例', '例子中虽然使用了Cut方法的参数Destination，但是也可以用Paste方法来粘贴数据。\n                下面是使用了Paste方法的例子。\n            \n            \n                                    \n                \n            \n            \n                而且，参数Destination可以向下面的例子那样指定其他的工作表。', 'Sub Sample132_2()@        Range (\"C3:E11\").Cut@        ActiveSheet.Paste _@        Destination: = Range(\"D3\")@    End Sub@    Sub Sample132_3()@        Range(\"C3:E11\").Cut Destination _@        : = Worksheets(\"Sheet2\").Range(\"A1\")@    End Sub', '(剪切单元格C3～E11)', '(粘贴到单元格D3以后)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('133', '133', '复制单元格', 'Copy方法', 'Copy方法是将单元格、单元格范围复制到指定的范围或剪切板上。\n                利用参数Destination,可以指定粘贴地址。\n                或者，使用Paste方法也可以粘贴数据。', 'Sub Sample133_1( )@        Range(\"E4\").Copy Destination: = Range ( \"E5:E11\")@        <cite>#将E4单元格中的值粘贴到E5~E11单元格中</cite>@    End Sub', '在此，复制E4单元格中录入的值（公式），将其粘贴到E5~E11单元格中。\n                原来的公式是相对参照被录入的，所以复制的时候设定了正确的公式。\n                像这样利用Copy方法，可以把一个单元格复制并粘贴成多个单元格。', '/images/zhiku/TipsNO133-001.png', '/images/zhiku/TipsNO133-002.png', 'Paste方法的用例', '使用Paste方法进行粘贴的情况如下。\n            \n            \n                                    \n                \n            \n            \n                而且，如下所示使用参数Destination，也可以复制到其他sheet上。', 'Sub Sample133_2( )@        Range(\"E4\").Copy@        Activesheet.Paste _@        Destination = Range(\"E5:E11\")@    End Sub@    Sub Sample133_3( )@        Range(\"E4\").Copy Destination: = _@    Worksheets(\"Sheet2\").Range(\"E5:E11\")@    End Sub', '(复制单元格E4的公式)', '(公式复制完成)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('134', '134', '剪切板数据的粘贴', 'Paste方法', '首先利用Cut或Copy等方法剪切或复制数据、然后使用Paste方法把保存在剪贴板中的数据向工作页中粘贴。\n                参数Destination中需要设定粘贴的目的地。\n                并且，如果把参数Link设定成据向工作页中粘贴。默认值是False。', 'Sub Sample134_1()@        Range(\"A3\").CurrentRegion.Copy  <cite>#复制单元格A3</cite>@        ActiveSheet.Paste Destination := Range(\"A15\")@        <cite>#向活动页中的单元格A15中粘贴</cite>@    End Sub', '代码中，利用CurrentRegion属性，取得了单元格A3的活动范围并复制其内容。\n                然后，利用Paste方法向单元格A15中粘贴。', '/images/zhiku/TipsNO134-001.png', '/images/zhiku/TipsNO134-002.png', '向其他页粘贴数据相关', '向其他页粘贴数据的时候，需要向参数Destination里设定工作页中有效的单元格，\n                右边的代码样例所示，将A3单元格的数据粘贴到工作页【Sheet2】的单元格A1中。', 'Sub Sample134_2()@        Range(\"A3\").CurrentRegion.copy@        ActiveSheet.Paste Destination _@    :=WorkSheets(\"Sheet2\").Range(\"A1\")@    End Sub', '(复制单元格A3之后的表)', '(向单元格A15之后粘贴)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('135', '135', '图的作为复制', 'CopyPicture方法', 'CopyPicture方法的利用和指定的剪贴板组件，组件范围为图片（画像）作为无法复制的来。', 'Sub Sample123_1()@        Range(\"A3\").CurrentRegion.Copypicture@        <cite>#作为组件A3在内的表复制</cite>@        ActiveSheet.Paste  Range(\"A15\")@        <cite>#在活动单元表A15以下粘贴	</cite>@    End Sub', '在这里作为营销额表复制图。图复制，作为布局在组件被左右宽度会很方便。\n            \n            \n                CopyPicture方法的变量Appearance，图片的方法复制指定。\n                但是，变量Format，复制图像的形式被指定。\n            \n            \n                它的议论指定的值，如下', '/images/zhiku/TipsNO135-001.png', '/images/zhiku/TipsNO135-002.png', '', '', '', '(单元格A3以后的表图作为拷贝)', '(在单元格A15以后的表粘贴)', '2017-11-30 14:04:59', null, null, '[{\"title\":\"变量Format设定XlCopyPictureFormat类的定数\",\"heads\":[\"名字\",\"说明\"],\"rows\":[[\"xlBitmap\",\"位图(.bmp，.jpg，.gif)\"],[\"xlPicture\",\"制图图像（.png，.wmf，.mix)\"]]}]');
INSERT INTO `t_tips` VALUES ('136', '136', '书写格式的粘贴', 'PasteSpecial方法', 'PasteSpecial方法的利用和剪切板被隔离的数据内容粘贴指定指定的范围内，可以粘贴。\n                Excel的[形式选择粘贴]相当与对话框的操作。', '', 'PasteSpecial方法的变量Paste，粘贴的种类指定。\n                但是，变量Operatio，粘贴的时候计算进行的场合指定。设定各自的议论的值如下。', '', '', '', '', '', '', '', '2017-11-30 14:04:59', null, null, '[{\"title\":\"变量Paste设定XIPasteType类的定值\",\"heads\":[\"名字\",\"说明\"],\"rows\":[[\"xlPasteAll\",\"全部粘贴\"],[\"xlPasteAllExceptBorders\",\"轮廓以外的全部粘贴\"],[\"xlPasteAllMergingConditionalFormats\",\"全部粘贴，条件所属的格式合并\"],[\"xlPasreAllUsingSourceTheme\",\"Source的主题使用全部粘贴\"],[\"xlPasteColumnWidths\",\"拷贝下列的宽度粘贴\"],[\"xlPasteComments\",\"注释粘贴\"],[\"xlPasteFormats\",\"拷贝下Source的形式粘贴\"],[\"xlPasteFormulas\",\"数式粘贴\"],[\"xlPasteFormulasAndNumberFormats\",\"数式和数値的格式粘贴\"],[\"xlPasteValidation\",\"输入规则粘贴\"],[\"xlPasteValues\",\"值粘贴\"],[\"xlPasteValuseAndNUmberFormats\",\"值和数值的格式粘贴\"]]},{\"title\":\"变量Operation设定XlPasteSpecialOperation类的定数\",\"heads\":[\"名字\",\"说明\"],\"rows\":[[\"xlPasteSpeciaiOperationAdd\",\"复制的数据是在对象组件的值加算\"],[\"xlPasteSpeciaiOperationDivide\",\"复制的数据是在对象组件的值而被出算\"],[\"xlPasteSpecialOperationMultiply\",\"复制的数据是在对象组件的值而被乘算\"],[\"xlPasteSperciaiOperationNone\",\"粘贴在计算操作不会举行\"],[\"xlPasteSperciaiOperationSubtract\",\"复制的数据是在对象组件的值被减产\"]]}]');
INSERT INTO `t_tips` VALUES ('137', '137', '数值运算的粘贴', 'PasteSpecial方法', '利用PasteSpecial方法，从剪贴板保存的数据中指定要粘贴的内容，此范围的内容可以被粘贴。\n                有时指定的内容是数值，并且需要进行加减乘除等演算处理或只想进行计算公式的粘贴，\n                此方法可以进行此类的粘贴。关于参数设定，请参照Tips136。', 'Sub Sample137_1()@        Range(\"G1\").Copy@        <cite>#单元格G1中的值复制</cite>@        Range(\"D4:D11\").PasteSpecial Paste:=xlPasteValues _@            , Operation:=xlPasteSpecialOperationSubtract@        <cite>#单元格D4～D11减算后粘贴</cite>@    End Sub', '代码中，[数量]栏的值需要全部减[2]。\n                单元格G1预先将[2]输入，用此粘贴值进行减算处理。', '/images/zhiku/TipsNO137-001.png', '/images/zhiku/TipsNO137-002.png', '粘贴时注意事项', '此代码例中，不只是进行了减算的处理，而且还进行了[值]的粘贴处理，\n                不这样的话，公式将不会被运用。', '', '(利用单元格G1的值进行减算处理)', '(所有的数量被减2)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('138', '138', '取得单元格的高和宽', 'Height属性/Width属性', 'Height属性是取得单元格的高，Width属性是取得单元格宽，并且取得的值都是以小数单位表示。\n                对于一个单元格来说，会取得含有该单元格的行或者列的高度和宽度。\n                多个单元格的话，会取得该单元格范围内高度和宽度的合计。', 'Sub Sample138_1()@        With Range(\"A3\").CurrentRegion@        <cite>#含有A3的单元格作为对象</cite>@        MsgBox \"整个表的幅度:\" &amp; .Columns.width &amp; vbCrlf _@            &amp; \"整个表的高度:\" &amp; .rows.Height@        <cite>#对象全体的宽度和高度取得并表示</cite>@        End With@    End Sub', 'Width属性和高度属性对于复数个单元格来说，会返回整个范围的宽度和高度。', '/images/zhiku/TipsNO138-001.png', '/images/zhiku/TipsNO138-002.png', '小数形式相关', 'Width属性和Height属性取得的值都是以小数单位表示的。\n                1个小数单位等同于1/72英寸。1英寸约25.4mm，即1个小数约为25.4mm/72=约0.3528mm', '', '(处理单元格A3之后的表)', '(整体表的宽和高被表示)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('139', '139', '设置文字的字体', 'Name属性', '利用Name属性，可以取得单元格的字体并设置。', 'Sub Sample139_1()@        Dim TempFontName As String@        TempFontName = Range(\"A3\").Font.Name@        <cite>#取出单元格A3的字体名并放入到变量TempFontName</cite>@        Range(\"A1\").Font.Name = TempFontName@        <cite>#将变量TempFontName的值设置为单元格A1的字体</cite>@    End Sub', '代码中，使表列名的字体和标题的字体统一。\n            \n            \n                单元格A3的字体放入临时变量中，并且只有一个进行设定的单元格，\n                如果用临时变量的话，也可以按照一定的顺序进行设定。', '/images/zhiku/TipsNO139-001.png', '/images/zhiku/TipsNO139-002.png', '不使用变量的代码例', '上记例子中，是在变量中保存字体名，但是，也可以不使用变数去直接设定字体名。\n                这时，请参照右侧的代码。', 'Sub Sample139_2()@        Range(\"A1\").Font.Name = _@        Range(\"A3\").Font.Name@    End Sub', '(表列名和标题的字体不一致)', '(表列名和标题的字体被统一)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('140', '140', '设置文字的尺寸', 'Size属性', '想要取得或设定文字尺寸时，可以利用Size属性。', 'Sub Sample140_1()@        Range(\"A1\").Font.Size = 20@        <cite>#将单元格A1的尺寸设置成20</cite>@    End Sub', '标题A1单元格的字体尺寸变成20。', '/images/zhiku/TipsNO140-001.png', '/images/zhiku/TipsNO140-002.png', '字体尺寸的标准', 'Excel中拥有标准的文字尺寸。想要取得标准文字尺寸的话，可以使用StandardFontSize属性。\n                右侧代码例所示，单元格A1就被设定了标准的文字尺寸。', 'Sub Sample140_2()@        Range(\"A1\").Font.Size = _@        Application.StandardFontSize@    End Sub', '(将单元格A1的字体尺寸变更)', '(字体尺寸被变更了)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('141', '141', '文字的粗体/斜体的设定', 'Bold属性/Italic属性', 'Bold属性是字体的加粗、Italic属性是字体的斜体的设定的可行性。可以得到值。', 'Sub Sample141_1()@         With Range(\"A1\").Font@         <cite>#‘对元素“A1”的处理</cite>@         .Bold = True@         <cite>#‘字体加粗的设定</cite>@         .Italic = True@         <cite>#‘字体斜体的设定</cite>@    End Sub', '在这里，表的标题的输入要把A1的字体设定成加粗和斜体。这个要点对特定的对象、复数的可行场合的设定、With使用声明和准则就会变得很容易。', '/images/zhiku/TipsNO141-001.png', '/images/zhiku/TipsNO141-002.png', '其他的方法', '字体上网[加粗][粗体字 斜体]的设定、利用FontStyle属性可以设定子列。FontStyle属性是指定用文字列设定书写方式。下一个样本是让A1的字体设定成【粗体 斜体】。', '', '', '', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('142', '142', '对文字的下划线/取消划线的设定', 'Underline属性/Strikethrough属性', 'Underline属性是下划线、Strikethrough属性是取消划线可以设定Underline属性是可以指定下划线的种类。', 'Sub Sample142_1()@         Range(\"A1\").Font.Underline = x1UnderlineStyleSingle@         <cite>元素A1下划线的设定</cite>@         .Bold = True@         <cite>#‘字体加粗的设定</cite>@         Range(\"A7:C7\").Font.Strikethrough = True@         <cite>元素A1~C7曲线划线的设定</cite>@    End Sub', '在这里，设定了标题元素A1的字体的下划线。还设定了第七行的数据的取消划线\n        还有，设定了Underline属性值是通用的。', '/images/zhiku/TipsNO142-001.png', '/images/zhiku/TipsNO142-002.png', '', '', '', '', '', '2017-11-30 14:04:59', null, null, '[{\"title\":\"设定Underline属性，xIUnderlineStyleSingle等级常量\",\"heads\":[\"名字\",\"说明\"],\"rows\":[[\"xIUnderlineStyleSingle\",\"下划线\"],[\"xIUnderlineStyleDouble\",\"二重下划线\"],[\"xIUnderlineStyleSingleAccounting\",\"下划线（会计）\"],[\"xIUnderlineStyleDoubleAccounting\",\"二重下划线（会计）\"]]}]');
INSERT INTO `t_tips` VALUES ('143', '143', '设置文字上标/下标', 'Superscript属性/Subscriptプロパティ', '将文字变成上标用Superscript属性，变成下标用Subscript属性。', 'Sub Sample143_1()@         Range(\"C4:C13\").Font.Subscript = True@         <cite>##单元格C4～C13设置成下标</cite>@         #Range(\"D4:D13\").Font.Superscript = True@         <cite>#‘字体加粗的设定</cite>@         .Italic = True@         <cite>##单元格D4～D13设置成上标</cite>@    End Sub', '代码中，【拼音】栏的数据作为下标，【性别】栏的数据作为上标。', '/images/zhiku/TipsNO143-001.png', '/images/zhiku/TipsNO143-002.png', '对于设定的变换', '对于Superscript属性和Subscript属性来说，True/False的设定也可以搭配Not关键字来用，每当代码执行时，也能反向设定，请参照右侧代码样例。', '', '([拼音]栏和[性别]栏的字体设定)', '(字体设定完毕)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('144', '144', '获取并设置字体颜色', 'Color属性', '使用Color属性来获取并设置字体颜色。Color属性是利用RGB函数来指定的。', 'Sub Sample144_1()@         Range(\"A1\").Font.Color = RGB(255,0,0)@         <cite># #设置A1单元格字体颜色为红色</cite>@    End Sub', '文字颜色用RGB函数来指定。RGB的值用R（红），G（绿），B（蓝）三种颜色组合指定。\n         每个值都可以用0~255间的整数指定。', '/images/zhiku/TipsNO144-001.png', '/images/zhiku/TipsNO144-002.png', '', '', '', '(设置表头的字体颜色)', '(设置文字颜色为红色)', '2017-11-30 14:04:59', null, null, '[{\"title\":\"具有代表性的颜色\",\"heads\":[\"颜色\",\"R\",\"G\",\"B\"],\"rows\":[[\"黑色\",\"0\",\"0\",\"0\"],[\"蓝色\",\"0\",\"0\",\"255\"],[\"绿色\",\"0\",\"255\",\"0\"],[\"青色\",\"0\",\"255\",\"255\"],[\"红色\",\"255\",\"0\",\"0\"],[\"深红\",\"255\",\"0\",\"255\"],[\"黄色\",\"255\",\"255\",\"0\"],[\"白色\",\"255\",\"255\",\"255\"]]}]');
INSERT INTO `t_tips` VALUES ('145', '145', '使单元格内一部分文字有颜色', 'Characters属性', '一使用Characters属性，能指定单元格内字符串的一部分字体的设定。变量Start,指定设定文字的开始位置。变量Length,指定字符串。', 'Sub Sample145_1()@         With Range(\"C2\")@         <cite>##对单元格C2的处理</cite>@         .Characters(Len(.Value) - 1, 2) _@         .Font.Color = RGB(255, 0, 0)@         <cite>##从最后的文字第1个开始设定指定2个文字字体颜色[红]</cite>@    End Sub', '这里，单元格C2被设定字符串的最后2个文字([10月4日现在]的[现在]的字体变成[红])。\n        Len函数，取得指定字符串的长度。因为指定最后2个字，长度从-1开始实行，从那里对2个字使用Color属性，指定颜色为[红]。', '/images/zhiku/TipsNO145-001.png', '/images/zhiku/TipsNO145-002.png', '用Excel的机能实行', '这个处理，用Excel的机能，成为单元格作为编辑方法部分地选择字符串格式设定的操作同样的处理。', '', '([10月4日现在]的[现在]的文字设定格式)', '([现在]的文字字体变[红])', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('146', '146', '指定单元格内的文字的纵/横位置', 'VerticalAlignment属性\\HorizontalAlignment属性', '使用VerticalAlignment属性单元格内的文字的纵位置，使用HorizontalAlignment属性，单元格的横位置，能分别指定。', 'Sub Sample146_1()@         With Range(\"A1\")@         <cite>#对单元格A1的处理</cite>@             .VerticalAlignment = xlCenter@             <cite>#纵位置设置中心对齐</cite>@             .HorizontalAlignment = xlCenter@             <cite> #横位置设置中心对齐</cite>@        End With@    End Sub', '消划线这里，表的头部被入力单元格A1的文字的配置，纵/横中心对齐。\n        还有，VerticalAlignment属性指定值，HorizontalAlignment属性指定值，各自按照下面来设定。', '/images/zhiku/TipsNO146-001.png', '/images/zhiku/TipsNO146-002.png', '', '', '', '(设定单元格A1的文字的配置)', '(设定单元格A1的文字纵/横位置中心对齐)', '2017-11-30 14:04:59', null, null, '[{\"title\":\"HorizontalAlignment属性设定值\",\"heads\":[\"常数\",\"说明\"],\"rows\":[[\"xlCenter\",\"中心对齐\"],[\"xlDistributed\",\"均等对齐\"],[\"xIUnderlineStyleSingleAccounting\",\"下划线（会计）\"],[\"xlJustify\",\"两端对齐\"],[\"xlLeft\",\"居左\"],[\"xlRight\",\"居右\"]]}]');
INSERT INTO `t_tips` VALUES ('147', '147', '单元格内文字均等分割，并增加前后空格', 'AddIndent属性', '使用AddIndent的属性，能够实现单元格内文字的均等分割，前后空格的插入。还可对纵向，横向位置的设定。', 'Sub Sample147_1()@         with Range(\"C3:C13\")@             <cite>##对单元格的C3～C13进行处理</cite>@             .HorizontalAlignment = xlDistributed@             <cite>##文字均等分割的横坐标位置进行设定</cite>@             #.AddIndent = True@             <cite>##加入前后空格</cite>@        #End with@    End Sub', '这里，要对【拼音】这一栏的值进行处理。使用HorizontalAlignment对文字配置的纵向位置进行指定。关于HorizontalAlignment的指定，请参照Tips146。', '/images/zhiku/TipsNO147-001.png', '/images/zhiku/TipsNO147-002.png', '关于纵向位置的指定', '均等分割的和前后空格的处理，能够对纵向列的文字进行设置。但是，这个时候的文字方向必须是纵向的', '', '([拼音]这个一列设定)', '([拼音]这一列均等分割并且增加前后空格)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('148', '148', '单元格内文字自动换行表示', 'WrapText属性', '使用WrapText属性，能够将单元格内的文字自动换行表示。为了能够使字符串表示，行的高度会自动进行调整。', 'Sub Sample148_1()@         Range(\"D4:D12\").WrapText = True@         <cite>##单元格D4～D12内的字符串全部自动换行表示</cite>@    End Sub', '表示在[Memo]栏里所有的字符串。为了能使长字符串在单元格中更方便的表达。但是，因为行的高度会自动调整，会破坏已经设置好的格式，所以在这里最好还是缩小单元格里的文字。缩小文字表示全部字符串的方法，请参照Tios146的例子。', '/images/zhiku/TipsNO148-001.png', '/images/zhiku/TipsNO148-002.png', '转换设定', '要转换实行编码，可以将全体的字符串自动换行设定为On/Off，使用Not运算符。请把下面的例子作为参考，每次实行编码，用On/Off进行转换。', '', '(「Memo」栏的字符串表示出表格外了)', '(因为字符串自动换行所以字符串没有表示到单元格外)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('149', '149', '缩小单元格内文字并完全表示', 'ShrinkToFit属性', '使用ShrinkToFit属性可以将单元格内字符串缩小并完全表示出来。', 'Sub Sample149_1()@         Range(\"D4:D12\").ShrinkToFit = True@         <cite># #将D4~D12单元格字符串缩小表示</cite>@    End Sub', '在这里，将【Memo】栏的字符串缩小使其完全表示出来，对于字符串的长度大于单元格的幅度时，这个功能非常方便。\n        另外，设置WrapText属性可以使ShrinkToFit属性失效。', '/images/zhiku/TipsNO149-001.png', '/images/zhiku/TipsNO149-002.png', '转换设定', '每次在代码执行时，将字符串缩小使其完全显示设置的On/Off可以使用Not运算符，参考下面的示例，设定切换On/Off 取消字符串缩小。', '', '[Memo]栏溢出字符串', '将字符串缩小使文字表示在列内', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('150', '150', '改变单元格内字符串角度', 'Orientation属性', '使用Orientation属性能够改变单元格内字符串的角度。设定竖写也是可以实现的。', 'Sub Sample150_1()@         Range(\"A3:D3\").Orientation = 30@         <cite>#设置A3~D3单元格字符串角度为30度</cite>@    End Sub', '在这里，设置表的标题行的字符串的角度。设置一个好的角度使表看起来更加好看。\n         另外，对于Orientaion属性值的设置，在-90~90之间，具体参照下面常量。', '/images/zhiku/TipsNO150-001.png', '/images/zhiku/TipsNO150-002.png', '', '', '', '(设置表头文字角度)', '(设置角度为30度)', '2017-11-30 14:04:59', null, null, '[{\"title\":\"设置Orientation属性的常量\",\"heads\":[\"常量\",\"说明\"],\"rows\":[[\"xlDownward\",\"右下方（与值为-90相同）\"],[\"xlHorizontal\",\"横写（默认值）\"],[\"xlUpward\",\"右上方（与值为90相同）\"],[\"xlVertical\",\"竖写\"]]}]');
INSERT INTO `t_tips` VALUES ('151', '151', '将字符串分割到多个单元格', 'Justify方法', '使用Justify方法从单元格中将溢出的字符串进行分割。现在单元格内字符数的为标准，将超出的部分进行分割。执行Justify方法，不论下面的空行是否为空，都会显示单元格上面确认的信息。', 'Sub Sample151_1()@         Application.DisplayAlerts = False@         <cite># #设置不显示警告信息</cite>@         Range(\"A1\").Justify@         <cite># #分割A1单元格的值</cite>@         Application.DisplayAlerts = True@         <cite># #设置显示警告信息</cite>@    End Sub', '在这里，从标题的字符串从单元格中超出了，将其分割到下一个单元格中。这是不显示警告信息，对DisplayAlerts属性设定False进行处理。\n        在DisplayAlerts属性执行后进行剩余其他设置。最后将DisplayAlerts的值设为True，显示警告信息。', '/images/zhiku/TipsNO151-001.png', '/images/zhiku/TipsNO151-002.png', '', '', '', '(A1单元格字符串溢出)', '(分割字符串)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('152', '152', '设置单元格的表示形式', 'NumberFormat属性/NumberFormatLocal属性', '设置单元格的表示形式是利用NumberFormat属性，NumberFormatLocal属性。NumberFormatLocal属性是，代码运行时使用一行该属性代码设置表示形式。比如，NumberFormat属性是[NumberFormat = \"Generel\"],NumberFormatLocal属性是[NumberFormatLocal = \"标准\"]，表示形式恢复到初始状态。', 'Sub Sample152_1()@         Range(\"A4:A12\").NumberFormat = \"ggge\" \"年\" \"m\" \"月\" \"d\" \"日\" \"\"@         <cite>##设置单元格A4~A12的日期数据年号的表示方式</cite>@         Range(\"B4:B12\").NumberFormatLocal = \"#,###\" \"(含税)\" \"\"　　@         <cite>##设置单元格B4~B12的值进行行区分文字[含税]的表示方式</cite>@    End Sub', '\'这里是每行是设置[日期]栏的表示方式，[金钱]栏的分隔方式和[含税]的文字字符串的表示方式。\n        \'而且，格式化设置主要的表示方法是为了方便下次使用。', '', '', '', '', '', '', '', '2017-11-30 14:04:59', null, null, '[{\"title\":\"字符串的格式符号和使用例子\",\"heads\":[\"格式符号\",\"意思\",\"使用例子\",\"结果显示\"],\"rows\":[[\"#\",\"一位的数字。指定格式的位数少于数值的位数时，不表示那个位数\",\"#,###\",\"12,345\"],[\"0\",\"一位的数字。指定格式的位数少于数值的位数时，表示那个位数\",\"000000\",\"012345\"],[\"绿色\",\"0\",\"255\",\"0\"],[\"青色\",\"0\",\"255\",\"255\"],[\"红色\",\"255\",\"0\",\"0\"],[\"\",\"逗号是在1000单位后使用\",\"#,\",\"12\"],[\"\",\"句号\",\"#.###.00\",\"12.345.00\"]]}]');
INSERT INTO `t_tips` VALUES ('153', '153', '参照单元格的线', 'Borders属性/LineStyle属性', '使用Borders属性，获得并设置单元格/单元格范围的线。获得线的位置，XlBordersIndex级能以定数指定，指定了省略的单元格，获得单元格范围内的线。同时，LineStyle属性，指定Borders object，设置线的种类。', '', 'Borders属性的变量，指定获得线的地方。同时，指定线的种类LineStyle属性。各自的值，如下。\n        \'而且，格式化设置主要的表示方法是为了方便下次使用。', '', '', '上述的定数', '上述的定数，指定xlGray25、xlGray50、xlGray75、xlAutomatic。', '', '', '', '2017-11-30 14:04:59', null, null, '[{\"title\":\"指定为参数XlBordersIndex的XIBordersIndex级的定数\",\"heads\":[\"定数\",\"值\",\"说明\"],\"rows\":[[\"xlDiagonalDown\",\"5\",\"范围内的各单元格左上角到右下角的线\"],[\"xlDiagonalUp\",\"6\",\"范围内的各单元格左上角到右下角的线\"],[\"xlEdgeBottom\",\"9\",\"范围内下的线\"],[\"xlEdgeLeft\",\"7\",\"范围内左边的线\"],[\"xlEdgRight\",\"10\",\"范围内右边的线\"],[\"xlEdgeTop\",\"8\",\"范围内上侧的线\"],[\"xlinsideHorizontal\",\"12\",\"除去范围外、范围内全部的单元格的水平线\"]]},{\"title\":\"指定LineStyle属性XlLineStyle级的定数\",\"heads\":[\"xlContinuous\",\"1\",\"实现\"],\"rows\":[[\"xlDash\",\"-4115\",\"虚线\"],[\"xlDashDot\",\"4\",\"—点锁链线\"],[\"xlDashDotDot\",\"5\",\"二点锁链线\"],[\"xlDot\",\"-4118\",\"点线\"],[\"xlDouble\",\"-4119\",\"2条线\"],[\"xlLineStyleNone\",\"-4058\",\"没有线\"],[\"xlSlantDashDot\",\"13\",\"斜虚线\"]]}]');
INSERT INTO `t_tips` VALUES ('154', '154', '设置线的粗细', 'Weight属性', '利用Weight 属性取得线的粗细，并设置。', 'Sub Sample154_1()@         With  Range(\"A3\").CurrentRegion.Resize(1)@         <cite>#  对单元格A3的表的第一行的处理</cite>@               .Borders(xlEdgeBottom).Weight  =  xlMedium@                <cite>#  设置下端的线的粗细</cite>@         End  With@    End Sub', '利用CurrentRegion属性，取得所有的表后，Resize属性对于开头第一行的对象。而这个格范围的下端的线加粗。', '/images/zhiku/TipsNO154-001.png', '/images/zhiku/TipsNO154-002.png', '', '', '', '( 设置标题行的下端的线)', '(设置成粗线)', '2017-11-30 14:04:59', null, null, '[{\"title\":\"Weight属性指定的值，如下列所示。\",\"heads\":[\"常数\",\"值\",\"说明\"],\"rows\":[[\"xlHairline\",\"1\",\"细线（最细的线）\"],[\"xlMedium\",\"-4054\",\"普通\"],[\"xlThick\",\"4\",\"粗线（最粗的线）\"],[\"xlThin\",\"2\",\"极细\"]]}]');
INSERT INTO `t_tips` VALUES ('155', '155', '线的线类/粗细/颜色的归纳设定', 'BorderAround方法', '使用BorderAround方法、可以设定线的类别，粗细，颜色。线的LineStyle，Weight 、Color的各属性，作为参数可以指定。再者，参数LineStyle和Weight不能同时指定。', 'Sub Sample155()@         Range(\"A3\").CurrentRegion.BorderAround _@            LineStyle : = xlDash, Color : = RGB(255,0,0)@            <cite>##把包含单元格A3的范围设定成[虚线][红色]的线</cite>@    End Sub', '这里指定xlDash为参数LineStyle设定「虚线」，参数Color通过RGB函数指定成红色。RGB函数是以R(红)，G(绿色)，B(青)的3色的比例表示颜色的函数。指定的值是0到255之间的整数。', '/images/zhiku/TipsNO155-001.png', '/images/zhiku/TipsNO155-002.png', '方便的使用方法', '线的设定是想办法为了做成易懂的表。BorderAround方法是处理指定的表格范围的周围的方法。反过来说，有关表格范围里面是不能设定的。但是，画表格周围和表格内部不同的线，不是很好的吗。\n            \n            那样的情况，首先指定表内部的线,最后如果使用BorderAround方法设定表格周围的线，处理易懂地效率性的。', '', '(设定线)', '(线被设定了)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('156', '156', '消去sheet的全部线', 'Border属性/LineStyle属性', 'Border属性是省略参数，表示指定范围的全部线。指定LineStyle属性为xlNone,可以消去线。', 'Sub Sample156_1()@         Range(\"A3\").CurrentRegion.Borders.LineStyle = xlNone@         <cite>##从单元格A3开始表格的线全部消去</cite>@    End Sub', '消去全部线，省略Border属性的参数，把所有的线作为对象，通过LineStyle属性指定线的种类。由于这里是消去线，指定值为xlNone。由于关于线的消除，Delete等的方法没有，请注意。进行 [没有线]的设定。', '/images/zhiku/TipsNO156-001.png', '/images/zhiku/TipsNO156-002.png', '', '', '', '(表格被线画出)', '(线被消除了)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('157', '157', '设定单元格主题颜色', 'ThemeColor属性', '使用ThemeColor属性、对单元格的全面涂抹的颜色可以指定主题颜色。参数设定的值，指定定数。', 'Sub Sample157_1()@         Range(\"A3\").CurrentRegion.Resize(1).Interior.ThemeColor _@            = xlThemeColorAccent3@         <cite>##从单元格A3的表格第一行开始设定主题颜色的「突出点3」</cite>@    End Sub', '通过CurrentRegion属性取得表格全体后,通过Resize属性只有第一行设定为对象。并且对于网格范围，通过ThemeColor属性来设定主题颜色。\n         像下面那样，设定ThemeColor属性的值。', '/images/zhiku/TipsNO157-001.png', '/images/zhiku/TipsNO157-002.png', '调色板第二行及以下行的颜色的设定', '调色板的第一行的颜色是主题颜色的基本色，第2行及以下行的颜色是可以通过ThemeColor属性和TintAndShade属性的组合来取得。第2行及以下行的颜色是在调色板上鼠标指向一致的表示说明。[白+基本色60%]的方法被表示。基本色通过ThemeColor属性指定，百分比部分通过TintAndShade属性指定。\n            前面的例子是「TintAndShade=0.6」。表示[黑+基本色25%]的场合是[TintAndShade=-0.25],[黑]的场合是通过[-]符号指定。', '', '(设定表格标题的主题颜色)', '(主题颜色被设定了)', '2017-11-30 14:04:59', null, null, '[{\"title\":\"设定ThemeColor属性，XlThemeColor类の定数\",\"heads\":[\"定数\",\"值\",\"说明（既定颜色）\"],\"rows\":[[\"xlThemeColordark1\",\"1\",\"背景１（白）\"],[\"xlThemeColorLight1\",\"2\",\"文本１（黑）\"],[\"xlThemeColordark2\",\"3\",\"背景２（ベージュ）\"],[\"xlThemeColorLight2\",\"4\",\"文本２（深青）\"],[\"xlThemeColorAccent1\",\"5\",\"突出点１（青）\"],[\"xlThemeColorAccent2\",\"6\",\"突出点ト２（红）\"],[\"xlThemeColorAccent3\",\"7\",\"突出点３（茶青色）\"],[\"xlThemeColorAccent4\",\"8\",\"突出点４（紫）\"],[\"xlThemeColorAccent5\",\"9\",\"突出点５（水）\"],[\"xlThemeColorAccent6\",\"10\",\"突出点６（橘黄色）\"]]}]');
INSERT INTO `t_tips` VALUES ('158', '158', '设定单元格影线', 'Pattern属性', '使用Pattern属性，使用xlPattern类的定数，可以进行对象内部影线的设定。', '', '像下面那样，设定Pattern属性的值。', '', '', '', '', '', '', '', '2017-11-30 14:04:59', null, null, '[{\"title\":\"设定ThemeColor属性。XlThemeColor类的定数\",\"heads\":[\"名字\",\"值\",\"说明\"],\"rows\":[[\"xlPatternAutomatic\",\"-4105\",\"自动\"],[\"xlPatternChecker\",\"9\",\"检查器\"],[\"xlPatternCrissCross\",\"16\",\"十字线\"],[\"xlPatternDown\",\"-4142\",\"从左上到右下的深的对角线\"],[\"xlPatternGray16\",\"17\",\"16%灰色\"],[\"xlPatternGray25\",\"-4142\",\"25%灰色\"],[\"xlPatternGray8\",\"18\",\"8%灰色\"],[\"xlPatternGrid\",\"15\",\"网格\"],[\"xlPatternHorizontal\",\"-4044\",\"深的横线\"],[\"xlPatternLightDown\",\"13\",\"从左上到右下的明亮的对角线\"],[\"xlPatternLightHorizontal\",\"11\",\"明亮的横线\"],[\"xlPatternLightUp\",\"14\",\"从左下到右上的明亮的对角线\"],[\"xlPatternLightVertical\",\"12\",\"明亮的横线\"],[\"xlPatternGray75\",\"-4042\",\"75%灰色\"],[\"xlPatternNone\",\"-4058\",\"没有图形\"],[\"xlPatternSemiGray75\",\"10\",\"75％深的波纹\"],[\"xlPatternSolid\",\"1\",\"纯色\"],[\"xlPatternUp\",\"-4162\",\"从左下到右上的深的对角线\"],[\"xlPatternVertical\",\"-4166\",\"深的纵线\"]]}]');
INSERT INTO `t_tips` VALUES ('159', '159', '清除格式', 'ClearFormat方法', '使用ClearFormat方法、能清除格式。单元格的数据不变，只清除字体的颜色，线，背景色等的格式。', 'Sub Sample159_1()@         Range(\"A3\").CurrentRegion.ClearFormats@         <cite>##清除从表格A3开始表格的格式</cite>@    End Sub', '这里使用CurrentRegion属性，取得包含单元格A3的活动单元领域。这个表示表格全体。然后，通过ClearFormats方法把取得的表格全体的格式消除。', '/images/zhiku/TipsNO159-001.png', '/images/zhiku/TipsNO159-002.png', '活动单元领域', '活动单元格指的是空白单元包围的单元范围。做成表的时候，标题和小标题之间插入１行，表自身可以预先取得活动单元领域，记述编码的时候CurrentRegion属性一个就行，非常便利。', '', '(各种各样的格式被设定)', '(所有的格式被消除)', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('160', '160', '获取现在的日期/时间', 'Date函数/Time函数/Now函数', 'Data函数是现在的日期，Time函数是现在的时间，Now函数是同时获取现在的日期哈时间。取得的值，是系统的当前日期和时间。', 'Sub Sample160_1()@        MsgBox \"日期 : \" &amp; Date &amp; vbCrLf _@            &amp; \"時刻 : \"&amp; Time &amp; vbCrLf _@            &amp; \"日期和时间: \" &amp; Now@            <cite>##获取系统的日期，时间，日期和时间</cite>@    End Sub', 'Data函数是现在的日期，Time函数是现在的时间，Now函数是同时获取现在的日期哈时间。根据用途选择使用相应的函数，但是，Time函数没有日期的信息，计算日期的时候，请选择Now函数。', '/images/zhiku/TipsNO160-001.png', '/images/zhiku/TipsNO160-002.png', '日期和时间的设置', 'Date函数，Time函数，Now函数是获取值的函数。不可以对值设置。使用日期的声明，时间的声明来执行系统的日期和时间的设置。\n            \n            但是，自WindowsVista以后的OS，因为用户账户控制标准被设定，这些声明，变成错误。', '', '', '', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('161', '161', '分别获取年、月、日', 'Year函数/Month函数/Day函数', '从Year函数是“年份”、Month函数是“月份”、Day函数是“天”的日期的序列值中获取日期的字符串。', 'Sub Sample161()@        MsgBox \"年: \" &amp; Year(Range(\"A2\").Value) &amp; vbCrLf _@            &amp; \"月 : \"&amp; Month(Range(\"A2\").Value) &amp; vbCrLf _@            &amp; \"日 : \" &amp; Day(Range(\"A2\").Value)@        <cite>#从单元格A2中获取[年][月][日]</cite>@    End Sub', '这里，从单元格A2中输入的值中，分别取得 [年][月][日]。\n                如果指定了日期的date参数，是能够识别的字符串形式也可以。', '/images/zhiku/TipsNO161-001.png', '/images/zhiku/TipsNO161-002.png', '可以识别的日期字符串', '如果是日期的表示形式有的形式，可以作为日期被识别。\n                还有用“4月20日”全角字符串输入也会被识别，不过“4yue20ri”不会被识别。\n                想要妥善处理实现使用IsDate函数检查一下就可以了。IsDate函数请参照Tips125。', '', '', '', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('162', '162', '获取时、分、秒', 'Hour函数/Minute函数/Second函数', '从Hour函数是“小时”、Minute函数是“分钟”、Second函数是“秒”显示串的值获取时间的字符串。', 'Sub Sample162()@        MsgBox \"时 : \" &amp; Hour(Range(\"A2\").Value) &amp; vbCrLf _@            &amp; \"分 : \"&amp; Minute(Range(\"A2\").Value) &amp; vbCrLf _@            &amp; \"秒 : \" &amp; Second(Range(\"A2\").Value)@        <cite>#从单元格A2中获取[时][分][秒]</cite>@    End Sub', '这里，从单元格A2中输入的值中，分别取得 [时][分][秒]。\n                如果指定了日期的time参数，是能够识别的字符串形式也可以。', '/images/zhiku/TipsNO162-001.png', '/images/zhiku/TipsNO162-002.png', '表示时间的字符串', '如果是时刻的表示形式有的形式，可以作为时间被识别。\n                或者单元格中输入的的全角字符串会被识别为“14时16分”。\n                然后这种情况“秒”取得的值为“0”。', '', '', '', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('163', '163', '获取星期', 'Weekday函数/WeekdayName函数', 'Weekday函数，从表示日期的序列值取得表示星期的数值。\n                通过参数firstdayofweek可以指定星期的开始值。\n            \n                WeekdayName函数，从指定的参数weekday的数值，取得星期的字符串。\n                指定参数abbreviate的值为True、返回短的星期记载形式。或者使用参数指定星期的开始值。', 'Sub Sample163()@        MsgBox　Range(\"A2\").Value &amp; \"は\" &amp; _@            WeekdayName(Weekday(Range(\"A2\").Value)) &amp; \"  です\"@        <cite>#用Weekday函数取得日期中星期的表示值</cite>@        <cite>#用WeekdayName函数更换星期的名</cite>@    End Sub', '这里，单元格A2的值通过WeekDay函数和WeekdayName函数组合获取星期。\n            \n            \n                WeekDay函数和WeekdayName函数的参数firstdayofweek指定的值如下。', '', '', '', '', '', '', '', '2017-11-30 14:04:59', null, null, '[{\"title\":\"指定参数firstdayofweek的常量\",\"heads\":[\"常量\",\"值\",\"意思\"],\"rows\":[[\"vbUseSystem\",\"0\",\"使用各国语言对应的(NLS)API的设定值\"],[\"vbSunday\",\"1\",\"星期日(规定值)\"],[\"vbMonday\",\"2\",\"星期一\"],[\"vbTuesday\",\"3\",\"星期二\"],[\"vbWendnesday\",\"4\",\"星期三\"],[\"vbThursday\",\"5\",\"星期四\"],[\"vbFriday\",\"6\",\"星期五\"],[\"vbSaturday\",\"7\",\"星期六\"]]}]');
INSERT INTO `t_tips` VALUES ('164', '164', '改变日期、时间字符串的序列值', 'DateValue函数/TimeValue函数', '从Hour函数是“小时”、Minute函数是“分钟”、Second函数是“秒”显示串的值获取时间的字符串。', 'Sub Sample164()@        MsgBox \"日期 : \" &amp; DateValue(Range(\"A2\").Value) &amp; vbCrLf _@            &amp; \"时间 : \"&amp; TimeValue(Range(\"B2\").Value)@        <cite>#获取单元格A2输入的日期值、</cite>@        <cite>#单元格B2输入的时间值</cite>@    End Sub', '单元格A2表示日期的字符串、单元格B2表示输入时间的字符串。\n                这些单元格的值，用取得的序列值来表示。\n                因为取得作为序列值的表示，表示结果锁着表示形式而变化。', '/images/zhiku/TipsNO164-001.png', '/images/zhiku/TipsNO164-002.png', '', '', '', '单元格A2为日期、B2为输入的时间', '日期和时间被表示', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('165', '165', '获取年月日混合的日期数据', 'DateSerial函数', 'DateSerial函数，从分别指定了“年”“月”“日”参数数据中，返回日期的序列值。\n                然后，被指定的值，例如指定month“13”，就会事先将参数year的值加1，参数month的值作为1来处理。', 'Sub Sample165()@        MsgBox DateSerial(Range(\"A2\").Value _	<cite>#获取年</cite>@            , Range(\"B2\").Value _	<cite>#获取月</cite>@            , Range(\"C2\").Value)	<cite>#获取日</cite>@        <cite>#分别取得日期的值生成数据</cite>@    End Sub', '这里，分别输入了年月日的数据，生成日期的数据。\n                这么做能够对日期分开处理执行获取“30日后的日期“。\n                还可以这样，例如\"用DateSerial(2017,3,31+3)，\n                变成准确计算下个月的日期\"，返回“2017/4/3”。', '/images/zhiku/TipsNO165-001.png', '/images/zhiku/TipsNO165-002.png', '获取10天后的日期', '使用DateSerial函数获取十天后的日期，像下面这个例子所做。\n                这个例子做了单纯的加法计算。', 'Sub Test165_2()@        MsgBox \"2017/4/13的１０天后:\" _@        &amp; DateSerial(2017,4,13+10)@    End Sub', '', '', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('166', '166', '根据数值获取月份名称', 'MonthName函数', 'MonthName函数，从1～12的数值中返回月份名称。指定参数month。\n                如果指定参数abbreviate的值为True，那么返回的是短的月名。', 'Sub Sample166()@        MsgBox\"月名:\" &amp; MonthName(Range(\"A2\").Value) &amp; vbLf _@        &amp; \"短月名:\" &amp; MonthName(Range(\"A2\").Value,True)@        <cite>#从单元格A2中的值获取月名</cite>@    End Sub', '这里，从单元格A2中取得数值表示月名。\n                然后，如果是指定1～12以外的值，这会发生语法错误。', '/images/zhiku/TipsNO166-001.png', '/images/zhiku/TipsNO166-002.png', '短月名', '短月名是Excel的英文环境下使用的。\n                用英文表示，例如月名8月\"August\"，\n                短月名\"Aug\"来表示（日历上面应该可以见到）这个\"Aug\"表示短月名。\n                日本语环境的情况，只有\"8\"显示。', '', '从单元格获取月名', '月名和短月名被表示', '2017-11-30 14:04:59', null, null, '');
INSERT INTO `t_tips` VALUES ('167', '167', '获取时分秒组合的数据', 'TimeSerial函数', 'TimeSerial函数，通过\"时\"\"分\"\"秒\"各自的值返回时间的序列值。\n                然后，指定值、例如指定参数minute的值为\"65\",参数hour就会事先加1,参数minute的值被处理为5。', 'Sub Sample167()@        MsgBox TimeSerial(Range(\"A2\").Value _   <cite>#获取小时</cite>@        ,Range(\"B2\").Value _    <cite>#获取分钟</cite>@        ,Range(\"C2\").Value)    <cite>#获取秒</cite>@    <cite>#分别取值生成时间数据</cite>@    End Sub', '这里，分别输入\"时\"\"分\"\"秒\"生成时间数据，通过信息框表示。\n            \n            \n                有必要注意的是，要分别指定TimeSerial的参数，指定的值如下。', '/images/zhiku/TipsNO167-001.png', '/images/zhiku/TipsNO167-002.png', '', '', '', '', '', '2017-11-30 14:04:59', null, null, '[{\"title\":\"指定参数TimeSerial的值\",\"heads\":[\"参数\",\"值\"],\"rows\":[[\"hour\",\"0~23\"],[\"minute\",\"0~59\"],[\"second\",\"0~59\"]]}]');
INSERT INTO `t_tips` VALUES ('168', '168', '计算日期和时间的间隔', 'DateDiff函数', 'DateDiff函数，返回指定的开始日和终了日的时间间隔。\n                参数interval为表示时间单位的字符串。\n                根据参数date1，date2，计算指定的两个日期（开始日和终了日）的时间间隔。\n                根据参数firstdayofweek指定星期常量的开始值。\n                指定的参数firstweekofyear，表示年度的第一个星期。', 'Sub Sample168()@        MsgBox Range(\"A2\").Value &amp; \"～\" &amp; Range(\"B2\").Value _@        &amp; \"的期间是\" &amp; DateDiff(\"d\",Range(\"A2\").Value _@        ,Range(\"B2\").Value &amp; \"日\"@    <cite>#表示单元格A2和B2输入的日期期间（天数）</cite>@    End Sub', '指定DateDiff函数的参数的值和常量，如下表中所示。\n                指定参数firstdayofweek的值请参照Tips163。\n            \n            \n                另外，要注意的是DateDiff函数只是单纯的做减年操作。', '', '', '', '', '', '', '', '2017-11-30 14:05:00', null, null, '[{\"title\":\"指定参数interval的值\",\"heads\":[\"内容\",\"意味\",\"内容\",\"意味\"],\"rows\":[[\"yyyy\",\"年\",\"w\",\"一周的天数\"],[\"q\",\"季\",\"ww\",\"周\"],[\"m\",\"月\",\"h\",\"时\"],[\"y\",\"一年的天数\",\"n\",\"分\"],[\"d\",\"日\",\"s\",\"秒\"]]},{\"title\":\"设置参数firstweekofyear的常量\",\"heads\":[\"定数\",\"値\",\"内容\"],\"rows\":[[\"vbUseSystem\",\"0\",\"使用NLSAPI设置\"],[\"vbFirstJan1\",\"1\",\"从包含1月1日的星期开始（缺省值）\"],[\"vbFirstFourDays\",\"2\",\"从第一个其大半个星期在新的一年的一周开始\"],[\"vbFirstFullWeek\",\"3\",\"从第一个无跨年度的星期开始\"]]}]');
INSERT INTO `t_tips` VALUES ('169', '169', '获取从日期开始指定的部分', 'DatePart函数', 'DatePart函数，由参数date指定了的序列值，返回根据参数interval指定的\"月\"\"日\"的数据。', 'Sub Sample169()@        msgBox DatePart(\"M\", Range(\"A2\").Value) &amp; \"月\" &amp; vbLf _@        &amp; DatePart(\"d\", Range(\"A2\").Value) &amp; \"日\"@        <cite>#从单元格A2中分别获取月和日的值</cite>@    End Sub', '指定参数Interval的值，和指定参数firstweekofyear的值，请参照Tips168。', '/images/zhiku/TipsNO169-001.png', '/images/zhiku/TipsNO169-002.png', '获取10天后的日期', '\"周\"单位和\"周日\"单位是不同的，有周的计算标准。\n                如果是以\"周\"为单位的情况，计算的是参数date1和date2之间有几个\"星期日\"。\n                对应的以\"周日\"为单位的情况，计算的是参数date1和date2之间有几天。', '', '', '', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('170', '170', '通过时间的加减运算获取日期和时间', 'DateAdd函数', 'DateAdd函数，指定了日期date参数，\n                以指定的参数interval为单位，对指定的参数number做加减运算。', 'Sub Sample170()@        MsgBox Range(\"A2\").Value &amp; \"の30日后:\" _@            &amp; DateAdd(\"d\",30,Range(\"A2\").Value)@        <cite>#表示单元格A2中日期的30天后的日期</cite>@    End Sub', '通过下列的参数指定参数interval的值。\n                指定参数firstweekofyear的值，请参照Tips168。', '/images/zhiku/TipsNO170-001.png', '/images/zhiku/TipsNO170-002.png', '', '', '', '', '', '2017-11-30 14:05:00', null, null, '[{\"title\":\"指定参数interval的值\",\"heads\":[\"内容\",\"意味\",\"内容\",\"意味\"],\"rows\":[[\"yyyy\",\"年\",\"w\",\"一周的天数\"],[\"q\",\"季\",\"ww\",\"周\"],[\"m\",\"月\",\"h\",\"时\"],[\"y\",\"一年的天数\",\"n\",\"分\"],[\"d\",\"日\",\"s\",\"秒\"]]}]');
INSERT INTO `t_tips` VALUES ('171', '171', '获取走过的秒数', 'Timer函数', 'Timer函数，返回从午前0时开始经过了的时间。以Single类型的秒数表示。\n            \n	            因为取得的是凌晨0点开始经过的时间，所以在想要取得经过凌晨0点的经过秒数的时候，\n                则有必要将凌晨0点前后的时间分别来计算。\n            \n	            经过凌晨0点的时候，Timer函数将会返回凌晨0点以后经过的秒数与86400(一天的秒数)相减的结果。', 'Sub Sample171()@        Dim t As Double@        Dim I As Long, j As Long@        t = Timer   <cite>#获取开始的时间</cite>@        For i = 1 To 500    <cite>#分开处理500行</cite>@            For j = 1 To 10 <cite>#分开处理10列</cite>@                Cells(i, j).Value = i * j   <cite>#单元格输入值</cite>@            Next@        Next@        MsgBox Timer - t &amp; \"秒\"  <cite>#显示处理结果</cite>@    End Sub', '测算从处理单元格输入结果的时候开始花费的时间，就是取得变量t的时间。\n                如果处理终止，则终止的时间减去开始的时间，就可以获取处理时间。\n                在这里，只是输入500行和10列单元格的行号和列号相乘的计算结果，并没有其他的含义。', '/images/zhiku/TipsNO171-001.png', '/images/zhiku/TipsNO171-002.png', '', '', '', '', '', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('172', '172', '设置日期、时间的格式', 'FormatDateTime函数', 'FormatDate函数，指定参数Date的序列值，返回设定的指定参数NameFormat的格式的值。', 'Sub Sample172()@        Dim temp AS Double@        temp = Range(\"A2\").Value@        MsgBox \"日期:\" &amp; FormatDateTime(temp, vbLongDate) &amp; vbCrLf _@            &amp; \"时间:\" &amp; FormatDateTime(temp, vbLongTime) &amp; vbCrLf _@            &amp; \"日期和时间:\" &amp; FormatDateTime(temp)@            <cite>#单元格A2的值赋给变量temp</cite>@            <cite>#显示\"日期\"\"时间\"\"日期和时间\"</cite>@    End Sub', '通过以下来设置参数NamedFormat的常量。', '/images/zhiku/TipsNO172-001.png', '/images/zhiku/TipsNO172-002.png', '', '', '', '', '', '2017-11-30 14:05:00', null, null, '[{\"title\":\"设置参数NamedFormat的常量\",\"heads\":[\"定数\",\"値\",\"説明\"],\"rows\":[[\"vbGeneraDate\",\"0\",\"日期和时间都显示。日期以短日期格式显示。时间以长时间格式显示\"],[\"vbLongDate\",\"1\",\"用计算机区域设置值中指定的长日期格式显示日期\"],[\"vbShortDate\",\"2\",\"用计算机区域设置值中指定的短日期格式显示日期\"],[\"vbLongTime\",\"3\",\"用计算机区域设置值中指定的时间格式显示时间\"],[\"vbShortTime\",\"4\",\"用24小时格式（hh:mm）显示时间\"]]}]');
INSERT INTO `t_tips` VALUES ('173', '173', '获取文字列的长度/位数', 'Len函数/LenB函数的语法', 'Len函数是向参数string返回所指定的文字列的长度的函数。\n                LenB函数是向参数string返回指定的文字列的位数的函数。', 'Sub Sample173( )@        MsgBox Len(Range(\"A2\").Value) &amp; \"文字\"    <cite>#表示A2单元格中文字的长度</cite>@    End Sub', '取得A2单元格已经入力的文字列的长度。\n                A2单元格的文字列虽然包含半角的数字、符号，但是Len函数不区别文字的半角与全角。', '/images/zhiku/TipsNO173-001.png', '/images/zhiku/TipsNO173-002.png', 'LENB工作表函数', 'LENB工作表函数与LenB函数名字相同，但是处理结果不同，这一点需要大家注意。\n                VBA的LenB函数中无论半角全角，都用两位来计算，但是在LENB工作表函数中，半角算作一位文字，全角算作两位文字。\n            \n            \n                下面的例子是在A2单元格中表示用VBA的LenB函数和LENB工作表函数分别取得的入力值。请分清两者的区别。', 'Sub Sample173_2()@        Range(\"B2\").Formula = _@        \"=LENB(A2)\"@        Range(\"B3\").Value = _@        LenB(Range(\"A2\").Value)@    End Sub', '取得单元格A2字符串的长度', '表示字符串的长度', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('174', '174', '从文字列的左边/右边取得一部分', 'Left函数/Right函数', 'Left函数是从参数String所指定的文字列的左侧，返回参数length所指定的文字个数的文字列的函数。\n                Right函数是从参数String所指定的文字列的右侧，返回参数length所指定的文字个数的文字列。\n                而且，也有函数名后加\"＄\"的Left$函数和Right$函数。这种函数的处理结果是用文字列类型返回值。', 'Sub Sample174( )@        Dim pos As Long@        Dim temp As String@        temp = Range (\"A2\").Value   <cite>#把A2单元格中的值代入到变量</cite>@        pos = InStr (Range (\"A2\").Value, \" \")   <cite>#获取半角空格的文字位置</cite>@        MsgBox　\"姓:\" &amp; Left (temp, pos - 1) &amp; vbLf _@            &amp; \"名 :\" &amp; Right (temp, Len (temp) - pos)@        <cite>#利用半角空格的位置，分别表示“姓”和“名”</cite>@    End Sub', '这里，从A2单元格中分别取得已经入力的“姓”和“名”。\n            \n            \n                姓名的“姓”与“名”中间有半角空格。\n                使用InStr函数，求得半角空格的位置，从文字列的左侧到半角空格为止为“姓”，\n                文字列的右侧开始到半角空格为止为“名”。', '/images/zhiku/TipsNO174-001.png', '/images/zhiku/TipsNO174-002.png', '', '', '', '从单元格A2的姓名中分别取得姓和名', '姓和名分别表示', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('175', '175', '取得指定的文字列', 'Mid函数', 'Mid函数是从参数string所指定的文字列，\n                参数start所指定的位置取得参数length所指定的文字个数的文字列的函数。\n                参数length被省略的情况，取得文字列的全部内容。', 'Sub Sample175( )@        Dim Pos1 As Long, pos2 As Long@        pos1 = InStr (Range(\"A2\").Value, \"市\")   <cite>#获取\"市\"的位置</cite>@        pos2 = InStr (Range(\"A2\").Value, \"区\")   <cite>#获取\"区\"的位置</cite>@        MsgBox\"区名:\" _@            &amp; Mid (Range(\"A2\").Value, pos1 + 1, pos2 - pos1)@        <cite>#从获取的\"市\"和\"区\"的位置获取区名，并表示出区名	</cite>@    End Sub', 'A2单元格所入力的住所信息中，只显示区名。\n                区名是从“市”之后的文字开始，到“区”之前的文字结束。\n                用InStr函数取得每一个字的位置，用Mid函数取得区名。', '/images/zhiku/TipsNO175-001.png', '/images/zhiku/TipsNO175-002.png', '', '', '', '往单元格A2里输入住址', '表示区名', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('176', '176', '获取文字代码对应的文字列', 'Chr函数', 'Chr函数是用参数code返回指定的文字code（ASCIIcode）所对应的文字列的函数。\n                用MsgBox函数插入改行和制表等控制文字时使用此函数。', 'Sub Sample176( )@        MsgBox Range(\"A2\").Value &amp; Chr(13) &amp; _@            Chr(9) &amp; Range(\"A3\"）.Value@        <cite>#在A2和A3单元格之间插入换行和制表</cite>@    End Sub', '这里，在MsgBox中指定换行和制表的控制文字。\n                像这样使用Chr函数，就可以使用控制文字。而且，控制文字还可以表示定数。\n                关于定数，请参考「Memo」。', '/images/zhiku/TipsNO176-001.png', '/images/zhiku/TipsNO176-002.png', '主要的控制文字和文字代码', '主要的控制文字和文字代码以及表示它们的定数如下。\n            \n            \n                \n                    \n                        值\n                        定数\n                        内容\n                    \n                    \n                        Chr(0)\n                        vbNullChar\n                        含有0的文字\n                    \n                    \n                        Chr(9)\n                        vbTab\n                        tab文字\n                    \n                    \n                        Chr(8)\n                        vbBack\n                        backspace文字\n                    \n                    \n                        Chr(10)\n                        vbLf\n                        linefield文字\n                    \n                    \n                        Chr(13)\n                        vbCr\n                        carriagereturn文字\n                    \n                    \n                        Chr(13)＋Chr(10)\n                        vbCrLf\n                        carriagereturn和linefield的组合', '', '住址分2部分输入', '将2个字符串加上换行和tab之后表示', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('177', '177', '获取文字列对应的文字代码', 'Asc函数', 'Asc函数是向参数string返回指定的文字的文字代码（ASCIIcode)的函数。\n                参数string指定为文字列的情况，返回头文字的文字代码。', 'Sub Sample177()@        MsgBox\"ASCII码:\" &amp; Asc(Range(\"A1\").Value)@        <cite>#表示A1单元格中第一个文字的文字代码</cite>@    End Sub', '这里，获取A1单元格中已经录入的文字的文字代码。\n                A1单元格中虽然已经录入了「ExcelVBA」的文字列，但是Asc函数只返回了头文字的文字代码。', '/images/zhiku/TipsNO177-001.png', '/images/zhiku/TipsNO177-002.png', '文字和文字代码', '主要的文字和文字代码如下所示。\n            \n            \n                \n                    \n                        文字\n                        文字代码\n                    \n                    \n                        A\n                        65\n                    \n                    \n                        Z\n                        90\n                    \n                    \n                        a\n                        97\n                    \n                    \n                        z\n                        122\n                    \n                    \n                        0\n                        48\n                    \n                    \n                        9\n                        57', '', '求得单元格A1的字符串ASCII码', '显示第一个字符的ASCII码', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('178', '178', '英文字母的大小写间的相互转换', 'LCase函数/UCase函数', 'LCase函数是将指定的文字列全部转换成小写字母再返回给参数string的函数。\n                UCase函数是将指定的文字列全部转换成大写字母再返回给参数string的函数。', 'Sub Sample178()@        MsgBox\"全是小写:\" &amp; LCase(Range(\"A1\"). Value) &amp; vbLf _@            &amp; \"全是大写:\" &amp; UCase(Range(\"A1\"). Value)@        <cite>#将A1单元格中录入的文字分别进行转换并表示出来	</cite>@    End Sub', '下面是对A1单元格中已经录入的「ExcelVBA」文字列进行的处理。\n                使用LCase函数和UCase函数将文字转换成大写和小写两种情况表示如下。', '/images/zhiku/TipsNO178-001.png', '/images/zhiku/TipsNO178-002.png', '将英文单词的首字母转换成大写字母', '只有首字母是大写的情况，要使用Proper方法。\n                Proper方法是与PROPER工作表函数进行相同处理的方法。\n                下面是只将A1单元格的文字列的首字母转换成大写字母的例子。', 'Sub Sample178_2()@        MsgBox \"只有首字母是大写:\" &amp; _@        Application.WorksheetFunction _@            .Proper(Range(\"A1\").Value)@    End Sub', '变换为全小写和全大写', '分别变换显示', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('179', '179', '文字种类的转换', 'StrConv函数', 'StrConv函数是将参数string所指定的文字列转换成参数conversion所指定的文字种类的函数。\n                能够转换的种类有半角，全角，大写，小写，平假名和片假名。\n            \n                参数LCID是表示国别信息的标识符。', 'Sub Sample179()@        MsgBox StrConv(Range(\"A1\").Value, vbUpperCase)@        <cite>#将A1单元格中的文字列转换成大写字母</cite>@    End Sub', '在参数conversion中设定的定量如下所示。\n                “转换成半角的大写字母”等设定可以指定多个进行设定。\n                这种情况可以将多个定数用“加号（+）”进行连接。\n                像「vbUpperCase（大写）」和「vbLowerCase(小写）」这种内容相互矛盾的情况不能指定。', '/images/zhiku/TipsNO179-001.png', '/images/zhiku/TipsNO179-002.png', '', '', '', '处理单元格A1的字符', '全转换成大写字母', '2017-11-30 14:05:00', null, null, '[{\"title\":\"参数conversion设定的定数\",\"heads\":[\"定数\",\"值\",\"说明\"],\"rows\":[[\"vbUpperCase\",\"1\",\"将文字列转换成大写字母\"],[\"vbLowerCase\",\"2\",\"将文字列转换成小写字母\"],[\"vbProperCase\",\"3\",\"将文字列的每个单词的首字母转换成大写字母\"],[\"vbWide*\",\"4\",\"将文字列的半角文字转换成全角文字\"],[\"vbNarrow*\",\"8\",\"将文字列的全角文字转换成半角文字\"],[\"vbKatakana**\",\"16\",\"将文字列的平假名转换成片假名\"],[\"vbHiragana**\",\"32\",\"将文字列的片假名转换成平假名\"],[\"vbUnicode\",\"64\",\"使用系统自带的代码页将文字列转换成Unicode\"],[\"vbFromUnicode\",\"128\",\"将文字列从Unicode转换成系统自带的代码页\"]]}]');
INSERT INTO `t_tips` VALUES ('180', '180', '消除文字列中包含的所有空白', 'LTrim函数/RTrim函数/Trim函数', 'LTrim函数是向参数string返回去除指定文字列的左端的空格之后的结果的函数；\n                RTrim函数是向参数string返回去除指定文字列的右端的空格之后的结果的函数；\n                Trim函数是返回去除文字列前后的空格之后的结果的函数。', 'Sub Sample180( )@        Dim str As String@        str = Range(\"A1\").Value   <cite>#以A1单元格中的值为对象进行处理</cite>@        MsgBox\"原字符串:[\" &amp; str &amp; \"]\" &amp; vbCrLf &amp; vbCrLf _@            &amp; \"LTrim:[\" &amp; LTrim(str) &amp; \"]\" &amp; vbCrLf _   <cite>#删除左侧</cite>@            &amp; \"RTrim:[\" &amp; RTrim(str) &amp; \"]\" &amp; vbCrLf _   <cite>#删除右侧</cite>@            &amp; \"Trim:[\" &amp; Trim(str) &amp; \"]\" 	<cite>#删除两侧</cite>@    Enｄ Sub', 'A1单元格中输入了「△Excel△VBA△」(△は全角空格）。对这个文字列进行处理。\n                请看好每一个处理分别消除了哪一个位置的空白。', '/images/zhiku/TipsNO180-001.png', '/images/zhiku/TipsNO180-002.png', '消除所有的空白', '消除文字列中的所有空白，要使用Replace函数。\n                下面的例子是消除A1单元格中的文字列的所有全角空格。', 'Sub Sample180_2()@        MsgBox \"Replace:[\" &amp; _@        Replace(Range(\"A1\".Value _@        ,\" \",\"\") &amp;\"]\"@    End Sub', '处理单元格A1的字符串', '按各种情况删除空白', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('181', '181', '将文字列置换成其他的文字列', 'Replace函数', 'Replace函数检索参数expression指定的文字列和参数find指定的文字、文字列，置换成参数replac\n                 中指定的文字、文字列。参数count可以指定置换的次数。而且，参数compare可以指定表示文字列比较模\n                 式的定数。', 'Sub Sample181()@        Range(\"A2\").Value = Replace(Range(\"A2\").Value,\"A\",\"Z\"）  <cite>在单元格A2的文字列</cite>@                                                                 中，把“A\"置换成\"Z\"@    End Sub', '▼\n            Replace函数的返回值如下所示\n            \n                \n                    条件\n                    返回值\n                \n                \n                    对象文字列是0\n                    长度为0的文字列（\"\"）\n                \n                \n                    对象文字列是Null\n                    报错\n                \n                \n                    检索文字列的长度为0的文字列（\"\"）\n                    复制对象文字列\n                \n                \n                    置换文字列的长度为0的文字列（\"\"）\n                    消除检索文字列的全部内容\n                \n                \n                    置换数是0\n                    复制对象文字列', '/images/zhiku/TipsNO181-001.png', '/images/zhiku/TipsNO181-002.png', '', '', '', '将[A001]输入到单元格A1中', '将单元格A1的值中，[A]替换为[Z]', '2017-11-30 14:05:00', null, null, '[{\"title\":\"Replace函数的返回值如下所示\",\"heads\":[\"条件\",\"返回值\"],\"rows\":[[\"对象文字列是0\",\"长度为0的文字列（\\\"\\\"）\"],[\"对象文字列是Null\",\"报错\"],[\"检索文字列的长度为0的文字列（\\\"\\\"）\",\"复制对象文字列\"],[\"置换文字列的长度为0的文字列（\\\"\\\"）\",\"消除检索文字列的全部内容\"],[\"置换数是0\",\"复制对象文字列\"]]},{\"title\":\"参数compare中指定的定数\",\"heads\":[\"定数\",\"值\",\"说明\"],\"rows\":[[\"vbUseCompareOption\",\"-1\",\"使用Option Compare语句的设定\"],[\"vbBinaryCompare\",\"0\",\"用二进制模式进行比较\"],[\"vbTextCompare\",\"1\",\"用文本模式进行比较\"]]}]');
INSERT INTO `t_tips` VALUES ('182', '182', '追加指定个数的文字', 'String函数', 'String函数是向参数character返回指定的文字，向参数number返回指定个数的重复文字的函数。', 'Sub Sample182()@        Dim i As Long@        For i = 1 To 3                                          <cite>重复3次处理</cite>@             Cells(i + 1, 3).Value = _@                   String(Cells(i + 1, 2).Value / 1000, \"|\")    <cite>在C列中录入B列数值的</cite>@                                                                1/1000的个数的“|”@        Next@    End Sub', '使用String函数制作简单的图表。String函数是将指定的文字重复指定的次数的函数。\n                只将“销售额”的数值重复「｜」入力到C列，做成简单的图表。这里的“销售额”的值不是原封不动的，而是\n                原来的1/1000。', '/images/zhiku/TipsNO182-001.png', '/images/zhiku/TipsNO182-002.png', '', '', '', '在C列做成[简易标记]', '简易标记做成', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('183', '183', '比较两个文字列', 'StrComp函数', 'StrComp函数将参数string1和参数string2所指定的文字列进行比较，并且返回比较的结果。\n                 而且，参数compare指定文字列比较模式中所表示的定数。参数compare指定的定数请参考Tip181。', 'Sub Sample183()@        If StrComp(Range(\"B2\").Value, Range(\"C2\").Value _@             ,vbBinaryCompare) = 0 Then                       <cite>用二进制模式比较</cite>@             Range(\"D2\").Value = \"相等\"@        Else@             Range(\"D2\").Value = \"不相等\"@        End If@        If StrComp(Range(\"B3\").Value, Range(\"C3\").Value _@             ,vbTextCompare) = 0 Then                         <cite>用文本模式比较</cite>@             Range(\"D3\").Value = \"相等\"@        Else@             Range（\"D3\").Value = \"不相等\"                    <cite>将处理结果分别录入</cite>@                                                              到D列中@        End If@    End Sub', '将B列和C列的文字列进行比较，结果入力到D列。二进制模式虽然区分“平假名、片假名”和“大写，\n                小写“，但是文本模式并不区分这些。\n            \n            \n                    StrComp函数的处理结果如下所示。”string1超过string2“是指在文字代码和五十音图的顺序中，\n                如果排序在前面的话就是”未满“，如果排序在后面的话就是”超过“。', '', '', '', '', '', '', '', '2017-11-30 14:05:00', null, null, '[{\"title\":\"单元格指定的参考\",\"heads\":[\"结果\",\"返回值\"],\"rows\":[[\"string1是string2未满\",\"-1\"],[\"string1与string2相等\",\"0\"],[\"string1超过string2\",\"1\"],[\"string1或者string2为空值\",\"空值\"]]}]');
INSERT INTO `t_tips` VALUES ('184', '184', '检索文字列', 'InStr函数/InStrRev函数', 'InStr函数要确定参数string1中指定的文字列中是否包含参数string2中指定的文字列，需要从文字列\n                 最初的位置开始检索，返回最开始发现文字的位置。\n            \n                 InStrRev函数要确定参数stringcheck中指定的文字列中是否包含stringmatch中指定的文字列，需要\n                从文字列的最后开始检索，返回最开始发现文字的位置的开头的位置。\n            \n                 参数compare可以指定比较模式。指定的值请参考Tips181。', 'Sub Sample184()@        MsgBox \"从开头查找:\" &amp; InStr(Range(\"A2\").Value, \"VBA\") _@           &amp; vbLf _@           &amp; \"从末尾查找、:\" &amp; InStrRev(Range(\"A2\").Value, \"VBA\") <cite>从A2单元格的文字列</cite>@                                                                 中查找出“VBA”字样，并表@                                                                 示出文字的位置@    End Sub', '从A2单元格中入力的“EXCEL VBA”的文字列中检索出”VBA\"，并表示出文字位置。检索有从文字\n                的开头开始检索和从文字的结尾开始检索两种方式。因为这个字段只包含一个VBA，所以处理结果是相同的。\n            \n            \n                    InStr函数和InStrRev函数可以检索文字列。所以，如果使用“If InStr（对象文字列、检索文字列）＞ 0  Then”，\n                可以检查出是否包含检索的文字列。', '/images/zhiku/TipsNO184-001.png', '/images/zhiku/TipsNO184-002.png', '', '', '', '选择单元格A1', '单元格A4~C5被选中', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('185', '185', '将文字列变换成数值', 'Val函数', 'Val函数是取得参数string中从文字列的开始位置到发现不可识别的数值为止的部分的文字，并将其转\n                 换成数值的函数。需要注意的是虽然逗号（，）可以作为数值进行处理，但日元符号（￥）和句号（。）\n                 并不可以作为数值进行处理。而且，参数中指定的tab和换行是被无视的。', 'Sub Sample185()@        MsgBox\"单价:\" &amp; Val(Range(\"B2\").Value)    <cite>只表示出B2单元格中的数值</cite>@    End Sub', '这里，“单价”栏中入力了“元”和单位（不是表示形式）。这种情况，并不能顺利进行计算处理。\n                所以，使用Val函数，只取得数值。', '/images/zhiku/TipsNO185-001.png', '/images/zhiku/TipsNO185-002.png', '', '', '', '往单价栏里以[元]为单位输入', '只表示数值', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('186', '186', '将数据转换成日期型数据', 'CDate函数', 'CDate函数是将参数expression中指定的值转换成Date型（日期型）数据的函数。', 'Sub Sample186()@       MsgBox\"转换后:\" &amp; CDate(Range(\"A2\").Value)   <cite>A2单元格中的文字列转换成日期类型</cite>@    End Sub', 'A2单元格中输入了表示日期的数据。虽然看画面的时候只要知道这是个日期就可以，但是在进行日期\n                比较和计算的时候会出现问题。\n            \n            \n                    所以使用CDate函数将数据转变成日期型数据。变换后的数值表示在信息框中。\n            \n            \n                    指定了CDate函数中不能转换成日期型的数值的时候，会报错。', '/images/zhiku/TipsNO186-001.png', '/images/zhiku/TipsNO186-002.png', '', '', '', '往单元格A2里输入字符串数据', '转换成日期数据', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('187', '187', '将数据转换成整数型数据', 'CLng函数', 'CLng函数是将参数expression中指定的值转换成Long型（长整数型）数据的函数。', 'Sub Sample187()@       Dim i As Long@       For i = 1 To 3                                         <cite>处理三行数据</cite>@           Cells(i + 1,2).Value = CLng(Cells(i + 1,1).Value)  <cite>转变A列的值录入到B列</cite>@           Cells(i + 1,4).Value = CLng(Cells(i + 1,3).Value)  <cite>转变C列的值录入到D列</cite>@       Next@    End Sub', '将A列中输入的值转换成整数，再输入到B列。CLng函数是将指定值转换成Long型整数的函数。这个\n                时候，虽然会对小数点以后的部分进行修约处理，但要注意处理方法。像例子那样，小数点后第一位的值是\n                “5”的时候的处理结果，与所谓的四舍五入是不同的。这种修约处理叫做“银行系的修约处理”。具体情\n                况请参照“Memo\"。', '/images/zhiku/TipsNO187-001.png', '/images/zhiku/TipsNO187-002.png', '', '', '', '处理A列和C列的值', '转换成整数后，写入到B列和D列', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('188', '188', '将数值转换成16进制', 'Hex函数', 'Hex函数是将参数number中指定的值转换成16进制的函数。', 'Sub Sample188()@       Dim i As Long@       For i = 1 To 4                                          <cite>处理4个数据 </cite>@            Cellｓ(i + 1,2).Value = Hex(Cells(i + 1,1).Value)  <cite>将A列的值转换成16进制，</cite>@                                                               再入力到B列@       Next@    End Sub', 'Hex函数是将值转换成16进制的函数。参数指定的值是文字列等不能处理的情况，会发生错误。', '/images/zhiku/TipsNO188-001.png', '/images/zhiku/TipsNO188-002.png', '', '', '', '往单元格A2里输入字符串数据', '往B列里输入变换后的值', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('189', '189', '获取整数部分', 'Int函数/Fix函数', 'Int函数/Fix函数是返回参数number中指定的值的整数部分的函数。参数中指定正数的情况，Int函数\n                 返回的值是相同的。但是，如果指定的为负数，Int函数将返回不超过元数据的最大的整数，而Fix函数返回\n                 元数值以上的最小的整数。', 'Sub Sample189()@       Dim i As Long@       For i = 1 To 4                                           <cite>处理4个数据 </cite>@            Cells (i + 1,2).Value = Int (Cells(i + 1,1).Value)  <cite>A列的值用Int函数处理，</cite>@                                                                并表示在B列中@            Cells (i + 1,3).Value = Fix (Cells(i + 1,1).Value)  <cite>A列的值用Fix函数处理，</cite>@                                                                并表示在C列中@       Next@    End Sub', '将A列的值分别用Int函数、Fix函数处理的结果录入。原始值为负数的情况，处理结果会有所不同，请注意。', '/images/zhiku/TipsNO189-001.png', '/images/zhiku/TipsNO189-002.png', '', '', '', '将A列的值作为处理对象', '得到Int函数、Fix函数的处理结果', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('190', '190', '调查是否为数值数据', 'IsNumeric函数', 'IsNumeric函数是判断参数expression中指定的值是否作为数值处理的函数。\n                 作为数值处理的情况返回Ture，不作为数值处理的情况返回False。', 'Sub Sample190()@       Dim i As Long@       For i = 1 To 4                                               <cite>处理3个数据 </cite>@            Cells(i + 1,2).Value = IsNumeric(Cells(i + 1,1).Value)  <cite>判断A列的值，结果</cite>@                                                                    输入到B列@       Next@    End Sub', 'sNumeric函数是判断指定的值是否为数值的函数。这里，以文字列、日期、数值这三种数据为对象\n                进行处理。日期数据在Excel内部称为序列值，但是IsNumeric函数的处理结果为 False，请注意。', '/images/zhiku/TipsNO190-001.png', '/images/zhiku/TipsNO190-002.png', '', '', '', '处理3种数据', '显示各自的处理结果', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('191', '191', '调查是否为序列', 'IsArray函数', '利用IsArray函数，可以调查指定的变量是否为序列。如果是序列就返回True,如果不是序列就返回False', 'Sub Sample191()@       Dim temp1 As Variant@       Dim temp2 As Variant@       temp1 = Range(\"A2\").Value                          <cite>将单元格A2中的值直接代入 </cite>@       temp2 = Split(Range(\"A2\").Value,\",\")               <cite>将单元格A2中的值用Split函</cite>@                                                          数转换成序列再进行代入@       MsgBox\"temp1:\" &amp; IsArray(temp1) &amp; vbLf _@          &amp; \"temp2:\" &amp; IsArray(temp2), ,\"序列check\"       <cite>分别表示出每一个变量是否为</cite>@                                                          序列 @    End Sub', 'A2单元格中录入用“，”分割的文字列。将这个文字列原封不动的代入到变量的情况和使用Split\n                函数用“，”来分割并变换序列的情况，将这两种情况分别用IsArray函数判断是否为序列。', '/images/zhiku/TipsNO191-001.png', '/images/zhiku/TipsNO191-002.png', 'Rndomize语句', 'Rndomize语句是将随机数序列初始化的语句。随机数序列是指没有规则的随机生成的数值的序列。\n            \n            \n                    随机数是以seed值为基础做成的，如果seed值相同，那么这个随机数序列也相同。\n            \n            \n                    所以，在使用Rnd函数的时候，也需要一起使用Rndomize语句，这个时候，初始化随机数序列，用不同的seed值生成随机数。', '', '1~6中随机取值赋给单元格A2', '结果显示在单元格A2', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('192', '192', '生成随机数', 'Rnd函数', '利用Rnd函数可以随机生成0~1（不包括1）之间的值。', 'Sub Sample192()@       Randomize                                   <cite>把随机数序列初始化 </cite>@       Range (\"A2\").Value = Int(Rnd( ) * 6) + 1    <cite>将1~6之间的值随机表示 </cite>@    End Sub', '这里，要求随机生成1~6之间的值。Rnd函数可以随机生成0~1之间的数值。\n                想取到任意范围的值，要使用下面的公式。', '/images/zhiku/TipsNO192-001.png', '/images/zhiku/TipsNO192-002.png', 'Rndomize语句', 'Rndomize语句是将随机数序列初始化的语句。随机数序列是指没有规则的随机生成的数值的序列。\n            \n            \n                    随机数是以seed值为基础做成的，如果seed值相同，那么这个随机数序列也相同。\n            \n            \n                    所以，在使用Rnd函数的时候，也需要一起使用Rndomize语句，这个时候，初始化随机数序列，用不同的seed值生成随机数。', '', '1~6中随机取值赋给单元格A2', '结果显示在单元格A2', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('193', '193', '从数组中取得条件一致的内容', 'Filter函数', 'Filter函数是从参数sourcesrrary指定的数组中取得与参数match中指定的条件一致/不一致的内容，\n                 并作为其他的数组返回。与取得的数组条件一致，参数include指定为Ture；与取得的数组条件不一致，参\n                 数include指定False。规定值为Ture。', 'Sub Sample193()@       Dim temp As Variant                                   <cite>把随机数序列初始化 </cite>@       temp = Split (Range(\"A2\").Value,\",\")                  <cite>单元格A2的值作为数组存储到变量中 </cite>@        MsgBox\"包含VBA:\"&amp; Join (Filter (temp,\"VBA\"), \",\")    <cite>表示包含“VBA\"的要素 </cite>@    End Sub', '单元格A2中录入的值用逗号分割并代入到数组变量中。获取这个数组中包含“VBA\"字样的内容，并\n                表示在消息框中。\n            \n            \n                  Filter函数是返回数组的函数。所以，处理的结果即使只有一个数据也是作为数组来使用。而且，没\n                有对象数据的情况下返回空的数组。', '/images/zhiku/TipsNO193-001.png', '/images/zhiku/TipsNO193-002.png', '', '', '', '(处理单元格A2的数据)', '(显示包含[VBA]的字符)', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('194', '194', '获取环境变量的值', 'Environ函数', 'Environ函数是获取Windows的环境变量的函数。环境变量是Windows所管理的系统使用的变量，并且有用户名和主目录。\n            \n                 指定参数envstring或者参数number。参数envstring指定环境变量名，参数number指定想要取得\n                的环境变量所指定的序号。而且，Environ函数在取不到值的情况下返回「\"\"」（长度是0的文字列）。', 'Sub Sample194()@        Range(\"A2\").Value = Environ(\"OS\")                        <cite>取得OS </cite>@        Range(\"B2\").Value = Environ(\"USERNAME\")                  <cite>取得用户名 </cite>@    End Sub', '单元格A2和单元格B2分别从环境变量中分别取得OS和用户名。\n            \n            \n                 而且，主要的环境变量的名称如下。', '/images/zhiku/TipsNO194-001.png', '/images/zhiku/TipsNO194-002.png', '', '', '', '(取得环境变量)', '(显示环境变量)', '2017-11-30 14:05:00', null, null, '[{\"title\":\"主要的环境变量\",\"heads\":[\"环境变量的名称\",\"说明\"],\"rows\":[[\"PATH\",\"PATH环境变量\"],[\"OS\",\"操作系统\"],[\"HOMEDRIVE\",\"Primary Local Drive\"],[\"HOMEPATH\",\"既定用户所使用的目录\"],[\"TEMP\",\"temp目录\"],[\"USERNAME\",\"用户名\"],[\"WINDIR\",\"系统目录\"]]}]');
INSERT INTO `t_tips` VALUES ('195', '195', '利用工作表函数（1）', 'WorksheetFunction属性', '使用工作表函数就要使用WorksheetFunction属性。WorksheetFunction属性要准备一个与工作表\n                 函数有着相同处理的方法（不是所有的工作表函数都要准备）。', 'Sub Sample195()@       Range(\"B2\").Value = Round（Range（\"A2\").Value, 0)    <cite>用VBA函数进行舍入处理 </cite>@       nge(\"C2\").Value = Application.WorksheetFunction _@           .Round(Range(\"A2\").Value, 0)                     <cite>用工作表函数进行舍入处理 </cite>@    End Sub', '在此，进行四舍五入处理。VBA的Round函数进行修约处理。所以，四舍五入和处理结果有所不同。\n                如果想用VBA进行四舍五入，要使用ROUND工作表函数。例子是在B2单元格中录入RoundVBA函数的处\n                理结果，在C2单元格中录入ROUND工作表函数的处理结果。', '/images/zhiku/TipsNO195-001.png', '/images/zhiku/TipsNO195-002.png', '舍入处理', 'RoundVBA函数进行的处理是“银行系的修约处理”。要处理的位数的值为“5”的时候，处理结果变为偶数处理。所以，处理结果与四舍五入不同。\n            \n            \n                   这样，VBA函数和工作表函数中即使名称相同，处理结果也不同。所以，请大家注意。', '', '(舍入处理)', '(得到工作表函数的处理结果)', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('196', '196', '利用worksheet函数(2)', 'Evaluate 方法', 'Evaluate 方法是，评估参数Name指定的值，返回评价的结果。比如，指定计算的方式返回计算结果。\n                 利用这个功能，能使用worksheet函数。', 'Sub Sample196()@         Range(\"C2\").Value = _@             Evaluate(\"DateDif(\"\"\" &amp; Range(\"A2\").Value _@                   &amp;  \"\"\",\"\"\" &amp; Range(\"B2\").Value &amp; \"\"\",\" _@                   &amp;  \"\"\"Y\"\"\" &amp; \")\")                           <cite>输入单元格C2的DATEDIF</cite>@                                                               worksheet函数的结果 @    End Sub', '这里是使用Evaluate方法，使用DATEDIF worksheet处理的行为。这里要注意的重点是，双引号\n                 (\")。VBA的代码是，双引号[\"]是实际使用的字符串符号。这是为了，在使用双引号[\"]时，能够区分包含\n                该字符串的符号，所以必须要有2个双引号[\"\"]。样本代码里面的[\"\"\"Y\"\"\"]实际表示的是[\"Y\"]。', '/images/zhiku/TipsNO196-001.png', '/images/zhiku/TipsNO196-002.png', 'DateDiffVBA函数', '要求指定VBA函数的DateDiff函数期间，在这个情况下，比如，求年龄的情况，单纯 计算时间差，结果和按照出生日计算年龄结果不同。\n            \n            \n                    这个情况是，需要使用worksheet函数。', '', '(要求计算年龄的值)', '(输入年龄值)', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('197', '197', '制作用户自定义函数', 'Function过程', '能使用Function过程，制作用户自定义函数。', 'Sub Sample197()@         Function Tax(price As Long) As Long            <cite>取到参数的金额，返回Long型 </cite>@            Tax = price * 0.05                          <cite>计算消费税额 </cite>@    End Function', '在这里，自制消费税额的函数，这个函数，金额输入制定参数，返回消费税额的函数。', '/images/zhiku/TipsNO197-001.png', '/images/zhiku/TipsNO197-002.png', '用户定义函数的利用', '用户定义函数，能象与通常的工作函数同样一样地使用。', '', '(求消费税额)', '(使用自制函数消费金额计算出来)', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('198', '198', '用户定义函数测试', '?记号', '立即窗口中使用(?),返回指定属性值的计算结果.用户定义函数的测试中能够使用.', 'Sub Sample198()@         Function Sample198(price As Long) As Long     <cite>取得金额参数,返回Long类型的值</cite>@            Sample198 = price * 0.05                   <cite>返回计算消费税额</cite>@    End Function', 'VBE的 立即窗口 使用,用户能够定义函数的动作检查,立即窗口 中[?Sample198(100)]\n                [?]连接输入函数名,用括号指定参数,最后按下 Enter 键显示处理结果.这样做的话,\n                能够完成用户定义函数的动作检查.', '/images/zhiku/TipsNO198-001.png', '/images/zhiku/TipsNO198-002.png', 'イミディエイトウィンドウ中实行计算处理', 'イミディエイトウィンドウ是,这个样品的用户和输入, Enter 键按下,显示计算结果的[100]\n                定义函数的测试,不是只能够单纯的计算处理 而且,[?Range(\"A1\")Value]和输入, Enter 键\n                属性的值,イミディエイトウィンドウ中[?10 * 10]按下,显示单元格A1的值.', '', '(立即窗口使用)', '(处理结果表示)', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('199', '199', '在函数向导里用日语表示参数名', 'Function过程', 'Functionプロシージャを使用して、オリジナルの関数（ユーザー定義関数）を作成することがで\n                 きます。この引数名に日本語を使用すると、関数ウィザードを使用時に、引数名に指定した日本語が\n                 表示されます。', 'Sub Sample199()@         Function  Tax(金额　As  Long )  As  Long    <cite>参数「金额」使用日语</cite>@            Dim  price  As  long@            price  = 金额                            <cite>变量price代入参数「金额」的值</cite>@            Tax  = price * 0.05                      <cite>进行计算处理</cite>@    End Function', '参数「金额」使用日语。由于这样做，函数的参数名指定日语，这里显示的是[金额]。但在做编程\n                的时候，使用日语的变量，ON/OFF每次都有变更输入法的麻烦在那里，由于这个例子准备了另外的变量，\n                用那个变量代入此后的编码就会很轻松。', '/images/zhiku/TipsNO199-001.png', '/images/zhiku/TipsNO199-002.png', '', '', '', '', '', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('200', '200', '制作返回错误的用户定义函数', 'CVErr函数', '通常在工作表函数和参数不正确等的情况下，返回错误值。由于用户定义函数，也利用CVErr函数，也有可能返回错误值。', 'Sub Sample200()@         Function  tax(price As Currency) As Variant   <cite>参数「金额」使用日语</cite>@            If price &gt;= 0 then                         <cite>判断参数值为0以上的数</cite>@               Tax = Application.WorksheetFunction _@                   .RoundDown(price * 1.05, 0) #@            Else@               Tax = CVErr(xlErrValue)@            End If@    End Function', '自定义消费税金额的用户定义函数，指定负数的时候，返回错误值，以下的种类为指定CVErr函数的参数值', '/images/zhiku/TipsNO200-001.png', '/images/zhiku/TipsNO200-002.png', '', '', '', '(表示错误值)', '(指定的负数错误值被表示)', '2017-11-30 14:05:00', null, null, '[{\"title\":\"设定CVErr函数的参数的XICVErrorclass的定数\",\"heads\":[\"定数\",\"値\",\"エラー値\"],\"rows\":[[\"xlErrDivO\",\"2007\",\"#DIV/0!\"],[\"xlErrNA\",\"2042\",\"#N/A\"],[\"xlErrName\",\"2029\",\"#NAME?\"],[\"xlErrNull\",\"2000\",\"#NULL!\"],[\"xlErrNum\",\"2036\",\"#NUM!\"],[\"xlErrRef\",\"2023\",\"#REF!\"],[\"xlErrValue\",\"2015\",\"#VALUE!\"]]}]');
INSERT INTO `t_tips` VALUES ('201', '201', '参照工作表', 'Worksheets属性', 'Worksheets属性，参照工作表。object是否省略，指定Workbook对象。省略有效的工作表工作\n            单对象，参照个别的工作表，指定为参数索引号码工作表名。', 'Sub Sample201()@        Dim str As String@        Dim i As Long@    For i = 1 To Worksheets.Count	<cite>#只处理工作表的数值	</cite>@            str = str &amp; Worksheets(i).Name &amp; vbLf@            <cite># 变量带入工作表名	</cite>@            <cite># 这个时候，另起一行也带入</cite>@        Next@        MsgBox \"工作表一览\"　&amp; vbLf &amp; str	<cite># 显示工作表一览</cite>@    End Sub', '在这里，在消息框上显示有效的工作簿的工作表名的一览。为了取得全部的工作表名，使\n                用循环处理。为了只对工作表的数进行循环处理，工作表使用返回数的Count属性。\n                循环处理，工作表名是指定索引号码，Name属性取得工作表名的。\n                如果这样进行循环处理，使用索引号码方便。', '/images/zhiku/TipsNO201-001.png', '/images/zhiku/TipsNO201-002.png', '', '', '', '(取得全部的工作表名)', '(全部的工作表名被显示)', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('202', '202', '参照工作中的WorkSheet', 'Activesheet属性', 'Activesheet属性是，参照工作中的book或指定的windows还有book的activesheet(book中表示\n            的sheet)。Activesheet不存在的场合。返回Nothing。', 'Sub Sample202()@         MsgBox \"activesheet名：\"　＆　ActiveSheet.Name@    End Sub', '在提示框中表示activesheet名。Sheet名的Name属性取得。Activesheet的名是指现在的activesheet。\n                WorkSheet是复数的时候(工作group)，activesheet是只有一个。', '/images/zhiku/TipsNO202-001.png', '/images/zhiku/TipsNO202-002.png', '示例的实行方法', '使用activeSheet处理对象的场合。一些注意是必要的。Activesheet始终是当时的activesheet。因为这个，对程序处理中的worksheet对象处理的时候，错误的意图不要有，worksheet是activesheet。程序没有工作时，这件事往往是有的。									  因为这， 原则上ActiveSheet不被使用，准确上使用worksheet属性的索引番号使用，指定的worksheet是好用的吧。', '', '(文本框输入值后,隐藏用户窗体)', '(再次显示用户窗体,文本框保持)', '2017-11-30 14:05:00', null, null, '');
INSERT INTO `t_tips` VALUES ('203', '203', '选择工作表', 'Select方法', 'Select方法是选择工作表的方法。选择的工作表使用Worksheets属性，指定index编号或工作表名。\n            指定False为参数replace，在不解除现在选择的工作表的情况下选择指定工作表，结果，复数的工作表成为\n            了被选择的工作组。指定True或省略时，现在的选择被解除，只选择重新指定的工作表。默认值为True。', 'Sub Sample203()@        Worksheets(\"Sheet1\").Select	<cite>#选择Sheet	</cite>@        Worksheets(\"Sheet2\").Select False@        <cite>#不解除Sheet1的选择并选择Sheet2</cite>@    End Sub', '在这里，选择[Sheet1]工作表[Sheet2]工作表的2个工作表，作为工作组。Select方法指定False\n                为参数replace时，在已经被选择的工作表之外再选择指定的工作表。', '/images/zhiku/TipsNO203-001.png', '/images/zhiku/TipsNO203-002.png', 'Select方法和激活Sheet', '这个例子，首先选择[Sheet1]工作表后，再选择[Sheet2]工作表。这时，激活Sheet成为[Sheet1]。Select方法是彻底选择的命令，而不是激活工作表的命令。\n                而且，开始选择一个工作表，同时又选择另一个工作表。因为，首先选择[Sheet1]工作表时同时激活，之后，追加选择[Sheet2]时，转换为激活Sheet，\n                [Sheet1]依旧是激活Sheet。', '', '(选择工作表)', '(选择[Sheet1]工作表和[Sheet2]工作表)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('204', '204', '激活工作表', 'Activate方法', 'Activate方法是激活工作表的方法。激活工作表使用Worksheets属性，指定index编号或工作表名。', 'Sub Sample204()@        Worksheets(\"Sheet1\").Select	<cite>#选择Sheet	</cite>@        Worksheets(\"Sheet2\").Select False@        <cite>#不解除Sheet1时选择Sheet2	</cite>@        Worksheets(\"Sheet2\").Activate<cite>#激活Sheet2</cite>@    End Sub', '在这里，首先把「Sheet1」和「Sheet2」的工作表做为工作组。\n                这个时候，「Sheet1」成为激活页。此后，使用Activate方法激活「Sheet2」工作表。', '/images/zhiku/TipsNO204-001.png', '/images/zhiku/TipsNO204-002.png', 'Select方法和活性Sheet页', '用这个例子应该注意的是激活[Sheet2]工作表的时候，工作小组是没解除的。Select方法是，选择1个工作表的同时激活另一个工作表，跟Activate方法的差异变得不同。 完全选择用Select方法，激活是Activate方法。\n                还有，工作表用复数选择时，作成为激活的只是1个工作表。', '', '(激活[Sheet2]工作表)', '(进入活动[Sheet2]工作表)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('205', '205', '工作表的group化', 'Array函数', 'Array函数是指定的参数arglist作为排序返回函数。利用这个，可以选择复数个工作表', 'Sub   Sample205()@          Worksheets(Array（\"Sheet1\",\"Sheet3\"） ).select@          <cite>#　Sheet1和Sheet3group化</cite>@    End   Sub', '「Sheet1」和「Sheet3」成为作业组，使用Array函数排序传递到Worksheets属性\n                可以选择复数个worksheet', '/images/zhiku/TipsNO205-001.png', '/images/zhiku/TipsNO205-002.png', 'Activesheet', '使用Array函数选择复数个Worksheets时的Activesheet是Array函数在最初指定的Worksheet。', '', '(选择复数个worksheets)', '([Sheet1]和[Sheet3]被选择)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('206', '206', '变更Worksheet名', 'Name 属性', '使用Name属性、可以取得、设定worksheet的名。而且、worksheet名是在半角\n            31个文字（全角15个文字）以内、不可以使用「：、？、/、￥、「、」」、不可以和现\n            有的sheet名相同（不区分大小写）、存在这样的限制。', 'Sub	Sample206()@        Worksheets(\"Sheet1\").Name = \"集計表\"@        <cite>#　设定worksheet名为集計表</cite>@    End  Sub', '变更「Sheet1」的sheet名为集計表。这是根据、Name属性可以指定值', '/images/zhiku/TipsNO206-001.png', '/images/zhiku/TipsNO206-002.png', '检查sheet名', 'worksheet名有不可以使用的文字。在程序中给任意的worksheet命名的场合下、如果和error处理相结合，处理会变得顺畅这个例子是用户入力的sheet名不正确的时候表示的信息。\"', 'Sub	Sample206＿02()@        Ｄim  str  As String@        str = InputBox(\"输入sheet名\")@        On Error  Resume Next@        Worksheets(\"Sheet1\").Name = str@        If Err.Number  &lt;&gt; 0 Then@            MsgBox\"值不正确\"@            Exit  Sub@        End  If@    End   Sub', '(变更「Sheet1」的名)', '(把sheet名变更为集計表)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('207', '207', '参照选择的Worksheet', 'SelectedSheets  属性', 'SelectedSheets属性是在指定的窗口中取得所有被选择的Worksheet。只能取得值。\n            指定的对象、不止包括Workbook 对象，也包括Window 对象', 'Sub	Sample207()@        Worksheets(Array(\"Sheet1\" , \"Sheet3\")).Select@        <cite>#　选择[Sheet1]和[Sheet3]</cite>@        MsgBox \"select的sheet数：\"　＆　＿@            ActiveWindow.SelectedSheets.Count@        <cite>#　显示选择的sheet数量</cite>@    End  Sub', '选择「Sheet1」和「Sheet3」。之后、通过SelectedSheets属性取得被选择的sheet数量\n                这时，请注意指定的ActiveWindow。', '/images/zhiku/TipsNO207-001.png', '/images/zhiku/TipsNO207-002.png', '', '', '', '(worksheet选择后、表述选择的数量)', '(选择的数量被表示)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('208', '208', '确认没有同名的WorkSheet', 'Name  属性', '使用Name属性、可以取得、设定worksheet的名。而且、worksheet名是在半角\n            31个文字（全角15个文字）以内、不可以使用「：、？、/、￥、「、」」、不可以和现\n            有的sheet名相同（不区分大小写）、存在这样的限制。', 'Sub	Sample208()@        Dim  flg  As  Boolean@        Application.ScreenUpdating = False	<cite># 中止画面变更处理</cite>@        On Error  Resume Next			<cite># 开始Error処理</cite>@        WorkSheets.Add.Name = \"Sheet1\"@        <cite># 追加Sheet名为「Sheet1」的WorkSheet</cite>@        If  Err.Number &lt;&gt; 0  Then		<cite># 判断有没有Error发生</cite>@            flg = True		<cite># Error发生时的处理	</cite>@        Else@            flg = False		<cite># Error没有发生时的处理</cite>@        End  If@        On Error  GoTo  0	<cite># 结束Error处理</cite>@        Application.DisplayAlerts = False	<cite># 警告信息不表示</cite>@        ActiveSheet.Delete	<cite># 删除追加的WorkSheet</cite>@        Application.DisplayAlerts = True	<cite># 警告信息表示</cite>@        Application.ScreenUpdating = True	<cite># 再次开始画面的变更	</cite>@        If  flg  Then@            MsgBox  \"工作组[Sheet1]已存在\"@            <cite># Error发生时的信息	</cite>@        Else@            MsgBox  \"工作组[Sheet1]不存在\"@            <cite># Error没有发生时的信息</cite>@        End  If@    End  Sub', '这个是进行WorkSheet名是否重复的检查，比如即使[Sheet1]和[SHEET1]大小写文字不一样，\n                但是他们sheet名一样。\n                新添加的sheet名和所有的WorkSheet名也有一个比较的方法，通过下面的方法来检查。\n                既使利用On  Error statement方法发生Error,处理也不会中断。在这之后是，使用Add\n                方法追加WorkSheet,追加的WrokSheet首先赋与一个WorkSheet名，WorkSheet重复或包含\n                不能使用的文字，会出错。\n                然后，削除追加的WorkSheet，根据有没有Error表示相对应的信息。', '/images/zhiku/TipsNO208-001.png', '/images/zhiku/TipsNO208-002.png', '用循环处理确认时', '使用循环处理检查WorkSheet名是否重复时\n                如下記。即使WorkSheet名大小写，全角半角不\n                一样也是相同的Sheet名。这个例子是把比较的\n                Sheet名变为[大写][全角]', 'Sub	Sample208＿２()@	Dim sh As WorkSheet@	For Each sh In_@		ThisWorkBook.WorkSheets@    		If Ucase(StrConv_@			(sh.Name,VbNarrow)) _@			= \"SHEET1\"  Then@			MsgBox _@			\"[SHEET1]已存在。\"@			Exit For@		End If@	Next@End Sub', '', '', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('209', '209', '追加新的WorkSheet页', 'Add  方法', '利用Add方法，WorkSheet,GurafuSheet,MacroSheet都可以追加。关于追加的位置，\n            用参数Before（ActiveSheet的前面—左侧）或者参数After(ActiveSheet的后面—右侧)指定\n            省略这个参数时，默认在ActiveSheet的前面（左侧）追加sheet页，被追加的sheet页成为\n            ActiveSheet页。参数Count指定追加的sheet数，参数Type指定追加sheet页的种类。', 'Sub	Sample209()@        WorkSheets.Add  After : = ActiveSheet, Count : = 3@        <cite># 在ActiveSheet页右侧追加3个WorkSheet</cite>@    End  Sub', '追加WorkSheet页，因为指定ActiveSheet到参数After，所以被追加的WorkSheet在\n                ActiveSheet的右侧。而且，指定参数Count为3，所以追加的WorkSheet页是3个。', '/images/zhiku/TipsNO209-001.png', '/images/zhiku/TipsNO209-002.png', 'Sheet的种类', '想追加GurafuSheet等的时候，Add方法使用相对应的Sheetcollection。', '', '', '', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('210', '210', '削除WorkSheet', 'Delete  方法', '利用Delete方法，可以削除WorkSheet。关于追加的位置，削除WorkSheet时警\n            告信息被表示。', 'Sub	Sample210()@        Application.DisplayAlerts = False	<cite># 警告信息不表示</cite>@        WorkSheets( \"Sheet1\" ).Delete		<cite># 削除WorkSheet</cite>@        Application.DisplayAlerts = True	<cite># 警告信息再一次表示	</cite>@    End  Sub', '削除WorkSheet页，操作削除的WorkSheet页，不能通过手动作业恢复。因此，在削除时\n                警告信息被表示。\n                这里，DisplayAlerts属性是False,所以削除WorkSheet页时警告信息不表示。DisplayAlerts\n                属性在宏记录结束后保持设定的信息，最后恢复为True.', '/images/zhiku/TipsNO210-001.png', '/images/zhiku/TipsNO210-002.png', 'WorkSheet削除时的注意点', '当然，不能削除所有的WorkSheet。而且，被保护的Book也不能删除。Book被保护的场合，解除保护后再删除。即使，删除对象的WorkSheet是保护状态，也能被删掉。', '', '', '', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('211', '211', '移动/复制WorkSheet页', 'Move  方法 / Copy 方法', 'Move方法是移动WorkSheet的方法。Copy方法是复制WorkSheet的方法。参数Before/参数\n            After指定WorkSheet。指定这个参数的场合，移动/复制WorkSheet时参数Before是指定到sheet的\n            左侧，参数After是指定到sheet的右侧。也可以移动/复制到其他的book中。省略参数Before/After\n            时，移动/复制到新的book中。', 'Sub	Sample211()@        WorkSheets( \"Sheet1\" ).Copy After : = WorkSheets( \"Sheet2\" )@        <cite># Sheet1复制到　Sheet2的右侧</cite>@        WorkSheets( \"Sheet1\" ).Move After : = WorkSheets( \"Sheet3\" )@        <cite># Sheet1移动到　Sheet3的右侧</cite>@    End  Sub', '这里，【Sheet1】WorkSheet作为处理对象。首先复制到【Sheet2】的右侧，然后移动到\n               【Sheet3】的右侧.', '/images/zhiku/TipsNO211-001.png', '/images/zhiku/TipsNO211-002.png', '复制/移动到其他的Book', 'WorkSheet可以复制/移动到别的Book中。下例，Sample211.xlsm的【Sheet1】\n                被复制到Sample211_2.xlsmd的最前页', 'Sub	Sample211＿2()@        WorkSheets( \"Sheet1\" ).Copy_@        Before : = WorkSheets_@        ( \"Sample211＿2.xlsm\" )_@        .WorkSheets(1 )@    End  Sub', '', '', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('212', '212', 'WorkSheet的排序', 'Move  方法', 'Move方法是移动WorkSheet的方法。参数Before/参数After指定WorkSheet。指定这\n                个参数的场合，移动/复制WorkSheet时参数Before是指定到sheet的左侧，参数After是指\n                定到sheet的右侧。也可以移动/复制到其他的book中。', 'Sub	Sample212()@        Dim i As Long@        For i = 1 To Worksheets.Count - 1@        <cite>#循环比worksheet数少一个的次数</cite>@             Worksheets(i + 1) .Move  Before : =  Worksheets(1)@            <cite># 从第2个sheet按数序移动到最前</cite>@        Next@    End  Sub', '这里，与现在的顺序反过来排序WorkSheet。从第二个sheet按顺序移动到最前页（左端）\n                最后按照与原来相反的顺序排列。原来的第一个sheet页自动的变成最后的。循环处理的回数比\n                WorkSheet数少一个', '/images/zhiku/TipsNO212-001.png', '/images/zhiku/TipsNO212-002.png', '', '', '', '', '', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('213', '213', '变更Sheet标题的颜色', 'Tab  属性', 'Tab属性是表示sheet标题。与Color属性组合使用，能够指定sheet标题颜色。', 'Sub	Sample213()@        Dim  temp As Worksheet@        Worksheets(Array(\"Sheet1\",\"Sheet3\")).Select@        <cite># 选择Sheet1和Sheet3</cite>@        For Each temp In ActiveWindow.SelectedSheets@        <cite># 选择对sheet的处理	</cite>@            temp.Tab.Color = RGB(255,0,0)@        Next@    End  Sub', '这里，指定选择的sheet标题颜色为红色。选择的sheet是通过SelectedSheets属性取得的。\n                标题的颜色是Color属性或ColorIndex属性指定。Color属性指定的场合，使用RGB函数自\n                由的设置颜色。而且，标题颜色通常被设定为【无颜色】。标题颜色为【无颜色】时，ColorIndex属性指\n                定为「xlColorIndexNone」。', '/images/zhiku/TipsNO213-001.png', '/images/zhiku/TipsNO213-002.png', '', '', '', '', '', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('214', '214', 'WorkSheet表示/不表示的转换', 'Visible  属性', 'Visible属性是取得/设定WorkSheet表示/不表示的状态的。使用XlSheetVisibility类的定数\n               指定表示/不表示。指定xlSheetVeryHidden，用户不能在Excel上操作再表示，如果需要再表\n               示，也要使用VBA操作。', 'Sub	Sample214()@        WorkSheets( \"Sheet1\" ).Visible = xlSheetHidden	<cite># 不表示Sheet2	</cite>@    End  Sub', '这里，【Sheet2】WorkSheet非表示。Visible属性指定的定数是下面的那样。', '/images/zhiku/TipsNO214-001.png', '/images/zhiku/TipsNO214-002.png', '从Excel上不能再表示的WorkSheet', 'Visible属性指定xlSheetVeryHidden。在Excel上的操作不能再表示WorkSheet。同时，那个WorkSheet成为非表示的状态，从Excel画面上不知道。在程序中使用的设定用的WorkSheet等不让用户接触的sheet存在的时候，虽然有worksheet的保护方法，但是因为这里对用户设置为不可见，所以更安全。', '', '', '', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('215', '215', '计算工作组个数', 'Count  属性', 'Count属性是返回集合中包含的要素个数，返回值是Long型。在对象中指定工作组集合，\n                Book内工作组的个数，选择的工作组的个数都可以计算。', 'Sub	Sample215()@        Dim i As Long@        For i = 1To Worksheets.Count@            MsgBox \" 工作组名　：　\"　&amp; Worksheets(i).Name@            <cite># 表示工作组名	</cite>@        Next@    End  Sub', '这里，所有的工作组名按顺序在消息框中表示。因为全部的工作组用循环处理进行处理，\n                用Count属性取得工作组的个数。', '/images/zhiku/TipsNO215-001.png', '/images/zhiku/TipsNO215-002.png', '', '', '', '', '', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('216', '216', '参照工作组前后的Sheet', 'Previous  属性 /  Next 属性', 'Previous属性是取得指定工作组左边的工作组，Next属性是取得右边的工作组。', 'Sub	Sample216()@        MsgBox \" Sheet2的前面　：　\"　_@            &amp;  Worksheets(\"Sheet2\").Previous.Name &amp; vbLf _@            &amp;   \" Sheet2的后面　：　\"　_@        &amp;  Worksheets(\"Sheet2\").Next.Name <cite>#表示Sheet2前后的工作组名</cite>@    End  Sub', '表示Sheet2工作组前后的工作组名。对存在最左端的工作组使用Previous属性，最右端的\n                工作组使用Next属性，返回Nothing。', '/images/zhiku/TipsNO216-001.png', '/images/zhiku/TipsNO216-002.png', '实例', 'Previous  属性 /  Next 属性是返回指定工作组前后的工作组。\n               利用这个，能像下面一样处理。复制工作组的Copy方法，处理结果不返回到复制的工作组中。因此，代入object变量时像下面那样处理。', 'Sub	Sample216_2()@        Dim temp As Worksheet@        Worksheets( \"Sheet2\" ).Copy _@        After : = Worksheets( \"Sheet3\")@        Set temp = _@        Worksheets( \"Sheet3\").Next@        MsgBox \" 复制的工作组名　：\"　_@        &amp;  temp.Name@    End  Sub', '(表示工作组sheet2前后的sheet名)', '(各自的工作组名被表示)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('217', '217', '保护工作组', 'Protect  方法', 'Protect方法是保护工作组的方法。参数Password能指定密码口令。参数DrawingObjects用\n                于描述对象，参数Contents是sheet的内容，参数Scenarios能做到保护脚本（设为True）,不能\n                保护脚本设为False。参数UserInterfaceOnly指定为True，只能从宏变更。', 'Sub	Sample217()@        Worksheets(\"Sheet1\").Protect  Password:=\"pass\"@        <cite># 指定口令「pass」保护Sheet1</cite>@    End  Sub', '这里，安上口令「pass」保护「Sheet1」工作组。请注意区分口令的大小写。', '/images/zhiku/TipsNO217-001.png', '/images/zhiku/TipsNO217-002.png', '通过用户操作不能解除的保护', '保护工作组，如果知道口令，用户操作也能解除。\n                但是，解除保护时在对话框中输入不能输入文字（另起一行和Tab）作为口令指定。用户不能解除保护。\n                下例，使用Chr函数口令指定tab，保护工作组。', 'Sub	Sample217_2()@        Worksheets(\"Sheet1\").Protect _@        Password:=\"pass\" &amp; Chr(9)@    End  Sub', '(保护工作组)', '(工作组被保护)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('218', '218', '保护除了输入用的单元格的工作组', 'Locked  属性', 'Locked属性是表示是否锁上单元格。通常Locked属性被设定为True。如果设定为False，\n               保护工作组之后也能输入数据。', 'Sub	Sample218()@    Range(\"A1\").Locked = False<cite># 解除单元格A1的锁</cite>@        Worksheets(\"Sheet1\").Protect<cite># 保护Sheet1</cite>@    End  Sub', '这里，只有「Sheet1」可以输入。首先解除单元格A1的锁，之后保护【Sheet1】。请注意\n                这个顺序。不能再保护工作组之后再解除单元格的锁。', '/images/zhiku/TipsNO218-001.png', '/images/zhiku/TipsNO218-002.png', '通过用户操作不能解除的保护', '保护工作组，如果知道口令，用户操作也能解除。\n                但是，解除保护时在对话框中输入不能输入文字（另起一行和Tab）作为口令指定。用户不能解除保护。\n                下例，使用Chr函数口令指定tab，保护工作组。', 'Sub	Sample217_2()@        Worksheets(\"Sheet1\").Protect _@        Password:=\"pass\" &amp; Chr(9)@    End  Sub', '(只有单元格A1可能输入数据)', '(单元格A1输入完数据)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('219', '219', '解除工作组的保护', 'UnProtect  方法', 'UnProtect方法是解除工作组的保护的方法。工作组有口令保护时，参数Password指定密码口令。', 'Sub	Sample219()@        Worksheets(\"Sheet1\").UnProtect  Password:=\"pass\"@        <cite># 解除口令「pass」对Sheet1的保护	</cite>@    End  Sub', '解除用口令[Pass]对工作组[Sheet1]的保护。\n                另外，像这样用口令保护省略参数Password。寻求口令的输入的对话框被表示。', '/images/zhiku/TipsNO219-001.png', '/images/zhiku/TipsNO219-002.png', '保护的解除和单元格的锁', '在解除工作组的保护时，想把单元格恢复到被锁的初期状态的场合，像下记那样可以。下例，在工作组[Sheet1]的保护被解除后单元格A1～D5是被锁的状态。要点是，对单元格是否锁着不进行一一检查，可以一起设定。锁着的单元格（Locked属性是True），即使在被设定也不会出错。恢复到初期状态，再统一设定更方便。', 'Sub	Sample219_2()@        Worksheets(\"Sheet1\").UnProtect _@        Password:=\"pass\"@        Range(\"A1:D5\").Locked = True@    End  Sub', '(保护状态)', '(解除保护，可以输入文字)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('220', '220', '选择行/列', 'Rows属性 / Columns 属性', 'Rows属性 / Columns 属性是分别表示行（Rows属性 ），列（ Columns 属性）。指定参数\n                Index，可以取得单一的行、列，也可以取得object指定了的对象的全体行、列。Object省略的场合，\n                Worksheet成为对象。', 'Sub	Sample220()@        MsgBox \"行数　：　\"　&amp; Range(\"A1:C5\").Rows.Count &amp; vbLf _@            &amp; \"列数　：　\"　&amp; Range(\"A1:C5\").Columns.Count@        <cite># 表示单元格A1~C5的行、列</cite>@    End  Sub', '这里，把单元格A1～C5作为对象取得行列数。首先，用Rows属性（Columns 属性）取得行（列）\n                用Count属性取得各个数量。', '/images/zhiku/TipsNO220-001.png', '/images/zhiku/TipsNO220-002.png', '对象是单元格范围的情况', '对象是单元格范围的情况，取得成为单元格范围的行列。下例的处理结果是A2到C2被选择。', 'Sub	Sample220_2()@        Range(\"A1:C5\").Rows(2).Select@    End  Sub', '(表示行数和列数)', '(行数和列数被表示)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('221', '221', '选择特定的单元格范围的全体行/列', 'EntireRow属性 / EntireColumn 属性', 'EntireRow属性是指定了包含单元格范围的行，EntireColumn属性是指定了包含单元格范围的列，取得行列的属性。', 'Sub Sample221_1()@         Range(\"B1:B2\").EntireRow.Select@         <cite>## 选择单元格B1到B2包含的全体行</cite>@    End Sub', '这里，使用EntireRow属性，选择单元格B1到B2包含的全体行。为了取得全体行，指定了的B列以外的也被选择', '/images/zhiku/TipsNO221-001.png', '/images/zhiku/TipsNO221-002.png', '选择列', '同样的，列的选择同以下记述。下例，选择B1到C1全体列', '', '(选择单元格B1到B2包含的全体行)', '(全体行被选择)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('222', '222', '取得行番号/列番号', 'Row属性 / Column 属性', 'Row属性是指定了单元格的行序号，Column属性返回列序号。对象指定了单元格范围的场合，返回最左上的单元格的行序号/列序号。', 'Sub Sample222_1()@         MsgBox \"行番号　: \" &amp; Range(\"C4\").Row &amp; vbLf _@         <cite>## 单元格C4的行番号</cite>@             &amp;  \"列番号　: \" &amp; Range(\"C4\").Column@             <cite>## 单元格C4的列番号</cite>@             <cite>## 表示各个值</cite>@    End Sub', '这里，取得单元格C4的行序号和列序号，在消息框中表示', '/images/zhiku/TipsNO222-001.png', '/images/zhiku/TipsNO222-002.png', 'Column属性的方便的用法', '如果使用Cells属性处理的场合，必须指定列序号。像D列、E列这样的列还好，处理像AF列等横幅很长的列的时候，一个一个数行序号很麻烦。那时，在即使窗口中输入[?Range(\"AF1\").Column]，按回车键，返回列序号之后，在Cells属性中会设定正确的列序号。', '', '(取得单元格C4的行序号和列序号)', '(行序号和列序号被表示)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('223', '223', '转换行/列的表示/隐藏', 'Hidden  属性', 'Hidden属性是关于Object取得·设定指定了的行/列的表示/隐藏。表示为False,隐藏指定为True。', 'Sub Sample223_1()@         Range(\"A2,A4\").EntireRow.Hidden = False@         <cite>## 表示包含单元格A2、A4的行</cite>@    End Sub', '这里，表示之前隐藏的第2行和第4行。用EntireRow属性指定单元格A2和A4，把第2行和第4行作为对象。像这样，与EntireRow属性组合使用，可以把复数行作为对象。把复数列作为对象的场合，使用EntireColumn属性。', '/images/zhiku/TipsNO223-001.png', '/images/zhiku/TipsNO223-002.png', '转换表示与非表示', 'Hidden属性不仅可以设定值也可以取得值。利用这个，转换对象行的表示和隐藏，可以像下面记述的那样。这里，使用Not运算符，如果是表示，使之隐藏，如果是隐藏，使之表示。', '', '(表示包含单元格A2和A4的行)', '(第2行和第4行被表示)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('224', '224', '取得/变更行高和列宽', 'RowHeight 属性 / ColumnWidth 属性', 'RowHeight属性是取得设定对象指定了的单元格范围的行高，ColumnWidth属性是取得设定对象指定了的单元格范围的列宽的属性。指定了的单元格行高和列宽不同的场合，返回Null。', 'Sub Sample224_1()@         MsgBox \"行の高さ　: \" &amp; Range(\"A1\").RowHeight &amp; vbLf _@         <cite>## 单元格范围的行高</cite>@         &amp;  \"列の幅　: \" &amp; Range(\"A1\").ColumnWidth@         <cite>## 单元格范围的列宽</cite>@         <cite>## 在消息框中表示各个值</cite>@    End Sub', '这里，在消息框中表示单元格A1的行高和列宽。\n            使用Height 属性 ， Width 属性取得指定了的单元格全体大行高和列宽，详细请参照【Memo】', '/images/zhiku/TipsNO224-001.png', '/images/zhiku/TipsNO224-002.png', '复数的宽和高混在一起的场合', 'RowHeight属性和ColumnWidth属性，当指定的单元格范围的高和宽和全部行和列的不一致时，返回Null。用Height属性和Width属性取得行全体的高和列全体的宽。\n            \n            下例中，在消息框中表示包含单元格A1的单元格范围全体的行高和列宽。', '', '', '', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('225', '225', '自动调整行高和列宽', 'AutoFit 方法', 'AutoFit 方法是结合内容自动调整行高和列宽的方法。在对象中指定设定的列', 'Sub Sample225_1()@         Columns(\"A:C\").AutoFit@         <cite>## 自动调整A到C列的列宽</cite>@    End Sub', '使用Column属性指定A列到C列，自动调整列宽度。', '/images/zhiku/TipsNO225-001.png', '/images/zhiku/TipsNO225-002.png', '指定分离的列', '使用Range属性和EntireColumn属性自动调整指定的分离的列的列宽度。在下例中，A列和C列的列宽度自动调整（B列不自动调整）', '', '(调整A列到C列的列宽)', '(A列到C列的列宽被自动调整)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('226', '226', '结合指定范围的内容自动调整列宽度', 'AutoFit 方法', 'AutoFit 方法是结合内容自动调整行高和列宽的方法。在对象中指定设定的列。Object指定单元格范围的话，以那个单元格为基准自动调整行高和列宽。', 'Sub Sample226_1()@         Range(\"A3\").CurrentRegion.Columns.AutoFit@         <cite>## 取得包含单元格A3的表全体的列，自动调整列宽</cite>@    End Sub', '这里，首先使用CurrentRegion属性取得包含单元格A3的表全体。然后，使用Columns属性取得单元格范围内的全部列，使用AutoFit方法自动调整列宽。这时，请注意A列的列宽。在A列的A1单元格中输入标题。但是，不是那个标题文字，而是把表中的字符串长度作为对象，进行列宽的自动调整。这个，AutoFit方法的对象，像前面的说明那样是表内的列。', '/images/zhiku/TipsNO226-001.png', '/images/zhiku/TipsNO226-002.png', '作为对象的单元格范围', '这个例子中，表全体列是AutoFit方法的对象。暂时像下例那样只把标题作为对象的场合，结合标题字符串的长度调整。\n            \n            \n                 请注意如果弄错指定单元格范围，不能像预想的那样操作了。', '', '(在单元格A1中输入标题)', '(除了单元格A1的标题列，列宽被调整了)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('227', '227', '插入行/列', 'Insert方法', 'Insert方法，指定了插入的行和列对象。参数Shift指定插入后的移动方向,不过，对象是全体行和列时是无效的。参数CopyOrigin，指定插入后所继承的格式。省略的话，继承左上的格式。', 'Sub Sample227_1()@         Columns(4).Insert@         <cite>#插入第4列</cite>@         #Rows(3).Insert@         <cite>#插入第3行</cite>@    End Sub', '\'在Worksheet的第3行，第4列插入数据。因为省略参数CopyOriGin，继承左上的格式。\'在Worksheet的第3行，第4列插入数据。因为省略参数CopyOriGin，继承左上的格式。\n        以下为参数Shift和参数CopyOrigin的定数。', '/images/zhiku/TipsNO227-001.png', '/images/zhiku/TipsNO227-002.png', '', '', '', '(插入行和列)', '(行和列删除)', '2017-11-30 14:05:01', null, null, '[{\"title\":\"参数Shift的XlInsertShiftDirection级的定数\",\"heads\":[\"定数\",\"说明\"],\"rows\":[[\"xlShiftDown\",\"下方向移动\"],[\"xlShiftToRight\",\"右方向移动\"]]},{\"title\":\"参数Shift的XlDeleteShiftDirection级的定数\",\"heads\":[\"定数\",\"说明\"],\"rows\":[[\"xlFormatFromLeftOrAbove\",\"继承左上面的格式\"],[\"xlFormatFromRightOrBelow\",\"继承右下面的格式\"]]}]');
INSERT INTO `t_tips` VALUES ('228', '228', '删除行/列', 'CentimetersToPoints方法', 'Delete方法，是删掉指定的对象的方法。指定删除的行列进行删除，使用Rows属性指定要删除的行，使用Columns属性指定要删除的列。参数Shift是行/列数据删除之后，现在的数据移动的方向，但是，对象为全体行/列时指定Shift参数是无效的。', 'Sub Sample228_1()@         Columns(3).Delete@         <cite>#删除第三列</cite>@         #Rows(3).Delete@         <cite> #删除第三行</cite>@    End Sub', '\'在这里，删除第三行和第三列。\n        以下是参数Shift的定数。', '/images/zhiku/TipsNO228-001.png', '/images/zhiku/TipsNO228-002.png', '', '', '', '(删除第3行和第3列)', '(行和列删除)', '2017-11-30 14:05:01', null, null, '[{\"title\":\"参数Shift的XlDeleteShiftDirection级的定数\",\"heads\":[\"定数\",\"说明\"],\"rows\":[[\"xlShiftUp\",\"向上移动\"],[\"xlShiftToleft\",\"向下移动\"]]}]');
INSERT INTO `t_tips` VALUES ('229', '229', 'CentimetersToPoints方法', 'CentimetersToPoints方法', 'CentimetersToPoints方法，是厘米转换point的方法。使用这个方法，能够以厘米为单位指定单元格的大小。并且，object指定了Application对象。', 'Sub Sample229_1()@         Rows（3）.RowHeight  =  Application.CentimetersToPoints(3)@         <cite>##把第3行的行高设置为3厘米</cite>@    End Sub', '\'使用CentimetersToPoints方法，以厘米单位指定行的高度。', '/images/zhiku/TipsNO229-001.png', '/images/zhiku/TipsNO229-002.png', 'point', '1point是1/72英寸。因为1英寸是约25.4mm，1point是25.4mm/72，所以约为0.3528mm。反过来，1cm成为约28.3465point。', '', '(设置行高为3厘米)', '(变更行高)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('230', '230', '查看Window', 'Windows属性', 'Windows属性，与状态（表示非表示）无关，可以查看所有的window。如果指定了Index序号，则可以查看任意的window。如果参照了活动的窗口，则Index序号指定为1。', 'Sub Sample230_1()@         Workbooks.Open Thisworkbook.Path &amp; \"\\Sample230_2.xlsx\"@         <cite>#打开Sample230_2,xlsx文件</cite>@         MsgBox \"窗口数:\" &amp; Application.Windows.Count@         <cite>#表示现在打开的窗口数</cite>@    End Sub', '在这里，又打开了一个window,之后在messagebox中表示window的数目。', '/images/zhiku/TipsNO230-001.png', '/images/zhiku/TipsNO230-002.png', 'Active  Window', 'Windows特性在取得了active window时，参数Index设定成1。所以，windows的Index序号，是以window打开的顺序来设定的。', '', '(窗口数表示前)', '(窗口数表示后)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('231', '231', '查看 Active Window', 'ActiveWindows属性', 'ActiveWindows属性，可以查看 active window。如果没有打开的window,则返回Nothing。', 'Sub Sample231_1()@         MsgBox \"active window的标题:\" &amp; _@         Application.ActiveWindow.Caption@         <cite> #表示active window的标题</cite>@    End Sub', '在这里，在messagebox中表示active window的标题（title栏中的文字）。', '/images/zhiku/TipsNO231-001.png', '/images/zhiku/TipsNO231-002.png', '把Active  Window前后的window也变成active状态', 'ActiveWindows特性 中的Activeprevious性定，可以把指定的window前的window变成active状态。ActiveWindow.ActiveNext同理，则是把指定的window后的window变成active状态', '', '(活动窗口的标题表示前)', '(活动窗口的标题表示后)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('232', '232', '把Window变成active状态', 'Activate属性', 'Activate方法，是把指定的对象转化成active状态。使用了Windows属性，把对象window指定成object,可以把任意的window变成active状态。', 'Sub Sample232_1()@         Workbooks.Open ThisWorkbook.Path &amp; \"\\Sample232_2.xlsx\"@         <cite> #打开Sample232_2.xlsx文件</cite>@         Workbooks.Open ThisWorkbook.Path &amp; \"\\Sample232_3.xlsx\"@         <cite> #打开Sample232_3.xlsx文件</cite>@         Windows(ThisWorkbook.Name).Activate@         <cite>#把现在的book(Sample232.xlsm)のwindow变成active状态</cite>@         MsgBox \"活动窗口的标题：\" &amp; vbLf _@            &amp; ActiveWindow.Caption@         <cite>#表示active window的标题</cite>@    End Sub', '这里，打开多个book后，把现在的book变成active状态，也在messagebox中把active window在标题表示了出来。\n         ThisWorkbook表示了现在的book（执行macro所包含的book）。Path特征，取得了该book的保存路径。', '/images/zhiku/TipsNO232-001.png', '/images/zhiku/TipsNO232-002.png', '', '', '', '(打开多个book后表示活动的window)', '(活动的window被表示出来)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('233', '233', '排列window', 'Arrange 方法', 'Arrange方法，是排列所有打开的window的方法。和「windowの排列」对话框是一样的操作。但不会排列最小化的window。在参数ArrangeStyle中指定了排列的方法。如里参数ActiveWorkbook设置成True，只能操用activebook这样的对象。参数SyncHorizontal/SyncVertical，如里指定的话，会同步横向(SyncHorizontal)和纵向(SyncVertical)的滚动条。', 'Sub Sample233_1()@          Workbooks.Open ThisWorkbook.Path &amp; \"\\Sample233_2.xlsx\"@          <cite>#打开Sample233_2.xlsx文件</cite>@          Workbooks.Open ThisWorkbook.Path &amp; \"\\Sample233_3.xlsx\"@          <cite>#打开Sample233_3.xlsx文件</cite>\\@          Windows.Arrange 　　ArrangeStyle := xlArrangeStyleHorizontal@          <cite>#三个window上下排列</cite>\\@    End Sub', '参数ArrangeStyleに指定する値は、次のようになります。这里，打开加的两个book，共打开的三个book以上下排列。', '', '', '', '', '', '', '', '2017-11-30 14:05:01', null, null, '[{\"title\":\"参数ArrangeStyle里的XLArrangeStyle类\",\"heads\":[\"类\",\"说明\"],\"rows\":[[\"xlArrangeStyleCascade\",\"重复表示\"],[\"xlArrangeStyleHorizontal\",\"上下排列表示\"],[\"xlArrangeStyleTiled\",\"并列表示\"],[\"xlArrangeStyleVertical\",\"左右排列表示\"]]}]');
INSERT INTO `t_tips` VALUES ('234', '234', '打开同一window的副本', 'NewWindow 方法', 'NewWindow，是作成指定的window复本的方法。', 'Sub Sample234_1()@          ThisWorkbook.NewWindow@          <cite> #作成这个book的window复本</cite>@          Windows.Arrange     ArrangeStyle :=  xlArrangeStyleVertical@          <cite> #把window复本左右排列</cite>@    End Sub', '这里，把当前book的window作成副本，然后左右排列表示。作同一book的副本时，在book中分开排列便于比较。', '/images/zhiku/TipsNO234-001.png', '/images/zhiku/TipsNO234-002.png', 'Excel2013和以前的版本', '在Excel2013中，采用了SDI(单文件接口)。通过SDI,使每个book都有应用窗口。正因为如此，NewWindow方法的处理结果和之前的也有所不同。\n        \n        Excel2013前，要打开Applicatio窗口中的book窗口，如果Appliation窗口是【标准】\n        大小的话，是在它上面打开的了一个新窗口。与此相对地，Excel2013重新打了窗口，可以调整原窗口和新窗口在桌面的大小。', '', '(复制窗口前)', '(复制窗口后左右并列显示)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('235', '235', '把窗口排列来进行比较', 'CompareSideBySideWith 方法', 'CompareSideBySideWith 方法，可以把两个窗口以[排列比较模式]来打开。[排列比较模式]，因为滚动条是同步的，可以方便的进行sheet或者是book间的数据确认。', 'Sub Sample235_1()@         Workbooks.Open ThisWorkbook.Path &amp; \"\\Sample235_2.xlsx\"@         <cite> #打开Sample235_2.xlsx文件</cite>@         Windows.CompareSideBySideWith    ThisWorkbook.Name@         <cite> #以[排列比较模式]表示已经打开的和现在的book</cite>@    End Sub', '这里。新打开了「Sample235_2.xlsx」文件，与macro中的book以[排列比较模式]进行表示。[排列比较模式]，指定时间的活动单元格位置不同，表示的表位置也不同，所以不能准确比较。这样的情况，使用GoTo方法，把活动单元格放到同一位置再进行比较。关于GoTo方法，请参照Tip103。', '/images/zhiku/TipsNO235-001.png', '/images/zhiku/TipsNO235-002.png', '', '', '', '([排列比较模式]表示前)', '([排列比较模式]表示后)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('236', '236', '获取/设定Window的标题', 'Caption 属性', 'Caption 属性，是取得/设定在窗口标题栏中表示的标题的一种属性。如果在Object中指定了Application对象，在这种情况下，也指定了Window对象，那么Application对象名就是以book名为对象的。然而，标题栏中表示的book名的后缀名是根据OS设置的表示/非表示来显示，新建的未保存的book没有后缀名。', 'Sub Sample236_1()@         Application.Caption = \"意思\"　　@         <cite> #改变Application标题</cite>@         ActiveWindow.Caption = \"散步\"　@         <cite>#改变window标题</cite>@         MsgBox  \"Application标题 :\" _@             &amp; Application.Caption &amp; vbLf _@             &amp; \"窗口标题:\" _@             &amp; ActiveWindow.Caption@             <cite>#值分别在messagebox中表示</cite>@         Application.Caption = \"\"　　　@         <cite>#初期化Application标题</cite>@         ActiveWindow.Caption = ActiveWorkbook.Name@         <cite>#初期化window标题</cite>@    End Sub', '这里，Appication和Window在标题都被改变了。message表示后，又回复到原来的表示内容。', '/images/zhiku/TipsNO236-001.png', '/images/zhiku/TipsNO236-002.png', '', '', '', '(标题变化前)', '(标题变化后)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('237', '237', '改变 Window的显示倍数', 'Zoom特性', 'Zoon属性，是取得/设定window的显示倍数的特性。可以指定的范围是10%到400%。如果设定成True，会自适应到当前选择的范围。Zoom属性的设定仅限于活动的sheet。', 'Sub Sample237_1()@           ActiveWindow.Zoom = ActiveWindow.Zoom * 1.5@          <cite>#以1.5倍表示现在的活动窗口</cite>@    End Sub', '这里，以1.5倍显示了活动的window。Zoon属性取得了现在的显示倍数，然后再以1.5倍来设置新的Zoom属性。\n        然而，不应该是150%的显示倍数，请注意一下。Zoom属性，也可以像这样取值。', '/images/zhiku/TipsNO237-001.png', '/images/zhiku/TipsNO237-002.png', '设置与选择范围自适应的显示倍数', 'Zoom属性设置成True，会设定与选择范围自适应的显示倍数。\n        \n        \n        下面的例子，选择包含单元格A1的范围，然后设定与此范围相匹配的大小。', '', '(表示倍数变化前)', '(表示倍数变化后)', '2017-11-30 14:05:01', null, null, '');
INSERT INTO `t_tips` VALUES ('238', '238', '固定window在边框', 'FreezePanes特性', 'object.FreezePanes/Object.FreezePanes = expression', 'Sub Sample238_1()@          Range(\"B2\").Select@          <cite>#选择单元格B2</cite>@          ActiveWindow.FreezePanes = True@          <cite>#固定window边框</cite>@    End Sub', '这里，选择单元格B2后，固定了window边框。执行程序后，固定在了单元格的左上方。', '/images/zhiku/TipsNO238-001.png', '/images/zhiku/TipsNO238-002.png', '解除window线的固定', '解除window边框的固定，把FreezePanes属性设置成True。下面的例子，解除了window边框的固定。如果window边框没被固定执行该例子会报错。', '', '(窗口边框固定前)', '(窗口边框固定后)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('239', '239', '分割window', 'SplitRow属性/SplitColumn属性', 'SplitRow属性是把window上下分割，SplitColumn属性是把window左右分割，分别在window的上方和左方显示指定的行列数。再次执行window分割时，必须解除之前的分割。', 'Sub Sample239_1()@          With ActiveWindow@          <cite>#针对active window进行处理</cite>@          SplitRow = 1@          <cite>#在window上方显示一行</cite>@              .SplitColumn = 1@              <cite>#在window左方显示一行</cite>@          End With@    End Sub', '这里，如window的上方1行、左侧1列这样的显示进行分割。', '/images/zhiku/TipsNO239-001.png', '/images/zhiku/TipsNO239-002.png', '把active window作为基准进行window分割', '以活动单元格作基准进行window分割时，使用Split属性。下面的例子，是以活动单元格的左侧和上方为基准进行window分割。\n        \n         解除window分割时，Split属性设置成False。', '', '(窗口分割前)', '(窗口分割后)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('240', '240', '设定显示画面的上方行和左端列', 'ScrollRow属性/ScrollColumn属性', 'ScrollRow属性是取得/设定window边框或者window内左端显示的行序号，ScrollColumn属性则是取得/设定列的。如果一起使用，目标单元格会显示在左上端。', 'Sub Sample240_1()@          With ActiveWindow@          <cite>#针对active window的处理</cite>@          ScrollRow = Range(\"B4\").Row@          <cite>#设置单元格B4的行序号</cite>@              .ScrollColumn = Range(\"B4\").Column@              <cite>#设置单元格B4的列序号</cite>@          End With@    End Sub', '这里，在单元格B4的左端设定。ScrollRow属性取得了单元格B4的行的属性并进行设置，ScrollColumn属性取得了单元格B4在列的属性并进行设置。', '/images/zhiku/TipsNO240-001.png', '/images/zhiku/TipsNO240-002.png', '以活动单元格为基准对window进行分割', 'ScrollRow属性/ScrollColumn属性，也可以取值。下面的例子，在messagebox中表示了画面显示的最开始行在哪一行。', '', '(单元格B4在画面的左上端)', '(滚动条滚动，单元格B4在左上端表示)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('241', '241', '窗口最大化/最小化表示', 'WindowState 属性', 'WindowState属性，是设置window的最大化、最小化等的状态的属性。\n                在object中指定了Application对象，指定Excel的Application window和window对象的时候，\n                可以取得/设置book window的状态。', 'Sub Sample241()@        ActiveWindow.WindowState = xlNormal@        <cite>#把活动窗口设置成[标准]</cite>@    End Sub', '这里，把active window设置成了[标准]。请先把window最大化。\n                从Excel2013开始，使用了变成MDI(Match Document Interface)的SDI(Single Document Interface)。\n                所以，这个处理结果会和以前版本的有所不同。', '/images/zhiku/TipsNO241-003.png', '/images/zhiku/TipsNO241-004.png', '', '', '', '(窗口最大化)', '(窗口变成[标准])', '2017-11-30 14:05:02', null, null, '[{\"title\":\"设置WindowState属性的XIWindowState的定值\",\"heads\":[\"定值\",\"说明\"],\"rows\":[[\"xlMaximized\",\"最大化\"],[\"xlMinimized\",\"最小化\"],[\"xlNormal\",\"标准\"]]}]');
INSERT INTO `t_tips` VALUES ('242', '242', '窗口横纵宽度的取得/设定', 'Width/Heigth 属性', '利用Width/Height 属性,可以对窗口大小(Width属性-宽，Height属性-高)进行取得/设定。\n                值精确到小数点型（单位是point，1point约0.35mm）。\n            \n                指定Application对象的情况，Application窗口的大小可以进行取得/设定。\n                指定窗口对象的情况，窗口的大小可以进行取得/设定。', 'Sub Sample242()@        With ActiveWindow	<cite>#以活动的窗口为对象</cite>@            .WindowState = xlNormal    <cite>#把窗口设成[标准]</cite>@            .Height = 250       <cite>#宽设成250point</cite>@            .Width = 400        <cite>#高设定400point</cite>@        End With@    End Sub', '这里，变更窗口大小需要把窗口设成【标准】。\n                如果窗口是最大化，设置Height和Width属性会报错。', '/images/zhiku/TipsNO242-003.png', '/images/zhiku/TipsNO242-004.png', '', '', '', '(窗口位置变化前)', '(窗口位置变化后)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('243', '243', '窗口显示位置的取得/设定', 'Top/Left 属性', 'Window的显示位置，通过Top属性（画面上端位置）和Left属性（画面右端位置）来进行取得/设定。\n                值精确到小数点型（单位是point，1point约0.35mm）。', 'Sub Sample243()@        With ActiveWindow   <cite>#以活动窗口为对象</cite>@            .WindowState = xlNormal   <cite>#把窗口设成【标准】</cite>@            .Top = 30       <cite>#表示位置为从上方30point开始</cite>@            .Width = 400    <cite>#表示位置从左端50point开始</cite>@        End With@    End Sub', '这里，如里窗口状态为[标准]，那么通过最大化的窗口来指定Top属性和Left属性会报错。', '/images/zhiku/TipsNO243-003.png', '/images/zhiku/TipsNO243-004.png', '', '', '', '(窗口位置变化前)', '(窗口位置变化后)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('244', '244', '窗口大小不可变化的设定', 'EnableResize 属性', 'EnableResize属性，是指定窗口大小可变·不可变的属性。\n                如果想让窗口大小不可变的话，把属性设定成False即可。', 'Sub Sample244()@        With ActiveWindow   <cite>#以活动窗口为对象</cite>@            .WindowState = xlNormal   <cite>#把窗口设成【标准】</cite>@            .Top = 30               <cite>#表示位置为从上方30point开始</cite>@            .Width = 400            <cite>#表示位置从左端50point开始</cite>@            .EnableResize = False   <cite>#窗口大小不可变化</cite>@        End With@    End Sub', '这里，首先把活动窗口设置成[标准]。因为如果在窗口最大化的状态下设置EnableResize的话，会报错。\n                设置成[标准]后，设置窗口表示位置，然后把窗口大小设成不可变。然而，Excel2013这个命令是无效的(窗口大小可变)。', '/images/zhiku/TipsNO244-003.png', '/images/zhiku/TipsNO244-004.png', '', '', '', '(窗口大小设置不可变前)', '(窗口大小设置成不可变)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('245', '245', '窗口最大化大小的取得', 'UsableHeight 属性/UsableWidth 属性', 'UsableHeight属性，是取得Application领域内可以使用的窗口的高,UsableWidth属性是取得宽，单位为point。', 'Sub Sample245()@        Application.WindowState = xlMaximized       <cite>#窗口最大化</cite>@        MsgBox \"最大化窗口的宽：\" _@            &amp; ActiveWindow.Width &amp; vbCrLf _        <cite>#取得高</cite>@            &amp; \"最大化窗口的高：\" _@            &amp; ActiveWindow.Height &amp; vbCrLf _       <cite>#取得宽</cite>@            &amp; \"可以使用的窗口的高\" _@            &amp; Application.UsableWidth &amp; vbCrLf _  <cite>#取得可以使用的宽度</cite>@            &amp; \"可以使用的窗口的高\" _@            &amp; Application.UsableHeight            <cite>#取得可以使用的高</cite>@    End Sub', '这里，取得了应用窗口领域内可以使用的宽和高。因为这个和窗口最大化时的值不同，所以这些值在messagebox中表示。\n            \n            \n                求得窗口最大化时的宽和高，使用Window对象的Width属性和Height属性。\n            \n            \n                求得可以使用的领域时，使用Application对象的UsableWidth属性和UsableHeight属性。\n                指定对象不同求得的宽和高不同，这一点请注意。', '/images/zhiku/TipsNO245-003.png', '/images/zhiku/TipsNO245-004.png', '', '', '', '(求Application窗口可以使用的领域)', '(表示可以使用领域的宽和高)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('246', '246', '窗口显示/非显示切换', 'Visible 属性', 'Visible属性，是设示窗口显示/非显示的属性。\n                如果只是程序使用的book，用户没必要接触，这时就把该属性指定成False。', 'Sub Sample246()@        With ThisWorkbook.Window(1)@        <cite>#把该book的一个窗口作为对象</cite>@            .Visible = False      <cite>#把窗口设置成非表示</cite>@            MsgBox \"窗口是非显示状态，现在要再显示。\"@            <cite>#显示信息</cite>@            .Visible = True       <cite>#再显示窗口</cite>@        End With@    End Sub', '这里，如果窗口设成了非显示，显示message后，再次显示窗口。', '/images/zhiku/TipsNO246-003.png', '/images/zhiku/TipsNO246-004.png', '', '', '', '(窗口被表示)', '(窗口是非表示状态)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('247', '247', '更改边框线的设置', 'DisplayGridLines 属性/GridLineColor 属性/GridLineColorIndex属性', 'DisplayGridlines属性,是设置边框线显示/非显示的。True的情况显示边框线。\n                GridlineColor/GridlineColorIndex属性是指定边框线颜色的。GridlineColor属性是用RGB的值来设定颜色的。', 'Sub Sample247()@        With ActiveWindow@            MsgBox \"边线变成红色\"@            .GridlineColor = RGB(255,0,0)   <cite>#边线的颜色变成红色</cite>@            MsgBox \"边线恢复到原来的颜色\"@            .GridlineColorIndex = xlColorIndexAutomatic     <cite>#边线的颜色设置成自动</cite>@            MsgBox \"边线设置成非显示\"@            .DisplayGridlines = False       <cite>#不显示边线</cite>@            MsgBox \"边线再显示\"@            .DisplayGridlines = True        <cite>#显示边线</cite>@    End Sub', '这里，改变了边线的颜色设定，顺次执行显示/非显示切换。', '/images/zhiku/TipsNO247-003.png', '/images/zhiku/TipsNO247-004.png', '', '', '', '(边线设置前)', '(边线设置后)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('248', '248', '以分页预览的方式显示', 'View 属性', 'View属性,是用XLWindowView类中的定值指定窗口的表示的View的属性。\n                有标准view,分页预览，页面分布三种选择。', 'Sub Sample248()@        ActiveWindow.View = xlPageBreakPreview@        <cite>#以分页预览的方式显示</cite>@    End Sub', '把活动页面以分页预览在方式显示。View属性，就是这样针对Window对象使用的。\n                那么，View属性指定的值，如下所示。', '/images/zhiku/TipsNO248-003.png', '/images/zhiku/TipsNO248-004.png', '', '', '', '(分页预览表示前)', '(分页预览表示后)', '2017-11-30 14:05:02', null, null, '[{\"title\":\"设置WindowState属性的XIWindowState的定值\",\"heads\":[\"定值\",\"说明\"],\"rows\":[[\"xlNormalView\",\"标准view\"],[\"xlPageBreakPreview\",\"分页预览\"],[\"xlPageLayoutView\",\"页面分布（2007后）\"]]}]');
INSERT INTO `t_tips` VALUES ('249', '249', 'Sheet页标题显示/非显示切换', 'DisplayWorkbookTabs 属性', 'DisplayWorkbookTabs 属性，是切换sheet页显示/非显示的属性。\n                True的话，是显示，False的话，是非显示。也可以取值。', 'Sub Sample249()@        ActiveWindow.DisplayWorkbookTabs = False@        <cite>#不显示sheet页标题</cite>@    End Sub', '把活动的窗口sheet页标题设置成不显示。', '/images/zhiku/TipsNO249-003.png', '/images/zhiku/TipsNO249-004.png', '', '', '', '(sheet页标题设置前)', '(sheet页标题设置成非表示)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('250', '250', '在状态条中显示message', 'StatusBar 属性', 'StatusBar属性。是在状态条中表示文字的属性。可以取得/设定值。\n                状态条如果返回规定值的话，则设成False。', 'Sub Sample250()@        With Application    <cite>#针对Application对象进行处理</cite>@            .StatusBar = \"正在处理中，请稍等。\"@            <cite>#显示状态栏</cite>@            MsgBox \"正在处理\"@            .StatusBar = False@            <cite>#在状态栏中返回规定值</cite>@        End With@    End Sub', '这里，在状态栏中表示[正在处理，请稍候]后。在messagebox中显示。通常，表示messagebpx的地点，会有计时处理。\n            \n            \n                最后，关闭messagebox，状态栏中表示了规定值。', '/images/zhiku/TipsNO250-003.png', '/images/zhiku/TipsNO250-004.png', '', '', '', '(分页预览表示前)', '(分页预览表示后)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('251', '251', '提升程序的处理速度', 'ScreenUpdating属性', 'ScreenUpdating属性，是切换是否更新画面的属性。\n                通常，要进行画面更新处理，如果指定成False，那么就不进行更新处理。\n                对象为Application对象。', 'Sub Sample251()@        Dim I As Long@        Application.ScreenUpdating = False    <cite>#停止画面更新</cite>@        For i = 1 To 10000                    <cite>#循环一万次</cite>@            Cells(i,1).Value = i              <cite>#在A列输入数据</cite>@        End With@    End Sub', '这里，进行了输入A列数据的处理。这时，不执行画面更新处理。\n                为了确认处理速度不一样，执行后注释掉「Application.ScreenUpdating = False」行，再次执行。\n                执行和不执行更新处理，处理速度不一样，应该可以感受出来了。', '/images/zhiku/TipsNO251-003.png', '/images/zhiku/TipsNO251-004.png', 'ScreenUpdating程序一定要是False吗？', '程序执行中，worksheet的切换、大量输入数据等，画面改写处理很多的情况，通过不更新画面可以提升处理速度。\n                但是，没有画面改写处理的程序，这个处理是多余的，处理速度会变慢。\n            \n            \n                大部分的情况，中止画面更新处理这个的处理不是很多，这点请记住。', '', '(在A列输入数据)', '(不执行画面更新处理，进行高速处理)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('252', '252', 'Book参照', 'Workbooks属性', 'Workbooks属性，是参照被打开的全部的book的属性，\n                也可以利用参数index参照单一的book，省略的话，参照打开着的全部的book。\n            \n                index目录番号再指定为参数index，book名。', 'Sub Sample252()@        Workbooks.open ThisWorkbooks.path &amp; \"\\Sample252_2.xlsx\"@        <cite>#打开Sample252_2.xlsx文件</cite>@        MsgBox Workbooks(\"Sample252_2.xlsx\").Path@        <cite>#表示[Sample252_2.xlsx]的Path</cite>@    End Sub', '在这里，重新打开Book，使用Workbooks属性和Path属性取得打开了的[Sample252_2.xlsx]文件的Path。\n                Patn属性，是还指定了的Book的保存处的文件夹的属性。', '/images/zhiku/TipsNO252-001.png', '/images/zhiku/TipsNO252-002.png', '使用index番号', '这个例子，指定了为Workbooks属性的参数Book名,不过，也能指定index番号。\n                Index番号被付给打开的顺序。\n            \n            \n                如果以此次的例子说，在宏book以外的book没打开，\n                如果也没有个人用宏book，[Sample252_2.xlsx]的index成为「2」。', '', '(重新打开Book取得保存处)', '(保存处文件夹名被表示)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('253', '253', 'Activebook参照', 'ActiveWorkbook属性', 'ActiveWorkｂook属性，是参照Activeｂook的属性，1个窗口没被打开的时候，返回Nothing。', 'Sub Sample253()@        MsgBox ActiveWorkbook.FullName@        <cite>#表示Activebook的Path</cite>@    End Sub', '在这里，在MessageBox里表示Activebook的全路径。FullName属性是是还指定了的book的全路径的属性', '/images/zhiku/TipsNO253-001.png', '/images/zhiku/TipsNO253-002.png', 'ActiveWorkbook属性返回Nothing的情况', 'ActiveWorkbook属性，1个窗口没被打开返回Nothing，Nothingを返します。\n                下面的例子是是为了试验这个状况。\n                请以「Sample253.xlsm」以外的book没打开的状态实行。\n                在MessageBox里True应该被表示。', 'Sub Sample_253_2()@        windows(\"Sample_253.xlsm\") _@        .visible = False@        MsgBox ActiveWorkbook  _@        Is Nothing@        windows(\"Sample_253.xlsm\") _@        .visible = True@    End Sub', '(「Sample253.xlsm」进入活动)', '(Activebook的全路径被表示)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('254', '254', '激活book', 'Activate方法', 'Activate方法是激活指定book的方法。再者，Excel启动后，最初打开的book的番号变成【1】。\n                指定Workbooks属性的Index番号为【1】，最初能参照打开了的book。', 'Sub Sample254()@        Workbooks.open thisWorkbook.Path &amp; \"\\Sample254_2.xlsx\"@        <cite>#打开「Sample254_2.xlsx」</cite>@        Workbooks.open thisWorkbook.Path &amp; \"\\Sample254_3.xlsx\"@        <cite>#打开「Sample254_3.xlsx」</cite>@        Workbooks(\"Sample254_2.xlsx\").Activate@        <cite>#激活「Sample254_2.xlsx」</cite>@    End Sub', '这里,[Sample254_2.xlsx]文件和[Sample254_3.xlsx]文件按顺序打开,激活先打开的[Sample254_2.xlsx]文件.', '/images/zhiku/TipsNO254-001.png', '/images/zhiku/TipsNO254-002.png', '', '', '', '(重新打开book激活指定的文件)', '(「Sample254_2.xlsx」文件进入活动)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('255', '255', '作成新book', 'Add方法', 'Add方法是，作成新book的方法。用Add方法作成的book是，变成自动激活。\n            \n                同时，Add方法还新规作成返回Workbook项目.', 'Sub Sample255()@        Dim TempBook As Workbook@        Set TempBook = Workbooks.Add@        <cite>#追加book，代入参照变数</cite>@        MsgBox TempBook.Name@        <cite>#被代入的变数表示为book的名字</cite>@    End Sub', '这里，新追加book，代入所有客观参照变量。Workbook客观的Add方法是，\n                因为还重新制作了book的方法，可能这样的记述。\n            \n            \n                如果由于这样做的事，对重新追加了的book也进行处理，确实能处理。', '/images/zhiku/TipsNO255-001.png', '/images/zhiku/TipsNO255-002.png', '新追加的book名', '新追加book的场合，【Book】按顺序分配名字，并且，没有扩展名。', '', '(新追加book)', '(表示新追加的book)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('256', '256', '保存打开着的book', 'Open方法', 'Open方法，是打开book的方法.参数Filename,指定book的Path和book名为对象。\n                省略Path的话，现在文件夹成为对象。\n                Open方法，返回打开了的book的参照。', 'Sub Sample255()@        Dim TargetBook As Workbook@        Set TargetBook = _@        Workbooks.Open(ThisWorkbook.Path &amp; \"\\Sample256_2.xlsx\")@        <cite>#代入打开「Sample256_2.xlsx」的变量</cite>@        MsgBox TargetBook.Name@        <cite>#表示文件名</cite>@    End Sub', '在这里，代入打开「Sample256_2.xlsx」参照变量。\n                Open方法是返回打开了的book的参照，能这样的记述。\n                此后，使用那个变量在msgbox里表示文件名。\n            \n            \n                Open方法的参数及那个说明，指定参数UpdateLinks的值，是以下的这些。', '/images/zhiku/TipsNO256-001.png', '/images/zhiku/TipsNO256-002.png', '', '', '', '(打开指定book)', '(Sample256_2.xlsx打开)', '2017-11-30 14:05:02', null, null, '[{\"title\":\"open方法的参数\",\"heads\":[\"参数\",\"含义\"],\"rows\":[[\"FileName\",\"指定打开book的文件名「不可以省略」\"],[\"UpdateLinks\",\"指定link的更新方法「可以省略」\"],[\"ReadOnly\",\"True是只读打开的。规定值是False「可以省略」\"],[\"Format\",\"指定打开文本文件的分隔字符「可以省略」\"],[\"Password\",\"指定读出密码「可以省略」\"],[\"WriteResPassword\",\"指定写入密码「可以省略」\"],[\"lgnoreReadOnlyRecommended\",\"如果值为True,则不显示建议只读消息「可以省略」\"],[\"Origin\",\"日语版Excel指定无效。为了正确认识文本文件的回车/换行「可以省略」\"],[\"Delimiter\",\"打开的文件是文本文件，并且参数Format为6，则此参数用于指定用作分隔符的字符「可以省略」\"],[\"Editable\",\"如果该文件为Excel4.0加载宏，会打开指定模板用于编辑「可以省略」\"],[\"Notify\",\"如果ReadOnly为False,则不请求任何通知,并且不能打开任何不可用的文件「可以省略」\"],[\"Converter\",\"打开文件时试用的第一个文件转换器的索引号「可以省略」\"],[\"AddToMRU\",\"如果值为True,追加到最近使用了的文件列表中「可以省略」\"]]},{\"title\":\"指定变量UpdateLinks的值\",\"heads\":[\"定数\",\"值\",\"外部引用\",\"远程引用\"],\"rows\":[[\"False\",\"0\",\"不更新\",\"不更新\"],[\"xlUpdateLinksUserSetting\",\"1\",\"更新\",\"不更新\"],[\"xlUpdateLinksNever\",\"2\",\"不更新\",\"更新\"],[\"xlUpdateLinksAlways\",\"3\",\"更新\",\"更新\"]]}]');
INSERT INTO `t_tips` VALUES ('257', '257', '对话框打开指定工作簿', 'GetOpenFilename方法', 'GetOpenFilename方法，是表示[打开文件]的对话框，是返还对话框选择的文件名的方法。\n                只是返还文件名，实际文件不打开。要打开选择的文件，和Open方法组合。', 'Sub Sample257()@        Dim Path As Variant@        Path = Application  _@            .GetOpenFilename _@            (FileFilter:= \"资料(*.xlsx;*.xlsm),*.xlsx;*.xlsm\" &amp; _@            \",数据(*.csv),*.csv\" _@            , FilterIndex:=2, Title:=\"选择文件\" _@            , MultiSelect:=False)@        <cite>#[打开文件]对话框打开</cite>@        If VarType(Path) = vbBoolean Then Exit Sub@        <cite>#「取消」被单击的时候处理</cite>@        MsgBox \"被选择的文件:\" &amp; Path@        <cite>#表示被选择的文件的路径</cite>@    End Sub', '打开[打开文件]对话框，使用对话框，扩展名为.xlsx，xlsm，csv的文件被表示。\n                标题是[文件选择]，[文件种类]框，在2号显示过滤指定[数据(*.csv)]。同时，文件不能复数选择。\n            \n            \n                接着，[打开文件]对话框，做[取消]被按下的判断，GetOpenFilename方法的返回值，\n                如果单击了[取消]按钮，返还内部处理形式Boolean的Variant型的值。\n                在那里，使用VarType函数，检查数据型。\n            \n            \n                最后，被选择的消息箱上显示文件名。\n            \n            \n                关于GetOpenFilename方法的参数，请参照以下。', '/images/zhiku/TipsNO257-001.png', '/images/zhiku/TipsNO257-002.png', '参数FileFilter的指定方法', '指定必要的数为参数FileFilter，文件过滤器-字符串和通配符组合。\n                文件过滤器-字符串和通配符「(，comma)」断开，各组合也用「」指定断开。\n                各组合，被[文件的种类]箱的目录表示。例如，文本文件和Excel文件的2个文件过滤器，\n                \"文本文件(*.txt),*.txt,Excel文件(*.xlsx),*.xlsx\"一样地指定。\n            \n            \n                1个文件过滤器，让字符串要对应复数的通配符，像\"Excel文件(*.xlsx;*.xlsm),*.xlsx;*.xlsm\"一样地，\n                用「(;分号)」断开各通配符。\n            \n            \n                省略参数[FileFilter]指定的\"全部文件(*.*),*.*\"。', '', '(显示[打开文件]对话框)', '([打开文件]对话框被显示了)', '2017-11-30 14:05:02', null, null, '[{\"title\":\"GetOpenFilenameメソッドの引数\",\"heads\":[\"参数\",\"意义\"],\"rows\":[[\"FileFilter\",\"指定文件的种类的字符串(文件过滤器字符串)的[省略可能]。省略全部文件。\"],[\"FilterIndex\",\"在用参数FileFilter指定了的文件过滤器字符串中，指定把第几号的过滤器作为值的[省略可能]\"],[\"Title\",\"指定对话框标题的[省略可能]\"],[\"ButtonText\",\"Macintosh指定可能[省略可能]\"],[\"MultiSelect\",\"能选择复数的文件(True)，1个文件以外不能选择(False:既定值)[省略可能]\"]]}]');
INSERT INTO `t_tips` VALUES ('258', '258', '对话窗口打开指定书', 'FileDialog属性', 'FileDialog的属性、样式种类的文件可以在对话窗口中表示出来。\n                [文件的打开]对话窗口、引数fileDialogType在msoFileDialogOpen指定方法。\n                Show方法在对话窗口显示。Execute 方法 的使用选择打开文件夹。', 'Sub Sample258()@        With Appliction.FileDialog (msoFileDialogopen)@        <cite>#[文件的打开]对话窗口指定</cite>@            .AllowMultiSelect = true    <cite>#文件的几个选择方式</cite>@            With .Filters@                .Add\"Excleブック\",\"*.xlsx\"@                .Add\"Excleマクロ有効ブック\",\"*.xlsｍ\"    <cite>#文件的设定</cite>@            End With@            If  .Show=-1 Then    <cite>#对话窗口的表示</cite>@                .Execute        <cite>#打开文件</cite>@            End If@        End With@    End Sub', '[ 打开文件]对话窗口的表示。在这里，可以选择多个文件，文件的过滤器，Excel书和Excel宏观有效书。\n                Show方法是对话窗口实际显示。点击“打开”按钮，显示方法True返回值，所以判定。\n                “打开”按钮被点击的时候，Execute方法中举行。变量fileDialogType可以指定的值如下。', '', '', '', '', '', '', '', '2017-11-30 14:05:02', null, null, '[{\"title\":\"变量的指定MsoFileDialogType等级常数\",\"heads\":[\"常数\",\"讲解\"],\"rows\":[[\"msoFileDialogFilePicker\",\"[文件的参照] 对话窗口\"],[\"msoFileDialogFolderPicker\",\"[文件夹的参照] 对话窗口\"],[\"msoFileDialogOpen\",\"[文件的打开] 对话窗口\"],[\"msoFileDialogSaveAS\",\"[文件的打开] 对话窗口\"]]}]');
INSERT INTO `t_tips` VALUES ('259', '259', '工作簿的覆盖保存', 'Save方法', 'Save方法，保存指定工作簿的变更。如果第一次保存工作簿，使用只读的工作簿的话，\n                自动地附有象「Book1」一样的名字。', 'Sub Sample259()@        Dim Target As Workbook@        Set Target = _@            Workbooks.open(ThisWorkbook.Path &amp; \"\\Sample259_2.xlsx\")@        <cite>#打开Sample259_2.xlsx</cite>@        Target.Save@        <cite>#保存打开的文件</cite>@    End Sub', '这里，打开「Sample259_2.xlsx」，接那样覆盖保存。实际，各种各样的处理要被执行。', '/images/zhiku/TipsNO259-001.png', '', '保存新规工作簿', '下面的样品，用Save方法保存新规工作簿，这个情况下，像【Book1】这样的文件名能自动添加。\n            \n            \n                                    \n                \n            \n            \n                ▼\n                [Book1.xlsx]名字被添加', 'Sub Sample259_2()@        Dim Target As Workbook@        Set Terget = Workbooks.Add@        Target.Save@    End Sub', '', '', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('260', '260', 'book另存为', 'SaveAs方法', 'SaveAs方法，是给book加上名字保存的方法。指定参数FileName为保存的文件名。', 'Sub Sample260()@        Dim Target As Workbook@        Set Target = Workbooks.Add      <cite>#追加book</cite>@        Target.SaveAs ThisWorkbook.Path &amp; \"\\\" _@            &amp; Format(Date,\"YYYYMMDD\")   <cite>#book另存为</cite>@    End Sub', '在这里，新做成book，作成的book用今天的日期作文件名保存。\n                日期以Data函数取得，使用Format函数把格式变为「YYYYMMDD」。\n            \n            \n                SaveAs方法的各参数，指定参数FileFormat为主要的定数，是以下的这些。', '/images/zhiku/TipsNO260-001.png', '/images/zhiku/TipsNO260-002.png', '如果已经有同名的文件', '如果在保存的地方已经有同名的文件，显示要覆盖保存的message。\n            \n            \n                无视已经存在的文件直接保存的场合，像下面一样地，对保存的时候把DisplayAlerts属性设为False。', 'Sub Sample260_2()@        Dim Target As Workbook@        Set Target = Workbooks.Add@        Application.DisplayAlerts _@            = False@        Target.SaveAs ThisWorkbook.Path _@        &amp; \"\\\" &amp; Format(Date,\"YYYYMMDD\")@        Application.DisplayAlerts _@            = True@    End Sub', '(保存新作的book)', '(以今天的日期保存book)', '2017-11-30 14:05:02', null, null, '[{\"title\":\"SaveAs方法的参数\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"Filename\",\"指定保存的文件名。可以包含完整路径，如果没有指定路径，则保存到当前的文件夹\"],[\"FileFormat\",\"指定保存文件时使用的文件格式。能指定的形式要使用XlFileFormat级的定数\"],[\"Password\",\"指定文件的保护密码，要区分大小写\"],[\"WriteResPassword\",\"指定文件的写入密码\"],[\"ReadOnlyRecommended\",\"如果值为True，则在打开文件时显示一条信息，提示该文件以只读方式打开\"],[\"CreateBackup\",\"要创建备份文件，指定为True\"],[\"AccessMode\",\"以XlSaveAsAccessMode类型的定数指定book的access mode\"],[\"ConflictResolution\",\"表示保存book的时候的冲突的解决方法。指定XlSaveConflictResolution类型的定数\"],[\"AddToMru\",\"如果值为True，则将该book添加到最近使用的文件列表中，默认值是False。\"],[\"TextCodepage\",\"Excel不能用全部的语言\"],[\"TextVisualLayout\",\"Excel不能用全部的语言\"],[\"Local\",\"如果值为True，则要以含Excel的语言(包含控制面板的设置)保存文件\"]]},{\"title\":\"参数FileFormat指定的XlFileFormat类型的主要的定数\",\"heads\":[\"名字\",\"值\",\"说明\"],\"rows\":[[\"xlAddln\",\"18\",\"Microsoft  Excel  97-2003插件\"],[\"xlAddln8\",\"18\",\"Microsoft  Excel  97-2003插件（Excel2007以下）\"],[\"xlCSV\",\"6\",\"CSV\"],[\"xlExcel12\",\"50\",\"Excel12\"],[\"xlExcel5\",\"39\",\"Excel5\"],[\"xlExcel7\",\"39\",\"Excel7\"],[\"xlExcel8\",\"56\",\"Excel8(Excel2007以下)\"],[\"xlExcel9795\",\"43\",\"Excel9795\"],[\"xlHtml\",\"44\",\"HTML形式\"],[\"xlTemplate\",\"17\",\"模版\"],[\"xlTemplate8\",\"17\",\"模版(Excel2007以下)\"]]}]');
INSERT INTO `t_tips` VALUES ('261', '261', '确认同名的book打开', 'SaveAs方法', 'SaveAs方法，是给book加上名字保存的方法。使用同名的book，打开的时候会发生错误。利用这个检查同名的book是否存在。关于SaveAs方法的参数，请参照Tips260。', 'Sub Sample261_1()@          Dim Target As Workbook@          Set Target = Workbooks.Add@          <cite>##作成新的book</cite>@          On Error Resume Next@          <cite>##开始处理错误</cite>@          Target.SaveAs   \"Sample261.xlsm\"@          <cite>##把新作成的book另存为</cite>@          If Err.Number &lt;&gt; 0 Then@          <cite>##确认是否发生错误</cite>@                MsgBox \"同名的文件已经打开\"@                <cite>##如果发生了的处理</cite>@          End If@    End Sub', '在这里，作成新的book，保存这个宏包含的同样的名字的book。因为已经有同名的book打开着，发生错误,不过，可以用On Errror声明处理避开停止的情况。并且，如果用Number属性判断错误的发生，错误发生的场合表示message。', '/images/zhiku/TipsNO261-001.png', '/images/zhiku/TipsNO261-002.png', '', '', '', '(同名的文件是否存在的检查)', '(message被表示了)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('262', '262', '确认同名的book打开', 'SaveAs方法', '使用SaveAs方法的话，能用各种各样的文件格式保存Excel book。保存以comma作为分隔符的文本文件(CSV形式)的话，要指定参数FileFormat为xlCSV。CSV形式的文件通用性高，各种各样的应用软件都可以活用数据。关于SaveAs方法的参数，请参照Tips260。', 'Sub Sample262_1()@          ThisWorkbook.SaveAs  _@               Filename:=ThisWorkbook.Path  &amp;  \"\\Data.csv\"  _@               ,  FileFormat:=xlCSV,   Local:=True@          <cite>##用Data.csv这个名字保存现在的book</cite>@    End Sub', '在这里，同样的文件夹用「Data.CSV」的名字保存包含这个宏的book。为了以CSV形式保存，指定参数FileFormat为xlCSV。同时，指定参数Local为True，指定数值和日期的格式和个人电脑的设定协调一致。', '/images/zhiku/TipsNO262-001.png', '/images/zhiku/TipsNO262-002.png', '', '', '', '(以CSV形式保存)', '(以CSV形式被保存了)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('263', '263', '以Page形式保存', 'SaveAs方法', '使用SaveAs方法的话，能以网页形式保存book。以网页形式保存的话，要将参数FileFormat指定为xlHtml关于SaveAs方法的参数，请参照Tips260。', 'Sub Sample263_1()@          #ThisWorkbook.SaveAs _@                Filename:=ThisWorkbook.Path &amp; \"\\Data.html\" _@                 ,  FileFormat:=xlHtml@          <cite>##用data.html文件保存这个book</cite>@    End Sub', '在这里，同样的文件夹用「Data.html」的名字保存，则包含这个宏的book。以HTML形式保存，则指定参数FileFormat为xlHtml。', '/images/zhiku/TipsNO263-001.png', '/images/zhiku/TipsNO263-002.png', '图像文件的取得', '以网页形式保存的话，book内粘贴着能作为图像文件取出的图像。', '', '(HTML形式保存)', '(保存为HTML形式)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('264', '264', '表示对话框并保存book(1)', 'GetSaveAsFilename方法', 'GetSaveAsFilename方法是，表示[另存为]对话框。GetSaveAsFilename方法是，用对话框指定文件名和路径，不过，不能保存实际的book，要利用SaveAs方法保存。', 'Sub Sample254_1()@          Dim TargetBook As Workbook@          Dim SaveFileName As Variant@          Set TargetBook = Workbooks.Add@          <cite>##作成新的book</cite>@          SaveFileName = Application.GetSaveAsFilename  _@                (InitialFileName:=\"练习\", _@                FileFilter:=\"Excel文件(*.xlsx;*.xlsm),*.xlsx;*.xlsm\" _@                ,Title:=\"指定保存的文件名\")@          <cite>##取得保存的文件名</cite>@          If VarType(SaveFileName) = vbBoolean  Then  Exit  Sub@          <cite>##单机「取消」按钮，处理终了</cite>@          #TargetBook.SaveAs   SaveFileName@          <cite>##用指定了的名字保存book</cite>@    End Sub', '在这里，作成新的book，用[另存为]对话框指定了保存用的文件名。用Add方法作成新的文件，用GetSaveAsFilename方法取得保存用的文件名，这个时候，指定参数InitialFilename为[练习]，指定保存的文件名的已经存在的值。\n        GetSaveAsFilename方法，如果单击了[取消]按钮，因为返回内部处理形式Boolean型的Variant型的值，以VarType函数判断是不是单击了[取消]按钮。那之后，保存文件。\n        关于GetSaveAsFilename方法的各参数，请参照以下。', '/images/zhiku/TipsNO264-001.png', '/images/zhiku/TipsNO264-002.png', '', '', '', '(显示[另存为]对话框)', '([另存为]对话框被显示)', '2017-11-30 14:05:02', null, null, '[{\"title\":\"GetSaveAsFilename的参数\",\"heads\":[\"名字\",\"说明\"],\"rows\":[[\"InitialFilename\",\"指定建议的文件名，如果省略，将作业中的book作为建议的文件名\"],[\"FileFilter\",\"指定文件的候选的字符串(文件筛选条件的字符串)\"],[\"FilterIndex\",\"在用参数FileFilter指定了的筛选条件的字符串中，指定把第几号的值作为默认值\"],[\"Title\",\"指定对话框标题\"],[\"ButtonText\",\"仅用于Macintosh\"]]}]');
INSERT INTO `t_tips` VALUES ('265', '265', '表示对话框并保存book(2)', 'FileDialog属性', '指定msoFileDialogSaveAs为FileDialog属性的参数、表示[另存为]对话框。关于组合Show方法和Execute方法，可以保存选择了的book。', 'Sub Sample265_1()@          Dim TargetBook As Workbook@          Set TargetBook = Workbooks.Add@          <cite>##追加新的book</cite>@          TargetBook.Activate@          <cite>##激活追加的book</cite>@          With   Application.FileDialog(msoFileDialogSaveAs)@          <cite>##表示「另存为」对话框</cite>@               If .Show = True Then@               <cite>##判断是否按下「保存」按钮</cite>@                    .Execute@                    <cite>##保存book</cite>@               End   If@          #End  With@    End Sub', '在这里,作成新的book,「另存为」对话框以被指定了的文件名保存。用Add方法作成新的文件,激活那个book之后,使用FileDialog表示「另存为」对话框。\n            点击「保存」按钮,Show方法返回True。如果「保存」按钮被点击了,用Execute方法保存book。', '/images/zhiku/TipsNO265-001.png', '/images/zhiku/TipsNO265-002.png', '', '', '', '(表示「另存为」对话框)', '(「另存为」对话框被表示)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('266', '266', '变更当前的文件夹并保存', 'ChDir path', '利用ChDir函数,能变更当前的文件夹。省略盘符,被看作当前的盘符被指定了。', 'Sub Sample266_1()@          Dim tempDir As String@          tempDir  = CurDir@          <cite>##把当前的文件夹赋给变量</cite>@          ChDir   ThisWorkbook.Path   &amp;  \"\\Data\"@          <cite>##把当前文件夹做为在这个book的保存处的「Data」文件夹</cite>@          Workbooks.Add.SaveAs    \"Sample266_2.xlsx\"@          <cite>##追加新的book,用「Sample266_2.xlsx」的名字保存</cite>@        　#ChDir   tempDir@          <cite>##返回当前的文件夹</cite>@    End Sub', '在这里，变更当前的文件夹,在那个文件夹里作成新的book并保存,SaveAs方法是,省略保存处的路径,在当前文件夹里保存book。\n        在最后时，从原来的文件夹返还当前文件夹,结束处理。', '/images/zhiku/TipsNO266-001.png', '/images/zhiku/TipsNO266-002.png', '关于当前文件夹', '关于当前文件夹,是Excel在那个时刻要工作对象的文件夹。紧接之前打开文件保存,那个文件夹就变成当前文件夹。Excel的option能设定「既定的文件的地方」是,Excel在启动时设定为当前文件夹的文件夹。', '', '(变更当前的文件夹,保存book)', '(book被保存在变更后的文件夹里)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('267', '267', '检索文件名之后保存', 'Dir函数', 'Dir函数是，Dir函数，检索与指定了的名字和属性相符的文件和文件夹如果找到了的场合是文件名，没找到的场合是返回「\"\"(长度0字符串)」。', 'Sub Sample267_1()@          Dim temp1 As String@          Dim temp2 As String@          temp1 =  ThisWorkbook.Path  &amp;  \"\\Data\\Data267.xlsm\"@          <cite>#保存文件名</cite>@          temp2 =  ThisWorkbook.Path  &amp;  \"\\Data\\Data267_bk.xlsm\"@          <cite>#如果保存的地方有这个文件，则变更文件名</cite>@          If Dir(temp1) &lt;&gt; \"\" Then@          <cite>#文件是否存在check</cite>@               Name temp1 As temp2@               <cite>#如果文件存在变更名字</cite>@          End   If@          ThisWorkbook.SaveAs   temp1@          <cite>#另起名保存当前的book</cite>@    End Sub', '在这里，给当前的book加上「Data.xlsm」名字保存。那个时候，对事前同样的名字的文件是不是存在确认，有同样的名字的场合，既存的[Data267.xlsm]文件的名字变更为[Data267_bk.xlsm]。\n            那之后，用[Data.xlsm]的名字保存当前的book。', '/images/zhiku/TipsNO267-001.png', '/images/zhiku/TipsNO267-002.png', '', '', '', '(文件存不存在检查并保存)', '(既存的文件被改名，文件被保存了)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('268', '268', '调查book的保存地方', 'Path属性', 'Path属性，是返回book的保存地方的属性。', 'Sub Sample268_1()@          #MsgBox  \"保存场所：\"  &amp;  ThisWorkbook.Path@          <cite>##表示这个book的保存处文件夹</cite>@    End Sub', '在message上表示现在的book的路径。ThisWorkbook属性取得现在的book，Path属性取得保存处的路径。', '/images/zhiku/TipsNO268-001.png', '/images/zhiku/TipsNO268-002.png', '取得book的信息的属性', '作为取得有关book的保存处的信息的属性，除Path属性以外有下面的属性。', '', '(表示现在的book的路径)', '(现在的book的路径被表示)', '2017-11-30 14:05:02', null, null, '[{\"title\":\"有关保存处的属性\",\"heads\":[\"属性\",\"说明\"],\"rows\":[[\"FullName属性\",\"由于全路径附着取得book的文件名\"],[\"Name属性\",\"取得文件名\"]]}]');
INSERT INTO `t_tips` VALUES ('269', '269', '以PDF形式保存', 'ExportAsFixedFormat方法', '利用ExportAsFixedFormat，可能作成ＰＤＦ或者ＸＰＳ形式的文件，但是，Ｅxecl2007的SP2以前，需要事前安装「2007 Ｍicrosoft Office程序用ＭicrosoftPDF/XPS保存插件」GetSaveAsFilename方法是，用对话框指定文件名和路径，不过，不能保存实际的book，要利用SaveAs方法保存。', 'Sub Sample269_1()@          ThisWorkbook.ExportAsFixedFormat   Type:=xlTypePDF _@                , Filename:=ThisWorkbook.Path  &amp;  \"\\Data.pdf\" _@                ,OpenAfterPublish:=True@          <cite>##对与这个book在样的文件夹，用Data.pdf这个名字保存成PDF文件</cite>@    End Sub', '在这里，book以PDF文件保存。保存的地方，是与这个book同样的文件夹。参数OpenAfterPublish指定为True，表示保存后的PDF文件。再者，ExportAsFixedFormat方法的指定项目，包含下面这些。', '', '', '', '', '', '', '', '2017-11-30 14:05:02', null, null, '[{\"title\":\"ExportAsFixedFormat方法的指定项目\",\"heads\":[\"值\",\"说明\"],\"rows\":[[\"Type\",\"可以使用的定数是xlTypePDF或者xlTypeXPS\"],[\"Filename\",\"指定被保存的文件的名字\"],[\"Quality\",\"可以设定的值，是xlQualityStandard，或xlQualityMinimum\"],[\"IncludeDocProperties\",\"如果表现包含文献属性，则设定True，如果表现被省略，则设定False\"],[\"From\",\"指定开始发行的页的页号码。省略的话，则从前一页开始发行\"],[\"To\",\"指定结束发行的页号码。省略的话，发行到最后的页\"],[\"OpenAfterPublish\",\"True设定的话，在发行后文件被表示在阅读器上。False设定的话，文件被发行,不过，不被表示\"],[\"FixedFormatExtClassPtr\",\"指到FixedFormatExt类\"]]}]');
INSERT INTO `t_tips` VALUES ('270', '270', '关闭book', 'Close方法', 'Close方法是关闭book的方法。参数SaveChanges可以省略,book有变更的场合,要有确认是否保存的message,同时，如果作为Workbooks对象集合，是没有参数的,所有的book都会被关闭。', 'Sub Sample270_1()@          Workbooks.close@          <cite>#关闭所有的book</cite>@    End Sub', '在这里,Close方法在实行Ｗｏｒｋｂｏｏｋｓ对象集合时,会关闭所有的book。关闭的book有变更的场合,会有确认message表示。不表示确认的message的方法，请参照「Memo」。', '/images/zhiku/TipsNO270-001.png', '/images/zhiku/TipsNO270-002.png', '不表示确认的消息关上全部的book', 'book有变更无视也要关上全部的book，像下面一样地记述。', '', '(关闭打开的book)', '(book全部被关闭)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('271', '271', '确认变更是否被保存', 'Save属性', '利用Saved属性的方法、在最后保存工作薄之后、能够确认变更的实行.True的情况下，不表示变更、False的情况下表示变更。', 'Sub Sample271_1()@          ThisWorkbook.Save@          <cite>##保存了工作薄</cite>@          Range(\"A1\").Value = \"商品号\"@          <cite>##变更A1单元格的值</cite>@          If ThisWorkbook.Saved = False Then@          <cite>##确认工作薄的变更</cite>@                MsgBox \"工作薄已经被变更\"@                <cite>##表示被变更时的信息</cite>@          End If@    End Sub', '这样说、首先在开始时保存一次book。后来、变更A1单元格的值。用Saved属性的方式确认\n        这个变更，以为增加了变更、Saved属性的返回值为False，信息被表示出来。\n        还有，Saved属性的值的设定是可能的。用指定Saved属性为True的方式，\n        实际上尽管工作薄发生了变化，但是也可以算作没有发生变更。', '/images/zhiku/TipsNO271-001.png', '/images/zhiku/TipsNO271-002.png', '', '', '', '(工作薄的变更确认)', '(显示信息)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('272', '272', '关闭工作薄不保存变更', 'Save属性', '利用Save属性，在最后保存工作薄之后，能够确认变更的实行。False的情况下表示变更的增加，True的\n          情况下不表示变更的增加。由于Save属性是可以设定值的，但实际上即使发生了变更，也可能被算作没有发生变更。', 'Sub Sample272_1()@          Range(\"A1\").Value = \"商品号\"@          <cite>##变更A1单元格的值</cite>@          ThisWorkbook.Saved=True@          <cite>##变更不增加</cite>@          ThisWorkbook.Close@          <cite>##关闭工作薄</cite>@    End Sub', '对于Saved属性，也可能设定它的值。这样说，变更A1单元格的值后，设置Saved属性为True通过\n        Close方法关闭工作薄。将Saved属性变为true，尽管有变更，关闭工作薄时确认信息不被表示！', '/images/zhiku/TipsNO272-001.png', '/images/zhiku/TipsNO272-002.png', '', '', '', '(关闭工作薄不保存确认信息)', '(工作薄被关闭)', '2017-11-30 14:05:02', null, null, '');
INSERT INTO `t_tips` VALUES ('273', '273', '另存别名的保存工作薄', 'Save方法', '指定Close方法的参数SaveChanges为True，变更到工作薄的场合，保存工作薄的变更关闭工作薄。而且指定变量Filename的保存场所和文件，保存其别名后能够关闭', 'Sub Sample273_1()@          Range(\"A1\").Value = \"商品コード\"@          <cite>##变更A1单元格的值</cite>@          ThisWorkbook.Close SaveChanges:=True ＿@          <cite>##保存变更</cite>@                ,  Filename:=ThisWorkbook.path &amp; ＿@                \"\\Data\\Sample273_Bk.xlsm\"@          <cite>这个工作薄与相同文件夹下的[Data]文件夹下用其别名保存</cite>@    End Sub', '在这里，变更单元格A1的值后，指定Close方法的变量为别名保存工作薄。再者，省略变量SaveChange，确认变更是否被保存的方法被表示出来。', '/images/zhiku/TipsNO273-001.png', '/images/zhiku/TipsNO273-002.png', '用其他的方法保存别名', '用另存别名的方式保存工作薄最通俗的方法是使用SaveAs方法。SaveAs方法是以另存的方式保存工作薄的方法。但是，Close方法也在这里做了介绍，也能够完成同样的处理。而且，要是保存后立刻关闭工作薄，能够使Close的处理更加便利。\n        \n        根据这些，在VBA中有若干个方法能实现相同的处理。根据具体情况灵活运用到最好，在其中找到哪个方法比较合适，是能够做到这点的。关于那些，不用想的得太难，用简单的方式就可以。但是，团队开发的时候，从方法分散的这个困难，团队之内要指定必要的规则。', '', '(使用别名保存工作薄)', '(别名工作薄已经被保存)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('274', '274', '保存所有的工作薄终止Excel', 'Close方法', 'Quit方法就是终止Excel的方法。这个时候，在正在打开的工作薄中有不能被保存的工作薄，显示出确认保存的信息。配合Save方法，保存全部的工作薄后可以终止Excel', 'Sub Sample274_1()@          Dim temp As Workbook@          For Each temp In Workbooks@          <cite>##对于所有的工作薄进行处理</cite>@                temp.Save@          <cite>##覆盖工作薄的方式保存</cite>@          Next@          Application.Quit@          <cite>##终止Excel</cite>@    End Sub', '这样说，使用循环处理，通过Save方法覆盖所有的工作薄进行保存。理所应当，确认变更的信息没有表示出来，就这样终止Excel。', '/images/zhiku/TipsNO274-001.png', '/images/zhiku/TipsNO274-002.png', '', '', '', '', '', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('275', '275', '不保存所有工作薄终止Excel', 'Saved属性', '不保存工作薄的变更，终止Excel，Saved属性与Quit方法相结合。指定Saved的属性为True,实际上，即使不保存，也会被认为是已经保存了，所以不显示确认信息。', 'Sub Sample275_1()@          Dim temp As Workbook@          For Each temp In Workbooks@          <cite>##对于所有的工作薄进行处理</cite>@               temp.Saved = True@          <cite>##覆盖工作薄的方式保存</cite>@          Next@          Application.Quit@          <cite>##终止Excel</cite>@    End Sub', '在这里，对全部的工作薄进行循环处理。指定Saved属性为True，做到无视变更的实行。之后，终止Excel。', '/images/zhiku/TipsNO275-001.png', '/images/zhiku/TipsNO275-002.png', '', '', '', '', '', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('276', '276', '変更を保存せずにブックを閉じる', 'Name属性', 'Name属性是返回工作薄的命名属性。', 'Sub Sample276_1()@          MsgBox \"当前的工作薄名：\"　&amp; ThisWorkbook.Name@          <cite>##显示当前的工作薄的工作薄名</cite>@    End Sub', '在MsgBox()中显示当前的工作薄的工作薄名。', '/images/zhiku/TipsNO276-001.png', '/images/zhiku/TipsNO276-002.png', '文件夹选项的设定与Name属性', '对于文件夹选项的设定，文件的扩展名的显示与不显示是可以设定的。但是对于Name属性，它的设定对于扩展名的值是没有关系的', '', '', '', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('277', '277', '确认工作薄是否正在打开', 'Name属性', 'Name属性是返回工作薄的命名属性。', 'Sub Sample277_1()@          Dim temp As Workbook@          For Each temp In Workbooks@          <cite>##对所有的工作薄进行处理</cite>@              If temp.Name = \"Sample277.xlsm\" Then@              <cite>##检查工作薄的名称</cite>@                   MsgBox temp.Name &amp; \"正在打开\"@                   <cite>##跳出循环处理</cite>@              Else@                   MsgBox temp.Name &amp; \"没有打开\"@                   <cite>##相同循环处理时的信息</cite>@              End If@          Next@    End Sub', '检查现在打开的工作薄。运用循环处理，对于当前打开的所有工作薄，检查工作薄的名称。', '/images/zhiku/TipsNO277-001.png', '/images/zhiku/TipsNO277-002.png', '', '', '', '(检查工作薄的名称)', '(信息被显示出来)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('278', '278', '取得工作薄的路径拼接工作簿的名称', 'Fullname属性', 'Fullname属性是返回工作薄的路径拼接工作薄的名称。', 'Sub Sample278_1()@          With ThisWorkbook@                MsgBox \"工作薄的名称：\"　&amp; .Name &amp; vbCrlf _@                     &amp; \"全部路径：\"　＆　.FullName@          <cite>##显示工作簿的名称与全部的路径</cite>@          #End With@    End Sub', '这样说，显示当前的工作薄的名称和工作薄路径与名称的拼接。', '/images/zhiku/TipsNO278-001.png', '/images/zhiku/TipsNO278-002.png', '文件夹选项的设定与Name属性', '只取得工作薄的路径，使用Path属性。下面的例子是取得工作薄的名称与路径。', '', '(显示路径拼接工作薄的名称)', '(路径拼接工作薄的名称被显示)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('279', '279', '保护工作薄', 'Protect方法', 'Protect方法是保护工作薄额方法。也能够指定变量password的值。指定变量structure为true并且构造工作薄，指定变量windows为true并且保护windonw。', 'Sub Sample279_1()@          ThisWorkbook.Protect Password:=\"pass\"@          <cite>##以赋予password值为pass的方法保护当前的工作薄。</cite>@    End Sub', '保护工作薄。指定变量password的值为pass。', '/images/zhiku/TipsNO279-001.png', '/images/zhiku/TipsNO279-002.png', '做到用户不能够解除', '指定工作薄的oassword中不能输入控制语句(Tab或换行)，通过对用户的password的输入不能够解除能够保护工作薄。下面的例子，password中包含Tab，在用户操作时做到不能够解除对工作薄的保护。', '', '(保护工作薄)', '(被保护的工作薄的Sheet页不能够变更)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('280', '280', '保存复制的工作薄', 'FileCopy声明', 'FileCopy声明是文件的复制处理的声明。对于FileCopy声明，是给指定的文件赋予别名来保存。但是，指定文件在当前打开的时候，会发生错误。对于正被打开的工作薄，做成了复制后的工作薄的时候，使用SaveCopyAs方法。', 'Sub Sample280_1()@          FileCopy ThisWorkbook.Path &amp; \"\\Sample280_2.xlsx\", _@          ThisWorkbook.Path &amp; \"\\Data\\Sample280_2_bk.xlsx\"@          <cite>##复制文件</cite>@    End Sub', '这样说，保存[Sample280_2.xlsx]文件在和这个工作薄相同的文件夹之内的[Data]文件夹中，保存名称为[Sample280_2_bk.xlsx]', '/images/zhiku/TipsNO280-001.png', '/images/zhiku/TipsNO280-002.png', '相同的文件存在的场合', '复制后的文件和相同名称的文件都已经存在的场合，文件自动被覆盖（不表示覆盖信息）。', '', '(保存文件的复制版本，名称为[Sample280_2.xlsx])', '([Sample280_2_bk.xlsx]的复制版本被保存)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('281', '281', '保存复制的工作薄(2)', 'SaveCopyAs 方法', 'SaveCopyAs方法是作成工作薄复制的方法。相同名称的工作簿在同一场所下保存的场合，自动覆盖保存。\n                 作成保存之后的复制文件需要声明FileCopy。', 'Sub Sample281()@             ThisWorkbook.SaveCopyAs _@                   ThisWorkbook.Path &amp; \"\\Data\\Sample281_bk.xlsx\"@                                          <cite>在当前工作薄的相同文件夹中的[Data]文件夹下</cite>@                                                                保存它的复制工作薄。@    End Sub', '这样说，在相同的文件夹下的[Data]文件夹中保存当前的工作薄的复制工作薄名称为[Sample281_bk.xlsx]。', '/images/zhiku/TipsNO281-001.png', '/images/zhiku/TipsNO281-002.png', '', '', '', '', '', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('282', '282', '操作工作表的履历', 'ResentFiles属性', 'ResentFiles属性是取得近期使用过的文件的list的属性。一边取得搭配Item属性履历的各个因子，\n                 一边取得 使用Count属性的履历数量。', 'Sub Sample282()@             With Application.RecentFiles@                   MsgBox \"近期使用过的文件数量：\"　&amp; .Count _@                        &amp; cbCrlf  &amp; \"第一个文件的名称：\" &amp; .Item(1).Name@                   End With@                           <cite>显示使用过的文件的数量与最近的文件夹名称</cite>@    End Sub', '这样说，通过Count属性取得近期使用过的文件的文件数量，通过Item属性和Name属性取得最近的文件名称。', '/images/zhiku/TipsNO282-001.png', '/images/zhiku/TipsNO282-002.png', '近期使用过的文件的最大数量', '近期使用过的文件，可以设定其履历的多少来判断。取得或设定它的数量应使用Maxnum属性。', '', '(取得近期使用过的文件的情报)', '(近期使用过的文件的情报被表示)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('283', '283', '通过工作薄做成邮件的形式发送信件', 'Dialogs属性', '利用Dialogs属性能够通过把工作薄做成邮件的方式送信。通过把工作薄做成邮件的方式送信是指定定数xlDialogSendMail的参数index来完成的。', 'Sub Sample283()@          Application.Dialogs(xlDialogSendMail).Show _@                   arg1:= \"vba@xxxx.com\", arg2:=\"发送资料\"　_@                       , arg3:=True@                           <cite>打开邮件的编辑画面，设定发送地址名、标题与添附文件</cite>@    End Sub', '这样说，显示出邮件发送信件的对话框，添附文件是当前的工作薄。', '/images/zhiku/TipsNO283-001.png', '/images/zhiku/TipsNO283-002.png', '近期使用过的文件的最大数量', '这个例子，邮箱没有被设定并且方式了错误。使用Web邮箱的时候需要特别注意。\n            \n            \n                    通过这个做成的邮件，通过Windows指定的soft为基本的对象到标准的邮箱软件。', '', '(做成邮件)', '(邮件被做成)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('284', '284', '取得属性', 'BuiltinDocumentProperties属性', 'BuiltinDocumentProperties属性是设定或取得工作薄的属性。\n                 对于属性，是将作成者的姓名，作成时间和访问的时间等一些情报保存起来。对于index是通过值还有名称指定文献的属性。', 'Sub Sample284()@          With ThisWorkbook.BuiltinDocumentProperties             <cite>对当前工作薄的属性进行处理</cite>@                MsgBox \"标题:\" &amp; .Item(\"Title\") &amp; vbCrlf _@                     &amp; \"作成者：\"　&amp; .Item(\"Author\")              <cite>显示标题与作成者</cite>@          End With@    End Sub', '这样说，使用BuiltinDocumentProperties属性，把工作薄的标题(文件名)和作成者显示在信息框中。\n            \n            \n                 再者，指定BuiltinDocumentProperties属性的参数index的值为主要的姓名，内容，通过下表可见。', '/images/zhiku/TipsNO284-001.png', '/images/zhiku/TipsNO284-002.png', '', '', '', '(表示属性)', '(属性被表示出来)', '2017-11-30 14:05:03', null, null, '[{\"title\":\"BuiltinDocumentProperties属性的参数index的指定值\",\"heads\":[\"名前\",\"インデックス番号\",\"内容\"],\"rows\":[[\"Title\",\"1\",\"#标题!\"],[\"Subject\",\"2\",\"副标题\"],[\"Author\",\"3\",\"#作成者\"],[\"Keywords\",\"4\",\"#关键字\"],[\"Comments\",\"5\",\"# 注释\"],[\"Template\",\"6\",\"模板\"],[\"Last Author\",\"7\",\"#最終保存者\"],[\"Revision Number\",\"8\",\"修改号码\"],[\"Last Print Date\",\"10\",\"印刷日期\"],[\"Creation Date\",\"11\",\"作成日期\"],[\"Last Save Time\",\"12\",\"更新日期\"],[\"Total Editing Time\",\"13\",\"编辑日期\"],[\"Number of Pages\",\"14\",\"页数\"],[\"Number of Words\",\"15\",\"单词数\"],[\"Number of Characters\",\"16\",\"文字数\"],[\"Security\",\"17\",\"安全\"],[\"Company\",\"21\",\"公司名\"]]}]');
INSERT INTO `t_tips` VALUES ('285', '285', '数据排序', 'Sort对象/Add方法', 'Sort对象是用单元格，字符颜色，图标进行排序的对象。排序的基准是能够指定64位。\n                 而且，Add方法是基于Sort对象的SortFields属性进行使用，追加排序的设定。\n                 关于属性，Add方法的变量请参照[解说]', 'Sub Sample285()@          With  Worksheets(\"Sheet1\").Sort@                .SortFields.Clear                     <cite>清除设定完的条件</cite>@                    .SortFields.Add Key:=Range(\"C1\"),SortOn:=xlSortOnValues _@                , Order:=xlDescending                 <cite>对于排序字段、设定为按单元格c1</cite>@                                                      的值降序排序@                .SetRange Range(\"A1\").CurrentRegion   <cite>指定排序范围是包含单元格A1的范</cite>@                                                      围@                .Header = xlYes                       <cite>指定包含头部的信息</cite>@                .Apply                                <cite>实行排序</cite>@          End With@    End Sub', '在这里，对单元格A1以后的字段进行排序处理。排序的基准是用C列降顺排序。而且，如果没有清除\n                最初的设定条件，在这之前在被设定的条件里追加新的条件。\n            \n            \n                 Add方法的变量，和Sort对象指定的变量，方法，属性如下所示。', '/images/zhiku/TipsNO285-001.png', '/images/zhiku/TipsNO285-002.png', '', '', '', '(按照[商品数量]降顺进行排序)', '(按照[商品数量]降顺进行排序完了)', '2017-11-30 14:05:03', null, null, '[{\"title\":\"Add方法的变量\",\"heads\":[\"引数\",\"说明\"],\"rows\":[[\"Key\",\"排序的基准单元格\"],[\"SortOn\",\"排序的类型\"],[\"Order\",\"排序的顺序\"],[\"CustomOrder\",\"用户设定的排序基准\"],[\"DataOption\",\"数值和文字的排序基准\"]]},{\"title\":\"变量SortOnに指定的XlSortOn Classの常数\",\"heads\":[\"引数\",\"说明\"],\"rows\":[[\"xlSortOnValues\",\"单元格内用数据排序\"],[\"xlSortOnCellColor\",\"单元格内用背景色排序\"],[\"xlSortOnFontColo\",\"单元格内用文字色排序\"],[\"xlSortOnIcon\",\"条件表达式的图标进行排序\"]]},{\"title\":\"Sort对象的方法\",\"heads\":[\"方法\",\"机能\"],\"rows\":[[\"Apply\",\"实行排序\"],[\"SetRange\",\"指定排序单元格的范围\"]]},{\"title\":\"Sort对象的属性\",\"heads\":[\"属性\",\"机能\"],\"rows\":[[\"Header\",\"指定最初行包含头情报\"],[\"MatchCase\",\"Ｔrueの場合、区分大小写\"],[\"Orientation\",\"指定排序方向。xlSortRows是行单位、xlSortColumns是列単位排序\"],[\"Parent\",\"返回被指定对象的父对象\"],[\"Rng\",\"返回排序行值的范围\"],[\"SortFields\",\"取得排序字段的集合\"],[\"SortMethod\",\"指定使用假名的场合，使用xlPinYin,文字编码的场合的排序方法\"]]}]');
INSERT INTO `t_tips` VALUES ('286', '286', '按照单元格的颜色排序', 'Sort对象/Add方法', 'Sort对象是用单元格，字符颜色，图标进行排序的对象。排序的基准是能够指定64位。\n                 而且，Add方法是基于Sort对象的SortFields属性进行使用，追加排序的设定。\n                 关于属性，Add方法的变量请参照Tips285', 'Sub  Sample286()@          With  Worksheets(\"Sheet1\").Sort@                .SortFields.Clear                        <cite>清除设定完的条件</cite>@                  .SortFields.Add( Key:=Range(\"C1\"),SortOn:=xlSortOnCellColor) _@                  . SortOnValue.Color = RGB(255,200,0)   <cite>在排序的条件里设定为橙色</cite>@                  .SortFields.Add( Key:=Range(\"C1\"),SortOn:=xlSortOnCellColor) _@                  .SortOnValue.Color = RGB(255,0,0)      <cite>在排序的条件里设定为红色</cite>@                  .SetRange Range(\"A1\").CurrentRegion    <cite>指定排序范围</cite>@                  .Header = xlYes                        <cite>指定包含头部的信息</cite>@                  .Apply                                 <cite>实行排序</cite>@          End With@    End Sub', '在这里，按照销售数量栏里设定的颜色为基准进行排序。\n            \n            \n                 在Add方法中追加排序的设定。如果此时在变数SortOn中指定SortOnCellColor，按照单元格的颜色进行\n                排序，而且，指定排序的颜色就是使用SortOnValue对象的Color属性。在这个例子中，指定橙色进行排序。\n                同样，追加红色排序的设定，然后进行排序。', '/images/zhiku/TipsNO286-001.png', '/images/zhiku/TipsNO286-002.png', '', '', '', '(用单元格颜色进行排序)', '(以单元格颜色为基准排序完了)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('287', '287', '用图标进行排序', 'Sort对象/Add方法', 'Sort对象是用单元格，字符颜色，图标进行排序的对象。排序的基准是能够指定64位。\n                 而且，Add方法是基于Sort对象的SortFields属性进行使用，追加排序的设定。\n                 关于属性，Add方法的变量请参照Tips285', 'Sub  Sample287()@          With  Worksheets(\"Sheet1\").Sort@                .SortFields.Clear                          <cite>清除排序的设定</cite>@                  .SortFields.Add( Key:=Range(\"C1\"),SortOn:=xlSortOnIcon) _@                  . SetIcon Icon:=ThisWorkbook.IconSets(x13Signs).Item(1)@                                                 <cite>三个信号中的第一个图标作为指定条件</cite>@                  .SortFields.Add( Key:=Range(\"C1\"),SortOn:=xlSortOnIcon) _@                  .SetIcon Icon:=ThisWorkbook.IconSets(x13Signs).Item(3)@                                                 <cite>三个信号中的第二个图标作为指定条件</cite>@                  .SetRange Range(\"A1\").CurrentRegion      <cite>指定排序范围</cite>@                  .Header = xlYes                          <cite>指定头部</cite>@                  .Apply                                   <cite>实行排序</cite>@          End With@    End Sub', '在这里，按照销售数量栏里设定的图标为基准进行排序。\n                使用设置的图标最为排序的基准，使用SetIcon属性的参数Icon指定图标集合的项目番号，在这里，指定图标集合里的第一个和第三个图标。', '/images/zhiku/TipsNO287-001.png', '/images/zhiku/TipsNO287-002.png', '', '', '', '(以图标为基准进行排序)', '(按照图标进行排序完了)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('288', '288', '以独创的顺序排序', 'Sort对象/Add方法', 'Sort对象是用单元格，字符颜色，图标进行排序的对象。排序的基准是能够指定64位。\n                 而且，Add方法是基于Sort对象的SortFields属性进行使用，追加排序的设定。\n                 关于属性，Add方法的变量请参照Tips285', 'Sub  Sample288()@          With  Worksheets(\"Sheet1\").Sort@                .SortFields.Clear                          <cite>清除排序的设定</cite>@                  .SortFields.Add Key:=Range(\"B1\") _@                  ,CustomOrder:=\"商品B,商品A,商品C\"        <cite>用指定的顺序进行排序</cite>@                  .SetRange Range(\"A1\").CurrentRegion      <cite>指定排序范围</cite>@                  .Header = xlYes                          <cite>指定头部</cite>@                  .Apply                                   <cite>实行排序</cite>@          End With@    End Sub', '在这里，按照「商品名」栏中的「商品B」「商品A」「商品C」の的顺序进行排序。\n                用任意的顺序进行排序，指定Add方法中的变量CustomOrder中的排序值，并用逗号分割。', '/images/zhiku/TipsNO288-001.png', '/images/zhiku/TipsNO288-002.png', '', '', '', '(按照「商品名」栏を指定的顺序进行排序)', '(按照「商品名」栏を指定的顺序排序完了)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('289', '289', '分组做合计', 'SubTotal方法', 'SubTotal方法,以表中的字段为分组做合计。SubTotal方法的变量GroupBy中指定分组列，\n                 变量Function中指定合计方法，而且，从合计列开始的相对位置指定在变量TotalList中合计的列。', 'Sub  Sample289()@          Range(\"A1\").CurrentRegion.SubTotal _             <cite>包含在单元格A1中的对象范围</cite>@                GroupBy:=1,Function:=xlSum _@                  ,TotalList:=4                            <cite>第一列作为分组，第四列作为合计</cite>@          End With@    End Sub', '在这里，求出日期的每个销售数量的合计。\n            \n            \n                 在变量Function中指定的值，如下所示。', '/images/zhiku/TipsNO289-001.png', '/images/zhiku/TipsNO289-002.png', '', '', '', '(求出以日期为分组销售数量的总计)', '(以日期为分组销售数量的总计)', '2017-11-30 14:05:03', null, null, '[{\"title\":\"BuiltinDocumentProperties属性的参数index的指定值\",\"heads\":[\"定数\",\"説明\",\"定数\",\"説明\"],\"rows\":[[\"xlAverage\",\"平均\",\"xlStDev\",\"基于样本中的标准偏差\"],[\"xlCount\",\"计算\",\"xlStDevP\",\"基于总体中的标准偏差\"],[\"xlCountNums\",\"只计算数值\",\"xlSum\",\"合计\"],[\"xlMax\",\"最大\",\"xlUnknow\",\"合计中未指定的使用函数\"],[\"xlMin\",\"最小\",\"xlVar\",\"基于样本中的浮动\"],[\"xlProduct\",\"乘积\",\"xlVarP\",\"基于总体中的浮动\"]]}]');
INSERT INTO `t_tips` VALUES ('290', '290', '对outline进行折叠和展开', 'ShowLevels方法', 'ShowLevels方法,指定outline的表示水平。用参数RowLevels指定行的水平数，参数ColumnLevels指定列的水平数。\n                 必须指定其中的一个值。全部关闭只有水平1的场合，指定为1。然而，全部关闭的场合，实际上指定的是比水平值大的值。', 'Sub  Sample290()@          Worksheet(\"Sheet1\").Outline_           <cite>对工作页的处理</cite>@                .ShowLevels RowLevels:=2         <cite>outline的行水平表示到2为止/cite&gt;</cite>@          End With@    End Sub@', '在这里，对已经被设定行的outline的表进行处理。\n            \n            \n                 outline全部展开时，表示水平数为2。', '/images/zhiku/TipsNO290-001.png', '/images/zhiku/TipsNO290-002.png', 'outline全部展开', 'outline全部展开时，参数RowLevels或者是参数ColumnLevels中、实际上指定的是比水平\n                 值大的值  ，下面的例子中，全部展开工作簿中[Sheet1]的outline。', 'Sub  Sample290()@                      Worksheet(\"Sheet1\").Outline_@                            .ShowLevels RowLevels:=3@                      End With@                End Sub', '(outline全部展开)', '(水平数2被表示)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('291', '291', '解除分组', 'ClearOutline方法', 'ClearOutline方法是解除分组，在object中指定解除的对象，当然，也可能只解除一部分。', 'Sub  Sample291()@          Range(\"A1\").CurrentRegion.ClearOutline       <cite>解除包含单元格A1范围内的分组</cite>@    End Sub', '在这里，解除包含单元格A1表全体的分组。', '/images/zhiku/TipsNO291-001.png', '/images/zhiku/TipsNO291-002.png', '解除部分分组', '解除部分的分组，使用ClearOutline方法指定解除的行和列，下面的例子中，　解除第2行到第4行的分组 。', 'SSub   Sample291_2()@                          WRows(\"2:4\").ClearOutline　　@                 End Sub', '(解除分组)', '(分组被解除)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('292', '292', '实行自动筛选', 'AutoFilter方法', 'AutoFitter方法，是利用自动筛选功能的方法。参数Field指定抽出对象Field，参数Criteria条件和参数的种类。详细请参照详解。', 'Sub  Sample292()@          Range(\"A1\").AutoFilter Field:=3, Criterial:=\"商品A\"@    End Sub', '在这里，查出“商品名”中的为“商品A”的商品', '/images/zhiku/TipsNO292-001.png', '/images/zhiku/TipsNO292-002.png', '关于\"开发工具\"', '自动筛选功能，自从Excel2007以后功能\n                  扩展了很多。涂过颜色的数据也能被抽出。', '', '', '', '2017-11-30 14:05:03', null, null, '[{\"title\":\"AutoFilter的参数\",\"heads\":[\"名字\",\"说明\"],\"rows\":[[\"Field\",\"指定以整数为过滤器的对象的列(行)的号码\"],[\"Criteria1\",\"抽出条件となる文字を指定します\"],[\"Operator\",\"过滤器的种类，XIAutoFilterOperator指定等级的参数\"],[\"Operator\",\"过滤器的种类，XIAutoFilterOperator指定等级的参数\"],[\"Criteria2\",\"指定成为第2号的抽出条件的字符串。参数Criteria1和\\n                        参数Operator的组合使用、指定查出符合条件。\"],[\"VisibleDropDown\",\"指定为True时，筛选的字段使用下拉键头自动筛选。\\n                        指定为False时，下拉键头不表示。默认值是True。\"],[\"xlAnd\",\"Criteria1和Criteria2的并列条件\"],[\"xlBottom1Oltems\",\"从Criteria1后面被指定的项目数\"],[\"xlBottom1OPercent\",\"从Criteria1后面被指定的比例\"],[\"xlFilterCellColor\",\"单元格的颜色（2007以后版本）\"],[\"xlFilterDynamic\",\"过滤器(2007以后版本)\"],[\"xlFilterFontColor\",\"字体的颜色(2007版本以后)\"],[\"xlFiterlcon\",\"Fiterlcon(2007版本以后)\"],[\"xlFilterValues\",\"过滤器的值(2007版本以后）\"],[\"xlOr\",\"Criteria1与Criteria2   OR条件\"],[\"xlTop1Oltems\",\"指定上位以Criteria1的项目数\"],[\"xlTop1OPercent\",\"指定上位以Criteria1的比例数\"]]}]');
INSERT INTO `t_tips` VALUES ('293', '293', '抽出从上到下降顺的三条数据', 'AutoFilter方法', '利用AutoFilter方法，能够抽出从的从上到下降顺或者是的从上到下升顺的数据。\n            \n                 参数Operator里指定xlTop10Items或者xlBottom10Items，关于AutoFilter方法里的其他的参数，请参照Tips292。', 'Sub  Sample293()@          Range(\"A1\").AutoFilter Field:=4, Criteria1:=3 _@            ,Operator:=xlTop10Items        <cite>抽出[销售数量]栏的的从上到下降顺的3条数据</cite>@    End Sub', '在这里，抽出[销售数量]栏的的从上到下降顺的3条数据。', '/images/zhiku/TipsNO293-001.png', '/images/zhiku/TipsNO293-002.png', '取得上位20%的数据', '同样，根据下面的记述取得的从上到下降顺的20%的数据。在参数Operator里指定xlTop10Percent,指定Criteria1的情况下用百分比的方式抽出数据。', 'Sub   Sample293_2()@          Range(\"A1\").AutoFilter _@             Field:=4,  Criteria1:=20 _@               ,Operator:=xlTop10Percent@    End Sub', '(抽出「销售数量」栏的从上到下降顺的三条数据)', '(「销售数量」栏的从上到下降顺的三条数据被抽出)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('294', '294', '抽出指定单元格背景色的数据', 'AutoFilter方法', '利用AutoFilter方法，能够抽出指定单元格背景色的数据。\n            \n                 在参数Operator里指定xlFilterCellColor。关于AutoFilter方法的其他参数，请参照Tips292。', 'Sub  Sample294()@          Range(\"A1\").AutoFilter Field:=3, Criteria1:=RGB(255,0,0) _@             ,Operator:=xlFilterCellColor        <cite>抽出单元格的背景色为红色的数据</cite>@    End Sub', '[商品名]一栏的值中，抽出背景色为红色的数据。', '/images/zhiku/TipsNO294-001.png', '/images/zhiku/TipsNO294-002.png', '以图标集合为条件抽出数据', '以图标集合为条件也能够抽出数据,下面的例子。以[销售数量]栏中的图标集合为基准抽出数据。', 'Sub   Sample294_2()@          Range(\"A1\").AutoFilter Field:=4 _@            ,Criteria1:=ThisWorkbook. _@             IconSets(xl3Flags).Item(1) _@               ,Operator:=xlFilterIcon@    End Sub', '(抽出背景色为红的的数据)', '(背景色为红的的数据被抽出)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('295', '295', '用抽出条件指定多个项目', 'Array函数', '用AutoFilter方法的抽出条件，指定对于一列的多个值，使用Array函数指定排列。', 'Sub  Sample295()@          Range(\"A1\").AutoFilter Field:=3 _@             ,Criteria1:=Array(\"商品A\",\"商品C\") _@            ,Operator:=xlFilterValues              <cite>抽出为[商品A]和[商品C]的数据</cite>@    End Sub', '在这里，在[商品名]一栏里的数据中，抽出[商品A]和[商品C]两种数据。\n                此时，在参数Operator中要指定xlFilterValues。如果省略这个指定的话，就会有正确的不能抽出的场合。\n                因此，常数xlFilterValues从Excel2007开始就被追加了。在Excel2003中也是同样的处理，详细请参照Tips296。', '/images/zhiku/TipsNO295-001.png', '/images/zhiku/TipsNO295-002.png', '用模糊的条件抽出数据', '下面的例子中，用[商品名]为[商品A]开始抽出数据。为了用这样的模糊条件抽出数据，要搭配通配符（*）使用。', 'Sub   Sample295_2()　@          Range(\"A1\").AutoFilter 　Field:=3 _@                          ,Criteria1:=\"商品A*\" _@             ,Operator:=xlFilterValues@  End Sub', '(抽出多条数据)', '(2种数据被抽出)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('296', '296', '抽出指定范围的数据', 'AutoFilter方法', '利用AutoFilter方法，使用参数Criteria2抽出指定范围的数据。关于AutoFilter方法的其他参数，请参照Tips292。', 'Sub  Sample296()@          Range(\"A1\").AutoFilter Field:=4 _     <cite>设定[销售数量]栏中的条件</cite>@              ,Criteria1:=\"&gt;=700\" _             <cite>指定大于等于700的条件</cite>@              ,Operator:=xlAnd _                <cite>并列</cite>@              ,Criteria2:=\"&lt;=800\"               <cite>指定小于等于800的条件</cite>@    End Sub', '在这里，抽出[销售数量]中的值为大于等于700小于等于800的数据。指定在参数Criteria1和参数Criteria2范围内表示的数值。\n                并且，指定参数Operator中的xlAnd.如果指定xlOr的话，请注意结果就会变成全部的范围。', '/images/zhiku/TipsNO296-001.png', '/images/zhiku/TipsNO296-002.png', '指定多个字符串为条件', '同样的，能够指定不是数值范围而是多个字符串为条件。下面的例子中，[商品名]一栏中抽出[商品A]和[商品C]的数据，此时，请注意将参数指定为xlOr。\n            \n            \n                  在Excel2003中，把一个字段设定多到Excel2003为止，AutoFilter方法中能够指定的条件为2个，Excel2007以后能够指定3个以上。', 'Sub   Sample296_2()@          Range(\"A1\").AutoFilter  Field:=3 _@               ,  Criteria1:=\" 商品A\" _@               ,  Operator:=xlOr _@               ,  Criteria2:=\" 商品C\"@  End Sub', '(抽出大于等于700小于等于800的数据)', '(数据被抽出)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('297', '297', '复数Filter指定抽出条件', 'AutoFilter方法', '利用AutoFilter方法，指定为复数Filter条件要数据必须用AutoFilter方法，AutoFilter方法的参数，请参照Tip292。', 'Sub  SamPle297()@          Range(\"A1\").AutoFilter Field:=3, Criterial:=\"商品A\"@                                                   <cite>抽出“商品”列中的“商品A1”</cite>@          Range(\"A1\").AutoFilter Field:=4, Criterial:=\"&gt;=800\"@                                                   <cite>抽出“销售量”大于800的数据</cite>@    End Sub', '', '/images/zhiku/TipsNO297-001.png', '/images/zhiku/TipsNO297-002.png', '指定的顺序', '使用AutoFilter方法时，如果对复数的Filter进行过滤得时候，不需要在意顺序。', '', '(抽出商品A和销售数量大于800的)', '(抽出后的数据)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('298', '298', '抽出符合个条件的数据', 'AutoFilter方法', 'AutoFilter方法的参数Criteria1在指定条件[=][<>]里能使用。', 'Sub Sample298()@         Range(\"A1\").AutoFilter Field:=4 _         <cite>设置出售价格栏的条件</cite>@         , Criteria1:=\"&lt;&gt;\"                         <cite>选择空栏以外的条件</cite>@    End Sub', '在这里，除了空白的[出售价格]的栏以外都抽出，其他的条件的指定方法如下。', '/images/zhiku/TipsNO298-001.png', '/images/zhiku/TipsNO298-002.png', '', '', '', '(抽出［销售价格］为空以外的数据ｖ)', '(数据抽出后)', '2017-11-30 14:05:03', null, null, '[{\"title\":\"抽出条件的指定方法\",\"heads\":[\"符号\",\"说明\",\"例\",\"意思\"],\"rows\":[[\"*\",\"表示复数的文字\",\"Criteria1:=\\\"小李\\\"\",\"在“小李开始增加”\"],[\"*\",\"表示复数的文字\",\"Criteria1:=\\\"小王\\\"\",\"包含小王\"],[\"*\",\"表示复数的文字\",\"Criteria1:=\\\"区\\\"\",\"在区结束\"],[\"\\\"\\\"\",\"空白栏\",\"Criteria1:=\\\"\\\"\",\"是空白栏\"],[\"<>\",\"不等号\",\"Criteria1:=\\\"<>小刘\\\"\",\"不是“小刘”\"],[\"<>\",\"不等号\",\"Criteria1:=\\\"<>\\\"\",\"不是空白栏\"],[\"=\",\"等号\",\"Criteria1:=\\\"100\\\"\",\"等于100\"],[\">\",\"不等号\",\"Criteria1:=\\\">100\\\"\",\"大于等于100\"],[\"<\",\"不等号\",\"Criteria1:=\\\"<=100\\\"\",\"小于100\"]]}]');
INSERT INTO `t_tips` VALUES ('299', '299', '抽出指定区间中的数据', 'AutoFilter方法', 'AutoFilter方法的参数Criteria1指定xlFilterDynamic级，会抽出指定区间的数据。xlFilterDynamic定数级请参照详解。', 'Sub Sample299()@         , Criteria1:=xlFilterAllDatesInPeriodOctober _@          , Operator:=xlFilterDynamic                   <cite>抽出十月的数据</cite>@    End Sub', '抽出［日期］中十月的数据。参数Ｃｒｉｔｅｒｉａ１，指定成为抽出条件的定数。\n                同时参数Ｏｐｅｒａｔｏｒ，指定xlFilterDynamic。参数Ｃｒｉｔｅｒｉａ１指定的定数，如下。', '/images/zhiku/TipsNO299-001.png', '/images/zhiku/TipsNO299-002.png', '抽出日期数据的时候的注意点', '抽出这里指定的期间的数据，抽出特定的日期的数据需要注意。根据原则，日期作为字符串式指定。\n                但是，用Excel２００３/２００７的版本的时候，单元格日期的格式是［ｙｙｙｙ/mm/d］的形式。\n                版本的表示有变化，默认日期是文字列格式，以［ｙｙｙｙ/mm/d］的形式来表示对象列的表示形式。', '', '(抽出［十月］的数据)', '(［十月］的数据抽出)', '2017-11-30 14:05:03', null, null, '[{\"title\":\"抽出条件的指定方法\",\"heads\":[\"定数\",\"值\",\"说明\"],\"rows\":[[\"xlFilterToday\",\"1\",\"今天\"],[\"xlFilterYesterday\",\"2\",\"昨天\"],[\"xlFilterTomorrow\",\"3\",\"明天\"],[\"xlFilterThisWeek\",\"4\",\"本周\"],[\"xlFilterLastWeek\",\"5\",\"上周\"],[\"xlFilterNextWeek\",\"6\",\"来周\"],[\"xlFilterThisMonth\",\"7\",\"本月\"],[\">xlFilterLastMonth\",\"8\",\"上月\"],[\"xlFilterNextMonth\",\"9\",\"下月\"],[\"xlFilterThisQuarter\",\"10\",\"本季度\"],[\"xlFilterLastQuarter\",\"11\",\"上季度\"],[\"xlFilterNextQuarter\",\"12\",\"下季度\"],[\"xlFilterThisYear\",\"13\",\"今年\"],[\"xlFilterLastYear\",\"14\",\"去年\"],[\"xlFilterNextYear\",\"15\",\"来年\"],[\"xlFilterYearToDate\",\"16\",\"今年的从开始到今天\"],[\"xlFilterAllDatesInPeriodQuarter1\",\"17\",\"期间内的全日期：第１季度\"],[\"xlFilterAllDatesInPeriodQuarter2\",\"18\",\"期间内的全日期：第２季度\"],[\"xlFilterAllDatesInPeriodQuarter3\",\"19\",\"期间内的全日期：第３季度\"],[\"xlFilterAllDatesInPeriodQuarter4\",\"20\",\"期间内的全日期：第４季度\"],[\"xlFilterAllDatesInPeriodJanuary\",\"21\",\"期间内的全日期：１月\"],[\"xlFilterAllDatesInPeriodFebruray\",\"22\",\"期间内的全日期：２月\"],[\"xlFilterAllDatesInPeriodMarch\",\"23\",\"期间内的全日期：３月\"],[\"xlFilterAllDatesInPeriodApril\",\"24\",\"期间内的全日期：４月\"],[\"xlFilterAllDatesInPeriodMay\",\"25\",\"期间内的全日期：５月\"],[\"xlFilterAllDatesInPeriodJune\",\"26\",\"期间内的全日期：６月\"],[\"xlFilterAllDatesInPeriodJuly\",\"27\",\"期间内的全日期：７月\"],[\"xlFilterAllDatesInPeriodAugust\",\"28\",\"期间内的全日期：８月\"],[\"xlFilterAllDatesInPeriodSeptember\",\"29\",\"期间内的全日期：９月\"],[\"xlFilterAllDatesInPeriodOctober\",\"30\",\"期间内的全日期：１０月\"],[\"xlFilterAllDatesInPeriodNovember\",\"31\",\"期间内的全日期：１１月\"],[\"xlFilterAllDatesInPeriodDecember\",\"32\",\"期间内的全日期：１２月\"]]}]');
INSERT INTO `t_tips` VALUES ('300', '300', 'SpecialCells方法', 'SpecialCells方法的语法', 'SpecialCells方法是取得满足指定条件的单元格的方法。SpecialCells方法的参数Type用xlCellTypeVisible指定,仅能取得可见的单元格。', 'Sub Sample300()@           Dim num As Long@           num = Range(\"A1\").CurrentRegion.Resize(, 1) _@               .SpecialCells(xlCellTypeVisible).Count@                                                  <cite>计算过滤后的第一列可见单元格的行数</cite>@          ,MsgBox \"件数：\" &amp; num - 1              <cite>表示去掉标题行的部分的件数</cite>@    End Sub', '在这里，将自动删选抽出结果的件数在信息框中表示。\n                用CurrentRegion属性取得表全体，用Resize属性变更计算的步数。在这个时候，不表示行也包含在范围内。\n                因此，使用SpecialCells方法仅取得可见的单元格，用Count属性计算出单元格的个数（=行数）。\n                在行数中因为包含标题，所以在信息框中表示的值减去1。', '/images/zhiku/TipsNO300-001.png', '/images/zhiku/TipsNO300-002.png', '', '', '', '', '', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('301', '301', '调查自动筛选是否被设置', 'AutoFilter 属性', 'AutoFilter属性是，返回object指定worksheet上的AutoFilter对象。不设置值动筛选的情况是，返回Nothing。', 'Sub Sample301_1()@          Dim Target As AutoFilter@          Set Target = Worksheets(\"Sheet1\").AutoFilter@          <cite>##获得Sheet1的自动筛选</cite>@          #If  Not Target Is Nothing Then@          <cite>##判断是否是Nothing</cite>@                #MsgBox \"被指定\"@          <cite>##不是Nothing情况的信息</cite>@          #Else@                #MsgBox \"未被指定\"@          <cite>##是Nothing情况的信息</cite>@          End If@    End Sub', '判断自动筛选是否被设置。AutoFilter属性是，设置自动筛选和返回AutoFilter对象，没有设置时返回Nothing。但是，在这里能取得是否彻底设置自动筛选，不能判断实际是否取出数据。', '/images/zhiku/TipsNO301-001.png', '/images/zhiku/TipsNO301-002.png', '相同的文件存在的场合', '复制后的文件和相同名称的文件都已经存在的场合，文件自动被覆盖（不表示覆盖信息）。', '', '(判断是否设置自动筛选)', '(用MsgBox表示信息)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('302', '302', '把自动筛选箭形符号做为非表示', 'AutoFill方法', 'AutoFill方法、是为了把自动筛选箭形符号做为非表示。指定Flash为参数VisbleDropDown，关于AutoFill方法的其他的参数，参照Tips292。', 'Sub Sample302_1()@          Range(\"A1\").CurrentRegion.Resize(,1).offset(,2) _@                .AutoFilter Field:=1 _@                    ,Criterial:=\"商品A\"_@                    ,VisibleDropDown:=False@          <cite>##在「商品名」栏里挂上自动筛选，把箭形符号做为非表示</cite>@    End Sub', '在「商品名」栏里挂上自动筛选，把箭形符号做为非表示，不能更改过滤器的设定，把自动筛选的箭形符号做为非表示。但，AutoFill方法的参数VisbleDropDown只指定了为参数Field的字段成为对象。为此，VisbleDropDown指定False只设定了抽出条件的自动筛选箭形符号成为非表示，除了表以外的地方的箭形符号会被非表示。\n        在那里，把过滤器的对象做为表全体，要只「商品名」的1队列。\n        这里，首先CurrentRegion属性取得后表全体。使用Resize属性和Offset属性把只「商品名」栏的1队列做为AutoFill方法的对象，所以指定为参数Field的值是「1」。', '/images/zhiku/TipsNO302-001.png', '/images/zhiku/TipsNO302-002.png', '', '', '', '(把自动筛选箭形符号做为非表示)', '(自动筛选箭形符号成为了非表示)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('303', '303', '自动筛选设定与判定', 'FilterMode 属性', 'FilterMode 属性是,指定自动筛选对象的数据,选出True的并返回.', 'Sub Sample303_1()@          With Worksheets(\"sheet1\")@                If  .AutoFilterMode Then@                <cite>自动筛选设定与确认</cite>@                    If  .FilterMode Then@                    <cite>数据自动筛选的选择与确认</cite>@                        MsgBox \"选择\"@                    Else@                        MsgBox \"未选择\"@                    End If@                End If@          End With@    End Sub', '这个样本是,预先没有设定自动筛选产生的错误.那里是AutoFilterMode属性确认设定自动筛选.AutoFilterMode属性是,返回设定自动筛选后的True, FilterMode属性是,选择数据并取得,这里是(Sheet1)工作页面的实行对应的自动筛选,用信息对话框表示结果.', '/images/zhiku/TipsNO303-001.png', '/images/zhiku/TipsNO303-002.png', '', '', '', '(自动筛选的状态判定)', '(用信息对话框表示)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('304', '304', '表示全部的数据', 'ShowAllData方法', '利用AutoFilter方法，解除自动筛选的抽出条件，表示全部的数据。但是，为了自动筛选这个东西本身不被解除，将被表示的筛选符号变成自动筛选', 'Sub Sample304_1()@          Worksheets(\"Sheet1\").ShowAllData@          <cite>##表示全部的数据</cite>@    End Sub', '在这里，解除[Sheet1]工作页的抽出条件，表示全部的数据。', '/images/zhiku/TipsNO304-001.png', '/images/zhiku/TipsNO304-002.png', '表示全部数据', '因为要理解全部读入的字段，能够表示下面全部的数据。在这里，在字段的抽出条件里条件被设定。因此，可以表示结果的全部数据。', '', '(解除自动筛选的抽出条件)', '(表示全部的数据)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('305', '305', '解除自动筛选', 'AutoFilter方法', '解除自动筛选功能要使用AutoFilter方法。AutoFilter方法不指定参数，但是可以切换自动筛选的开启和关闭。', 'Sub Sample305_1()@          Range(\"A1\").AutoFilter@          <cite>##解除自动筛选</cite>@    End Sub', '在这里，解除已经设定的自动筛选。然而，如果再次实行这个程序，自动筛选被设定（因为没有设定条件，就变成了表示所有的数据）。', '/images/zhiku/TipsNO305-001.png', '/images/zhiku/TipsNO305-002.png', '表示全部数据', '使用AutoFilter方法解除自动筛选，表示全部数据。与ShowAllData方法相比，为了不 要自动筛选是不是没被设定的检查更加简单。', '', '(解除自动筛选)', '(自动筛选被解除)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('306', '306', '某个Sheet页复杂的抽出条件', 'AdvancedFilter方法', 'AdvancedFilter方法是工作表上抽出数据的准备条件。抽出的结果是，在原数据过滤得到的一部分，别的单元格和Sheet页可能会拷贝过去。关于参数请参照解说。', 'Sub Sample306_1()@           Range(\"A1\").CurrentRegion.AdvancedFilter _@              Action:=xlFilterCopy _@                ,  CriteriaRange:=Range(\"A9\").CurrentRegion _@                ,  CopyToRange:=Range(\"F1\")@              <cite>#  单元格A1包含单元格A9的过滤条件，粘贴到单元格F1</cite>@    End Sub', '单元格输入后，抽出数据的原条件。抽出结果是粘贴到F1的数据。抽出条件是“10/1”和\"商品A\"和“商品B”的数据。', '/images/zhiku/TipsNO306-001.png', '/images/zhiku/TipsNO306-002.png', '条件的指定方法\n            输出的指定方法', '抽出条件是指定的一组索引。索引的顺序与原表不同。同行的数据用And条件，不同行的数据用Or条件，这个例子的情况，因为想抽出“商品A”和“商品B”，所以指定条件是两行。第二行的日期“10/1”没有输入，“10/1”的“商品A”或全部日期的“商品B”的意义需要注意\n        \n        \n        \n            这个例子，先输出的单元格F1没有设置索引没设索引的表与相同排列的抽出结果被拷贝，但是，在抽出结果的拷贝处预先设置索引的话，任意的顺序必要排列都能能换抽出数据例如：输入电池F1\"商品名\"，G1\"销售数量\"实行以下的编码的话，只\"销售数量\"和\"商品名\"的数据被抽出。', '', '(根据单元格A9的条件抽出数据)', '(单元格F1是抽出后的数据)', '2017-11-30 14:05:03', null, null, '[{\"title\":\"参数Action指定的IFiterACtion类的常数\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"Action\",\"指定抽出结果的表示方法。指定IFiterACtion类的常数\"],[\"CriteriaRange\",\"抽出条件\"],[\"CopyToRange\",\"指定抽出结果粘贴的位置\"],[\"Unique\",\"忽视指定的重复数据\"]]},{\"title\":\"参数Action指定的IFiterACtion类的常数\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"Action\",\"指定抽出结果的表示方法。指定IFiterACtion类的常数\"],[\"CriteriaRange\",\"抽出条件\"],[\"CopyToRange\",\"指定抽出结果粘贴的位置\"],[\"Unique\",\"忽视指定的重复数据\"]]},{\"title\":\"参数Action指定的IFiterACtion类的常数\",\"heads\":[\"常数\",\"意义\"],\"rows\":[[\"XIFiterCopy\",\"抽出结果拷贝到别的单元格\"],[\"XIFiterlnPlace\",\"过滤原始数据\"]]}]');
INSERT INTO `t_tips` VALUES ('307', '307', '不表示重复的行', 'AdvancedFilter 方法', 'AdvancedFilter 方法是，取出符合worksheet上符合准备条件的数据。取出的结果用过滤器表示。参数Action指定xlFilterInPlace。还有，重复的数据不表示，指定参数Unique为True。', 'Sub Sample307_1()@          Range(\"A1\").CurrentRegion _@          <cite>##单元格A1里包含的表的对象</cite>@          .Resize(,1).Offset(,2).AdvancedFilter _@          Action:=xlFilterInPlace _@          ,Unique:=True@          <cite>##取出对象的列[商品名]里的数据，忽视重复数据</cite>@    End Sub', '这里是，取出[商品名]的不重复数据。对于对象[商品名]使用AdvancedFilter方法的对象的Resize属性和Offset属性，对[商品名]这列进行处理。对参数Action指定xlFilterInPlace，取出的结果用过滤器表示，参数Unique为True是为了数据不重复表示。', '/images/zhiku/TipsNO307-001.png', '/images/zhiku/TipsNO307-002.png', '', '', '', '(取出不重复的[商品名]list)', '(取出数据)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('308', '308', '删除重复的数据', 'RemoveDuplicates 方法', 'RemoveDuplicates 方法是，删除重复的数据。指定列检查参数重复的数据。指定复数的列的情况是，使用Array函数指定排列。参数Header是，指定标题处理表的数据。指定标题xlYes，指定xlNo获得数据。规定值是xlNo。', 'Sub Sample308_1()@          Range(\"A1\").CurrentRegion.RemoveDuplicates _@                Columns:=1,Header:=xlYes@                <cite>##删除单元格A1里包含的重复数据</cite>@    End Sub', '\'删除输入[商品名]的重复数据。', '/images/zhiku/TipsNO308-001.png', '/images/zhiku/TipsNO308-002.png', '指定列的数据检查是否重复', '下次的样例是，在单元格C1以下的表内，删除[商品名]和[日期]中重复的数据。这是为了，检查复数的列的对象是否重复的情况，指定参数RemoveDuplicates方法的参数Columns的排列。', '', '(删除重复数据)', '(重复数据被删除)', '2017-11-30 14:05:03', null, null, '');
INSERT INTO `t_tips` VALUES ('309', '309', '单元格范围中连续输入', 'AutoFill方法', 'AutoFill方法实现指定范围自动填充功能。变量Destination指定自动填充的对象范围。变量Type是用常量指定自动填充的模型。指定常量请参照[详解]。', 'Sub Sample309_1()@           Range(\"A2\").AutoFill Destination:=Range(\"A2:A6\") _@                , Type:=xlFillSeries@           <cite>#从A2到A6使用自动填充，输入连续的数据</cite>@    End Sub', 'A2单元格输入1，这个值作为标准，在A列从1开始输入连续的数据。再者，变量Destination包含标准的单元格（这里是A2单元格），如果不包含会报错。\n        AutoFill方法的变量类型指定的常量，如下。', '/images/zhiku/TipsNO309-001.png', '/images/zhiku/TipsNO309-002.png', '', '', '', '(输入连续数据)', '(连续数据被输入后)', '2017-11-30 14:05:04', null, null, '[{\"title\":\"指定变量数据类型为XIAutoFillType类的常量\",\"heads\":[\"常量\",\"说明\",\"常量\",\"说明\"],\"rows\":[[\"xlFillDefault\",\"标准自动填充\",\"xlFillMonths\",\"月\"],[\"xlFillCopy\",\"复制\",\"xlFillWeekdays\",\"周\"],[\"xlFillSeries\",\"连续数据\",\"xlFillDays\",\"日\"],[\"xlFillFormats\",\"复制(含格式)\",\"xlLinearTrend\",\"升序\"],[\"xlFillValues\",\"复制(不含格式)\",\"xlGrowthTrend\",\"趋势\"],[\"xlFillYears\",\"年\"]]}]');
INSERT INTO `t_tips` VALUES ('310', '310', '验证单元格范围每个值', 'Value属性', 'Value属性是对单元格值的获取或设置。配合循环处理可以验证单元格范围的每一个值。', 'Sub Sample310_1()@          Dim temp As Range@          For Each temp In Range(\"C2:C6\")@          <cite>#对C2~C6单元格进行处理</cite>@                If temp.Value &gt; 700 Then@                <cite>#验证单元格的值</cite>@                    temp.Interior.Color = RGB(255,0,0)@                    <cite>#当单元格的值大于700时，涂红色</cite>@                End If@          Next@    End Sub', '在这里，[销售数量]栏的值大于700时涂成红色。使用循环处理，对单元格范围中的每一个值进行验证。', '/images/zhiku/TipsNO307-001.png', '/images/zhiku/TipsNO307-002.png', '', '', '', '(验证[销售数量]栏)', '(当值大于700时涂成红色)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('311', '311', '设置输入规则', 'Validation工程/Add方法', 'Validation对象的Add方法用来设定目标单元格的输入规则。关于Add方法的参数，请参照[详解]。', 'Sub Sample311_1()@           With Range(\"B2:B4\").Validation@           <cite># #单元格B2～B4设置输入规则</cite>@              .Add Type:=xlValidateList _@                , AlertStyle:=xlValidAlertInformation _@                , Formula1:=\"商品A,商品B,商品C\"@              <cite># #错误发生时显示中止图标</cite>@              <cite># #输入数据为[商品A][商品B][商品C]</cite>@           End With@    End Sub', '在这里，设定[商品名]栏的输入规则。输入的值为[商品A][商品B][商品C]。当输入其他的值时，显示中止图标。', '/images/zhiku/TipsNO311-001.png', '/images/zhiku/TipsNO311-002.png', '', '', '', '([商品名]栏设置输入方式)', '(设置输入方式后)', '2017-11-30 14:05:04', null, null, '[{\"title\":\"Add方法的参数\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"Type\",\"指定输入规则种类，其值为XIDVType类型\"],[\"AlertStyle\",\"指定输入规则错误的样式，其值为XIDVAlertStyle类的常量\"],[\"Operator\",\"指定输入规则的运算符，其值可以为XIFormatConditionOperator类的常量\"],[\"Formula1\",\"指定输入规则验证等式的第一部分\"],[\"Formula2\",\"指定输入规则的第二部分。当参数Operator的值在xlBetween和xlNotBetween以外时，忽略该参数。\"]]},{\"title\":\"Add方法参数Type指定为XIDVType类的常量\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"xlValidateCustom\",\"使用任意的公式来验证数据\"],[\"xlValidateDate\",\"日期值\"],[\"xlValidateDecimal\",\"数值\"],[\"xlValidateInputeOnly\",\"验证值是否可以改变\"],[\"xlValidateList\",\"将存在的值指定为列表形式\"],[\"xlValidateTextLength\",\"文本的长度\"],[\"xlValidateTime\",\"时间值\"],[\"xlValidateWholeNumber\",\"输入文本全为数值\"]]},{\"title\":\"Add方法参数AlertStyle指定为XIDVAlertStyle类的常量\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"xlValidAlertInformation\",\"信息图标\"],[\"xlValidAlertStop\",\"中止图标\"],[\"xlValidAlertWarming\",\"警告图标\"]]},{\"title\":\"Add方法参数Operator指定为XIFormatConditionOperator类的常量\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"xlBetween\",\"在两个公式之间可以使用\"],[\"xlEqual\",\"等于\"],[\"xlGreater\",\"下个值更大\"],[\"xlGreaterEqual\",\"超过\"],[\"xlLess\",\"下个值更小\"],[\"xlLessEqual\",\"低于\"],[\"xlNotBetween\",\"在两个公式之间以外的情况可以使用\"],[\"xlNotEqual\",\"不等于\"]]}]');
INSERT INTO `t_tips` VALUES ('312', '312', '删除输入规则', 'Delete方法', '对于Validation对象来说，若指定了Delete方法，便可以删除输入规则。', 'Sub Sample312_1()@          Range(\"B2:B4\").Validation.Delete@          <cite># #删除输入规则</cite>@    End Sub', '在[商品名]栏设置删除输入规则。', '/images/zhiku/TipsNO312-001.png', '/images/zhiku/TipsNO312-002.png', '删除输入规则设定', '在设置输入规则时，如果已经设置了输入规则就会发生异常情况。所以，在设置输入规则时，首先要使用Delete方法删除已有的输入规则。', '', '([商品名]栏设定了输入规则)', '(删除输入规则)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('313', '313', '改变输入规则', 'Modify方法', 'Modify方法可以改变输入规则。Modify方法的参数跟Add方法的参数相同，关于Add方法的参数，详细请参照Tips311。', 'Sub Sample313_1()@        With Range(\"B2:B4\").Validation@            .Modify Type:=xlValidateList _@            <cite>#改变输入规则</cite>@                ,AlertStyle:=xlValidAlertStop _@                ,Formula1:=\"商品D,商品E,商品F\"@                <cite>#改变输入规则的值</cite>@        End With@    End Sub', '在这里，改变[商品名]栏的输入规则，[商品名]栏预先设置的输入规则是[商品A] [商品B] [商品C]。此处，更改为[商品D] [商品E] [商品F]。', '/images/zhiku/TipsNO313-001.png', '/images/zhiku/TipsNO313-002.png', '设置输入规则的文字列长度限制', '在这个例子中，在为文字列指定输入规则时，设置的文字不可以唱过255个文字。这时，为单元格指定文字列，参数Formula1使用[Formula1:=A1]指定。', '', '(改变输入规则)', '(输入规则改变后)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('314', '314', '作自定义序列', 'AddCustomList方法', 'AddCustomList方法用来作自定义序列。参数ListArray用来指定要作成的序列的单元格范围。使用Array数组函数来指定这个序列。参数ByRow如果为True的话，会从指定单元格范围内的各行作成序列。如果为False的话，将不能作成序列。', 'Sub Sample314_1()@        Application.AddCustomList ListArray:=Range(\"B2:B5\")@        <cite>#将B2~B5单元格的值设为自定义序列</cite>@    End Sub', '在这里，将B2~B5单元格的商品名设定为自定义序列。另外，参数ListArray指定的范围时，再一次指定这个范围时会报错。参数ListArray指定同样的文字列时（不同的单元格范围），会自动无视这个相同的序列。', '/images/zhiku/TipsNO314-001.png', '/images/zhiku/TipsNO314-002.png', '一次指定多条序列', '参数ListArray指定单元格范围时，是可以一次性指定多个序列的。\n             下面的示例中，将单元格F1~G3列中的数据设为自定序列。', '', '(将商品名设为自定义序列)', '(设为自定义序列之后)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('315', '315', '删除自定义序列', 'GetCustomListNum方法/DeleteCustomList方法', '删除用户自定义序列应使用DeleteCustomList方法。DeleteCustomList方法的参数ListNum为要删除的自定义序列的编号。该编号通过GetCustomListNum方法获取，该方法的参数为该自定义序列的指定的文字列序列。', 'Sub Sample315_1()@        Dim num As Long@        Application.AddCustomList ListArray:=Range(\"B2:B4\")@        <cite>#暂且创建一个自定义序列</cite>@        num = Application.GetCustomListNum _@            (Array(\"商品A\",\"商品B\",\"商品C\"))@            <cite>#获取自定义序列的序号</cite>@        Application.DeleteCustomList num@        <cite>#删除获得序号的自定义序列</cite>@    End Sub', '在这里，暂且将商品名栏的值设定为一个用户自定义序列，然后，对该序列进行删除操作。', '/images/zhiku/TipsNO315-001.png', '/images/zhiku/TipsNO315-002.png', '', '', '', '(要删除的自定义序列)', '(自定义序列被删除)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('316', '316', '将单元格内的数据分割到多个单元格中', 'TextToColumn方法', 'TextToColumn方法是将输入到一个单元格中文字，用逗号或空格分割为多个数据，存储到多个列中。目标对象只有一列。关于TextToColumn方法的主要参数，请参照[详解]。', 'Sub Sample302_1()@          Application.DisplayAlerts = False@          <cite>#不显示警告信息</cite>@          Range(\"A2:A3\").TextToColumns _@          <cite>#A2～A3单元格内对象</cite>@                Destination:=Range(\"B2:B3\") _@                <cite>#在B列后输入</cite>@                , DataType:=xlDelimited _@                <cite>#用段落文字断开</cite>@                , Comma:=True@                <cite>#用逗号分隔</cite>@          Application.DisplayAlerts = True@          <cite>#显示警告信息</cite>@    End Sub', '将A2～A3单元格的数据用逗号分割，在B列之后输入。即使没有输入的数据也要显示确认信息。DisplayAlerts属性为False时，不显示警告信息。', '', '', '', '', '', '', '', '2017-11-30 14:05:04', null, null, '[{\"title\":\"Add方法参数Type指定为XIDVType类的常量\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"Destination\",\"指定显示结果的单元格\"],[\"DataType\",\"指定复数的列中分割数据的形式。xlDelimited是根据分割文字来进行分割。xlFixedWidth可分割为固定长度的数据\"],[\"TextQualifier\",\"字符串的引用符使用一重引用符（xlTextQualifierSingleQuote），或者使用二重引用符(xlTextQualifierDoubleQuote)，或者不使用引用符(xlTextQualifierNone)\"],[\"ConsecutiveDelimiter\",\"如果是True时，\"],[\"Tab\",\"如果是True时，指定段落文字用换行符分隔\"],[\"Comma\",\"如果是True时，指定段落文字用逗号分隔\"],[\"Other\",\"如果是True时，段落文字用参数OtherChar指定\"],[\"OtherChar\",\"当Other是True时，作为段落文字来使用\"]]}]');
INSERT INTO `t_tips` VALUES ('317', '317', '设置拼音字段', 'Phonetics对象/Text属性', 'Phonetics对象用来表示拼音字段的对象，与Text属性组合使用来设置拼音字段。', 'Sub Sample317_1()@          Range(\"A1\").Phonetic.Text = \"xingming\"@          <cite>#设置拼音字段</cite>@          Range(\"A1\").Phonetic.Visible = True@          <cite>#显示拼音字段</cite>@    End Sub', '在这里，对A1单元格设置拼音字段，Visible属性为True时，显示拼音字段。', '/images/zhiku/TipsNO317-001.png', '/images/zhiku/TipsNO317-002.png', 'SetPhonetic方法', 'SetPhonetic方法是自动设置单元格拼音字段的方法。但是，这种通过名字之类的特殊读法来做成的case有被错误设定的可能,请注意。', '', '(设置拼音字段)', '(拼音字段被设置完成)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('318', '318', '获取单元格中的算式值', 'Formula属性/FormulaR1C1属性', 'Formula属性和FormulaR1C1属性用来获取单元格中用算式计算输入的值。Formula属性为A1形式，FormulaR1C1属性为R1C1形式，是使用单元格地址的方式。', 'Sub Sample318_1()@          MsgBox \"算式（A1形式）：\" &amp; Range(\"C2\").Formula &amp; vbLf _@                &amp; \"算式（R1C1形式）：\" &amp; Range(\"C2\").FormulaR1C1 &amp; vbLf _@                &amp; \"值\" &amp; Range(\"C2\").Value@          <cite>#显示C2单元格中用算式计算得出的值</cite>@    End Sub', '在这里，取得C2单元格的计算公式和值，用MsgBox显示。计算公式分别用A1形式和R1C1形式获取。', '/images/zhiku/TipsNO318-001.png', '/images/zhiku/TipsNO318-002.png', 'FormulaLocal属性/FormulaR1C1Local属性', 'FormulaLocal属性/FormulaR1C1Local属性用来获取算式在代码执行时的语言。', '', '(获取算式)', '(显示算式)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('319', '319', '输入数组的算数公式', 'FormulaArray属性', 'FormulaArray属性用来设定取得数组的算数公式。关于数组的算数公式，请参照[Memo]。', 'Sub Sample319_1()@          Range(\"F2\").FormulaArray = _@          <cite>#设置F2单元格的数组算数公式</cite>@                =AVERAGE(IF(B2:B5=E2,C2:C5))@                <cite>#A班的平均值</cite>@          Range(\"F3\").FormulaArray = _@          <cite>#设置F3单元格的数组算数公式</cite>@                =AVERAGE(IF(B2:B5=E3,C2:C5))@                <cite>#B班的平均值</cite>@    End Sub', '在这里，使用数组计算公式，计算每个班级的平均值。', '/images/zhiku/TipsNO319-001.png', '/images/zhiku/TipsNO319-002.png', '所谓数组计算公式', '所谓数组计算公式，就是利用数组、被调用的多个值或者是单元格参照，求出一个或多个结果。输入数据时，输入算式之后，通过ctrl+shift+enter来确认。\n        \n        在确认后的算式前后，插入大括号（{}）。由于该大括号可以自动输入值，所以利用FormulaArray属性时不需要含有计算公式。', '', '(对A1单元格进行验证处理)', '(信息显示)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('320', '320', '检查单元格中是否含有计算公式', 'HasFormula属性', 'HasFormula属性当指定的单元格含有计算公式时返回True，不含有计算公式时返回False。', 'Sub Sample320_1()@          MsgBox \"B2单元格：\" &amp; Range(\"B2\").HasFormula &amp; vbLf _@                &amp; \"C2单元格：\" &amp; Range(\"C2\").HasFormula@          <cite>#显示B2C2单元格是否含有计算公式</cite>@    End Sub', '在这里，用MsgBox显示B2单元格和B3单元格是否含有计算公式的信息。如果返回True，表示含有计算公式，如果为False表示不含有计算公式。', '/images/zhiku/TipsNO320-001.png', '/images/zhiku/TipsNO320-002.png', '多个单元格作为对象', 'HasFormula属性用在多个单元格作为对象时，所有的单元格的计算公式没有输入的情况下，返回False，部分输入计算公式时，返回Null。\n    请看以下示例。\n        \n        在确认后的算式前后，插入大括号（{}）。由于该大括号可以自动输入值，所以利用FormulaArray属性时不需要含有计算公式。', '', '(判断是否含有计算公式)', '(信息显示)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('321', '321', '检索数据', 'Find方法/FindNext方法', 'Find方法用来检索符合条件的数据。没有发现符合条件的数据时返回Nothing。关于该方法的参数请\n                参照【详解】。\n                FindNext方法在参数After中指定的单元格之后，通过Find方法与设定的部分相同条件来进行检索。', 'Sub Sample321()@        Dim temp As Range@        Dim tempAddress As String@        With Range(\"A1\").CurrentRegion.Resize(,1).Offset(,2)@            <cite>#将C列作为对象</cite>@            Set temp = .Find(What:=\"张三\")	<cite>	#检索[张三]	</cite>@            If Not temp Is Nothing Then		<cite>	#检测是否能找到</cite>@                tempAddress = temp.Address	<cite>	#获取单元格的地址	</cite>@                Do@                    temp.Interior.Color = RGB(0,255,0)@                   <cite> #将单元格涂成绿色	</cite>@                    Set temp = .FindNext(temp)	<cite>	#继续检索</cite>@                Loop While temp.Address &lt;&gt; tempAddress@                <cite>#与最初找到的单元格位置不同的期间就继续执行处理</cite>@            End If@        End With@    End Sub', '在这里，从[责任人]栏检索到[张三]所在的单元格，发现该单元格时将单元格涂成绿色。Find方法的\n                参数跟下一个相同。', '/images/zhiku/TipsNO321-001.png', '/images/zhiku/TipsNO321-002.png', '', '', '', '(检索为[张三]的值)', '(检索所有数据)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('322', '322', '检索涂色的单元格', 'Find方法/FindFormat属性', 'FindFormat属性用来设定检索格式。并且，Find方法的参数SearchFormat为True时，检索\n                的单元格使用该格式条件与数据不符合时返回Nonthing。关于Find方法的其他参数，请参照\n                Tips321。', 'Sub Sample322()@        Dim Target As Range@        Application.FindFormat.Clear@        Application.FindFormat.Interior.Color = vbRed	<cite>#设定检索格式	</cite>@        Set Target = Range(\"A1\").CurrentRegion.Find(What:=\"*\" _@            , SearchFormat:=True)		<cite>#检索包含单元格A1的表	</cite>@        If Not Target Is nothing Then	<cite>#检验是否发现数据	</cite>@            MsgBox \"单元格的值：\" &amp; Target.Value@            <cite>#发现数据时显示信息</cite>@        End If@    End Sub', '在这里，从包含A1单元格整个表格开始检索涂成红色的单元格。最开始查到的单元格用MsgBox\n                显示。FindFormat属性，会照原样使用之前的设定，最开始是通过Clear方法来清空算式的检索条件的。', '/images/zhiku/TipsNO322-001.png', '/images/zhiku/TipsNO322-002.png', '', '', '', '(检索涂成红色的单元格)', '(显示检索信息)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('323', '323', '替换数据', 'Replace方法', 'Replace方法的参数What指定要检索的值，参数Replacement指定替换后的值。关于Replace\n                方法的其他参数，和Find方法相同。关于该方法的参数详细说明，请参照Tips323。', 'Sub Sample323()@        Range(\"A1\").CurrentRegion.Replace _@            What:=\"张三\", Replacement:=\"张四\"@            <cite>#把含有单元格A1的范围作为对象将[张三]替换为[张四]	</cite>@    End Sub', '在这里，将表格中的[张三]替换为[张四]。', '/images/zhiku/TipsNO323-001.png', '/images/zhiku/TipsNO323-002.png', 'Replace方法注意事项', '利用Replace方法将「１０/１」的「/（全角）」替换成半角的「/」时，对应单元格的数据会自动地成为日期数据。如果是日期数据，内容与序列元的数据是其他的，如此，一定要注意替换后的数据作为日期和时刻是否符合。避免这个，要使用Replace函数。关于Replace函数，请参照Tips181。', '', '(将[张三]替换为[张四])', '(替换后的数据)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('324', '324', '模糊条件下替换字符串', 'Replace方法', 'Replace方法的参数LookAt指定为xlPart，可以检索部分对象的值，参数Replacement可以替\n                换值。', 'Sub Sample324()@        Range(\"A1\").CurrentRegion.Replace _@            What:=\"惠\", Replacement:=\"任\", LookAt:=xlPart@            <cite>#在包含A1单元格的范围中，检索含有[惠]的单元格将[惠]替换成[任]</cite>@    End Sub', '在这里，对A1单元格之后的表进行处理。检索含有[惠]的单元格，将[惠]替换成[任]。', '/images/zhiku/TipsNO324-001.png', '/images/zhiku/TipsNO324-002.png', '', '', '', '(检索含有[惠]的单元格，置换成[任])', '(将[惠]置换成[任])', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('325', '325', '获取表单', 'ListObjects属性/Add方法', 'ListObjects属性用于取得设定表格对象的集合的ListObjects属性。指定开始编号，可以取得\n                特定表格。同时，使用Add方法，可以新建一个表格。\n                关于Add方法的采纳数，请参照【解说】。', 'Sub Sample325()@        Worksheets(\"Sheet1\").ListObjects.Add(SourceType:=xlSrcRange _@            , Source:=Range(\"A1\").CurrentRegion _@            , XlListObjectHasHeaders:=xlYes).Name = \"销售情况一览\"@            <cite>#在Sheet1表个的基础新建一个表格，命名为[销售情况一览]</cite>@    End Sub', '在这里，首先用CurrentRegion属性取得包含单元格A1的表格，再使用Add方法田间表格。\n                这时，指定页眉的第一行，返回该处理结果。对于ListObject对象，Name属性为表明，命名为\n                [销售情况一览]。\n                关于Add方法的参数，参照下表。', '', '', '', '', '', '', '', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('326', '326', '获取表格的行', 'ListRows属性', 'ListRows属性取得表内的行的ListRows结果集。index指定编号，用单一的ListRow对象获取。', 'Sub Sample326()@        Worksheets(\"Sheet1\").ListObjects(\"销售情况一览\") _@            .ListRows(3).Delete@            <cite>#删除[销售情况一览]表的第三行	</cite>@    End Sub', '在这里，从[销售情况一览表]中删除指定行。ListRows属性获取表中的第三行，利用Delete\n                方法删除该行。', '/images/zhiku/TipsNO326-001.png', '/images/zhiku/TipsNO326-002.png', '获取表中数据的件数', '要获取表中数据件数，需使用Count属性。以下示例中，显示[Sheet1]工作簿中[销售情况一览]表中的数据件数。', 'Sub Sample326_2()@        MsgBox \"表的行数：\" &amp; _@            Worksheets(\"Sheet1\"). _@            ListObjects(\"销售情况一览\") _@            .ListRows.Count@    End Sub', '(删除行)', '(从表中删除行)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('327', '327', '获取表的列', 'ListColumns属性', 'ListColumns属性获取表中的列并表示在ListColumns结果集中。index指定编号，用单一\n                的ListColumn对象获取。', 'Sub Sample327()@        MsgBox \"第三列的标题：\" &amp; Worksheets(\"Sheet1\") _@            .ListObjects(1).ListColumns(3).Name@            <cite>#用MsgBox显示第三列的标题</cite>@    End Sub', '在这里，从创建的表中获取指定列的标题，并用MsgBox显示。利用ListColumns属性获取表\n                的第三列，利用Name属性获取该标题。', '/images/zhiku/TipsNO327-001.png', '/images/zhiku/TipsNO327-002.png', '表的列数', '要获取表的列数，需树勇Count属性。以下示例中，用MsgBox显示[Sheet1]工作簿的表中的列数。', 'Sub Sample327_2()@    MsgBox \"表的列数：\" &amp; _@        Worksheets(\"Sheet1\"). _@        ListObjects(1) _@        .ListColumns.Count@    End Sub', '(获取第三列的标题)', '(显示表中第三列的标题)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('328', '328', '判断自动单元格是否在表格中', 'Active属性', '判断自动单元格是否在表格中，使用Active属性。该属性返回True时，表示该单元格在表中。', 'Sub Sample328()@        With Worksheets(\"Sheet1\")<cite>#对Sheet1单元格进行处理</cite>@            If .ListObjects(1).Active Then@            <cite>#判断自动单元格是否在表中</cite>@                MsgBox \"自动单元格在表格中\"@                <cite>#在表内是显示信息</cite>@            Else@                MsgBox \"自动单元格不在表格中\"@                <cite>#不在表格内显示信息</cite>@            End If@	    End With@    End Sub', '用Active实行取得表中是否含有自动单元格，并显示响应信息。', '/images/zhiku/TipsNO328-001.png', '/images/zhiku/TipsNO328-002.png', '关于示例', '在这里，当示例中的宏命令实行时，进行判断自动单元格。实际上，应把自动单元格在表内/外分别进行尝试。', '', '(确认表中是否存在自动单元格)', '(显示相应信息)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('329', '329', '获取表头行', 'object.HeaderRowRange', 'object.HeaderRowRange表示表中表头的范围并返回Range对象。能取得并改变表中表头\n                范围的格式。', 'Sub Sample329()@        Worksheets(\"Sheet1\").ListObjects(1).HeaderRowRange _@            .Interior.Color = RGB(0,0,255)@            <cite>#将表中表头行颜色变为蓝色</cite>@    End Sub', '在这里，用HeaderRowRange属性获取表格的标题，使用Color属性，将其背景填涂成蓝\n                色。', '/images/zhiku/TipsNO329-001.png', '/images/zhiku/TipsNO329-002.png', '选择标题行', '以下示例中选择了标的标题行。', 'Sub Sample329_2()@        Worksheets(\"Sheet1\"). _@        ListObjects(1).HeaderRowRange. _@        Select@    End Sub', '(改变标题填涂的颜色)', '(改变涂色为蓝色)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('330', '330', '合计行的显示/隐藏', 'ShowTotals属性/TotalsCalculation属性', 'ShowTotals属性可以指定是否显示数据的合计。该属性为True时，表示显示合计。\n                TotalsCalculation属性表示指定合计的方法。', 'Sub Sample330()@        With Worksheets(\"Sheet1\").ListObjects(1)@            .ShowTotals = True					 #显示合计@            .ListColumns(\"金额\").TotalsCalculation = _@                xlTotalsCalculationAverage@             #求得金额的平均值@        End With@    End Sub', '在这里，显示[Sheet1]工作簿的数据的合计行，求取[金额]栏的平均值。TotalsCalculation\n                属性指定的常量详见下表。', '', '', '', '', '', '', '', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('331', '331', '完成数据透视表（1）', 'PivottableWizard 方法/Orientation 属性/Function 属性', 'PivottableWizard方法是完成数据透视表的方法。用Orientation\n                属性来设置数据透视表的域、用Function 属性来设置数据域的计算方法。\n                PivottableWizard方法的参数、Orientation属性、Function属性指定的值\n                参照【解说】。', 'Sub Sample331()@        With Worksheets(\"sheet1\")@           .PivotTableWizard _@               SourceType:=xlDatabase _@               ,  SourceData:=Range(\"A1\").CurrentRegion _@               ,  TableDestination:=Range(\"A15\") _@               ,  TableName:=\"集計データ\"@        　　　　　　　　<cite>#A1单元格以后到A15单元格的基本数据</cite>@        　　　　　　　　<cite>#完成名字叫做集計データ的数据透视表</cite>@        　　　　　With  .PivotTables(\"集計データ\")　　　<cite>#对数据透视表进行处理</cite>@                  .PivotFields(\"商品名\").Orientation = xlRowField@                  <cite>#设置「商品名」的行标签</cite>@                  .PivotFields(\"担当者名\").Orientation = xlColumnField@        　　　　　　　　　　<cite>#设置「担当者名」的列标签</cite>@                 With  .PivotFields(\"金额\")　　<cite>#对「金额」进行处理</cite>@                        .Orientation = xlDataField　　<cite>#设置数据域</cite>@                        .Function = xlSum　　　<cite>#设置「合計」的计算方法</cite>@                 End With@            End With@        End With@    End Sub', '完成A1单元格之后的基本表、A15单元格之后的数据透视表。这个时间点，只完成了数据透\n                视表的架构。去设定这个架构。在这里、想要求出每个[商品名]的每个「担当者名」的「金额」的总\n                合。\n                PivotTableWizard方法的变量、Orientation属性的指定值、Function属性的指定值、以下\n                的类是单独的。', '/images/zhiku/TipsNO331-001.png', '/images/zhiku/TipsNO331-002.png', '', '', '', '', '', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('332', '332', '作成数据透视表(2)', 'PivotCache对象/CreatePivotTable方法', 'PivotCaches方法、保存数据透视表的数据取得cache。这个cache一作成\n数据透视表就会自动作成。这个数据透视表cache的原、用CreatePivotTable\n方法作成数据透视表。为了做cache数据、能节约存储。', 'Sub Sample332()@                        Dim temp As PivotCache@                        　　Set temp = ThisWorkbook.PivotCaches(1)　				<cite>#取得已存在的cache</cite>@                        　　temp.CreatePivotTable _@                        　　    	TableDestination:=Worksheets(\"sheet1\").Range(\"D13\") _@                        　　    , TableName:=\"担当者別\"	 , TableName:=\"按担当者\"@                        　　	<cite>#D13单元格以下、叫「按担当者」名的数据透视表的作成	</cite>@                        　　With Worksheets(\"sheet1\").PivotTables(\"按担当者\")@                        　　    .PivotFields(\"担当者名\").Orientation=xlRowField@                        　　    	　<cite>#设定[担当者名]那行的标签</cite>@                        　　  	  With .PivotFilelds(\"金额\")			<cite>#对「金额」的处理</cite>@                        　　        .Orientation = xlDataField #デ―タフィ―ルドに設定	　　.Orientation = xlDataField 		<cite>#数据fild的设定</cite>@                        　　        	　　.Function = xlSum    		<cite>#集计方法合计的设定</cite>@                        　　    End With@                        　　End With@                    　End Sub', '在这，能在作成数据透视表原上，作成新的数据透视表。作成的数据透视表，别的担当者的金额的合计。\n	              CreatePivotTable方法的变量如下所示。', '/images/zhiku/TipsNO332-001.png', '/images/zhiku/TipsNO332-002.png', '确认更新', 'RefreshTable方法、数据透视表的更新、能确认更新实行正不正常实行。正常更新True的场合、返回失败false的场合。\n            下一个模版、数据透视表的原数据写在上面、用RefreshTable方法更新数据透视表。那个时候，检查更新实行正不正确。', 'Sub Sample332_2()@                    Range(\"E2\").Value = 0@                    With Worksheets(\"Sheet1\") _@                    .PivotTables(1)@                        If .RefreshTable Then@                            MsgBox _@                            数据更新@                        Else@                            MsgBox _@                            数据更新失败@                        End If@                    End With@                　End Sub', '(作成新的数据透视表)', '(数据透视表被作成了)', '2017-11-30 14:05:04', null, null, '[{\"title\":\"设定CreatePivotTable方法的项目\",\"heads\":[\"名称\",\"必须/选择数据类型说明\"],\"rows\":[[\"TableDestination\",\"作成数据透视表指定sheet名和单元格\"],[\"TableName\",\"指定作成数据透视表的名称\"],[\"ReadData\",\"一指定Ture、外部数据库包含全部作成数据透视表cache的记录\"],[\"DefaultVersion\",\"指定数据透视表的已定版本\"]]}]');
INSERT INTO `t_tips` VALUES ('333', '333', '作成数据透视表', 'AddFields方法/Position属性', 'AddFields方法、追加数据透视表字段的方法。又指定字段里有复数项目场合的顺序利用Position属性\n                    关于AddFields方法的变量、请参照「详解」。', 'Sub Sample333()@                        With Worksheets(\"Sheet1\").PiovtTables(1)@                        　　.PivotFields(\"担当者\").Orientation = xlRowField@                        　　.AddFields ColumnFields:=Array(\"商品名\",\"售货日期\"), _@                            AddToTAble:=Ture@                        　　.PivotFields(\"售货日期\").Position = 1@                        　　.PivotFields(\"商品名\").Position = 2@                        End With@                    　End Sub', '编辑既存的数据透视表。现在的数据透视表、总计[担当者名]的[金额]的合计。\n                    首先，[担当者名]向行字段移动、[商品名]和[售货日期]向列字段追加。追加后、变更列字段\n                    [商品名]和[售货日期]的顺序。\n                    AddFields方法的变量、通过以下了解。', '', '', '', '', '', '', '', '2017-11-30 14:05:04', null, null, '[{\"title\":\"AddFields方法的变量\",\"heads\":[\"名称\",\"说明\"],\"rows\":[[\"RowFields\",\"行字段、又是作为项目轴追加指定字段的名称(又是字段名的排列)。\"],[\"ColumnFields\",\"列字段、又是作为项目轴追加指定字段的名称(又是字段名的排列)。\"],[\"PageFields\",\"页、又是作为页领域追加指定字段的名称(又是字段名的排列)。\"],[\"AddToTable\",\"一指定True、指定的字段向报告里追加。既存的字段不管怎样不能被置换。一指定False、既存的字段能被想的字段置换。默认值是False。\"]]}]');
INSERT INTO `t_tips` VALUES ('334', '334', '数据透视表的数据变更', 'Refresh方法', 'Refresh方法、对PivotChache对象实行、更新数据透视表cache。', 'Sub Sample334()@                        Range(\"E2\").Value ＝ 0　　　　　　　<cite>#目标数据覆盖</cite>@                        Workesheets(\"Sheet1\").PivoteTables(1).PivotCache.Refresh@                                                          <cite>#透视表更新</cite>@                      End Sub', '这里、数据透视表的根相邻的数据（E2单元格）的值写在上面、使用Refresh方法更新数据透视表。', '/images/zhiku/TipsNO334-001.png', '/images/zhiku/TipsNO334-002.png', '', '', '', '(更新数据透视表)', '(数据透视表更新后)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('335', '335', '取得数据透视表内单元格的信息', 'PivotCell属性/PivotCellType属性', 'PivotCell属性，取得数据透视表内的单元格。PivotCellType属性，取得指定数据透视表\n　内的单元格的种类。单元格的种类表示常数请参照[详解]。对象的单元格数据透视表内没有的\n　场合发生错误。', 'Sub Sample335()@                        If Application.Range(\"B17\").PivotCell.PivotCellType _@                        　　=xlPivotCellValue Then　　　　　<cite>#调查单元格B17的单元格的种类</cite>@                        　　MsgBox\"单元格B17是数据项目\"@                        　　<cite>#数据项目场合的信息</cite>@                        Else@                        　　MsgBox\"单元格B17不是数据项目\"@                        　　<cite>#不是数据项目场合的信息</cite>@                        End If@                    　End Sub', '[sheet1]表里数据透视表正被作成。单元格B17那个数据透视表的数据项目能不能判定\nPivotCellType属性返回常数如下所示。', '', '', '', '', '', '', '', '2017-11-30 14:05:04', null, null, '[{\"title\":\"PivotCellType属性返回lPivotCellType类的常数\",\"heads\":[\"常量\",\"说明\"],\"rows\":[[\"xlPivotCellBlankCell\",\"数据透视表构造空白的单元格\"],[\"xlPivotCellCustomSubtotal\",\"用户设定的集计的行的范围或者列的范围的单元格\"],[\"xlPivotCellDataField\",\"数据字段标签（没有[数据]按钮）\"],[\"xlPivotCellDataPivotField\",\"[数据]按钮\"],[\"xlPivotCellGrandToal\",\"统计的行范围或者列范围的单元格。\"],[\"xlPivotCellPageFielditem\",\"页字段的没有选择项目用单元格表示\"],[\"xlPivotCellPivotField\",\"字段的按钮（没有[数据]按钮）\"],[\"xlPivotCellPivotitem\",\"小计、统计、用户设定的集计、空白行的不论行的范围或者是列的范围内的单元格\"],[\"xlPivotCellSubtotal\",\"小计的行范围或者列范围内的单元格\"],[\"xlPivotCellValue\",\"数据区内的全部单元格（空白行除外）\"]]}]');
INSERT INTO `t_tips` VALUES ('336', '337', '改变柱状图的作成场所', 'Location方法', 'Location方法，改变图表的作成场所的方法。一使用Location方法，通常的图表一样的话，\n柱状图也变成图表，相反图表能变成工作表上的对象。变量Where先图表的移动，指定变量\nName先移动的工作表名。Location方法的变量Where指定的值，请参照详解。', 'Sub Sample337()@                        Charts(\"Chart1\").Location Where:=xlLocationAsObject _@                            \", Name:=\"\"Sheet1\"\"　　　　　　<cite>#图表向Sheet1移动</cite>@                    \"@                    　End Sub', '这里，图表向Sheet1工作表移动。\n                    Location方法的变量Where指定值如下所示。', '/images/zhiku/TipsNO337-001.png', '/images/zhiku/TipsNO337-002.png', '', '', '', '(图表移动)', '([Sheet1]里图表移动)', '2017-11-30 14:05:04', null, null, '[{\"title\":\"Location方法的变量Where指定xlChartLocation表的常数\",\"heads\":[\"常量\",\"说明\"],\"rows\":[[\"xlLocationAsNewSheet\",\"新的工作表\"],[\"xlLocationASObject\",\"既存的工作表被嵌入\"],[\"xlLocationAutomatic\",\"控制Excel\"]]}]');
INSERT INTO `t_tips` VALUES ('337', '336', '作成柱状图', 'Add方法', 'Add方法，追加指定对象。指定object里Chart对象，能作成柱状图（图表）。', 'Sub Sample336()@                        With Worksheets(\"Sheet1\").Chartobjects _@                            .Add(300,10,250,180).Chart@                            <cite>#作成图表	</cite>@                            .SetSourceData Worksheets(\"sheet1\") _@                                .PivotTables(1).TableRang1@                            <cite>#把原数据做成数据透视表</cite>@                            .ChartType = xlColumnClustered@                            <cite>#把图表的种类作为[柱状图]图表</cite>@                        End With@                    　End Sub', '这里，作成图表，使用那个根源数据里TableRange1属性，指定数据透视表的数据。\n那个后，ChartType属性图的种类变成[集合纵棒]图。', '/images/zhiku/TipsNO336-001.png', '/images/zhiku/TipsNO336-002.png', '', '', '', '(作成数据透视表的数据源图)', '(作完图表)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('338', '338', '获取所有的形状(Shape)', 'Shapes属性/SelectAll方法', 'Shapes代表图形对象集合，其父对象是Worksheet,书写时不可以省略父对象名称。\n参数省略的话，则被指定的工作表的全部图形被参照。并且，SelectAll方法可以将所有图形选中。', 'Sub　Sample338()@                        <cite>#选中Sheet1上的所有图形</cite>@                        Worksheets(\"Sheet1\").Shapes.SelectAll@                    End　Sub', 'Shapes属性是参照被指定的工作表的全部图形。并且，SelectAll方法的使用是可以选中全部的图形。', '/images/zhiku/TipsNO338-001.png', '/images/zhiku/TipsNO338-002.png', '选择任意的图形', '选择任意的图形是要在Shapes属性的参数里指定索引号或者图形的名称。\n            右侧的例子是选择「Sheet1」工作表的第一个图形。', 'Sub　Sample338_2()@                    Worksheets(\"Sheet1\").Shapes(1).Select@                    End Sub', '', '', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('339', '339', '参照、删除特定的图形', 'Shapes属性/Delete方法', 'Shapes代表被指定的工作表的全部图形对象集合，在集合内指定一个图形的时候，将指定参数的\nIndex值。并且，用Delete方法删除指定的图形。', 'Sub　Sample339()@                        <cite>#删除Sheet1上的第一个图形</cite>@                        Worksheets(\"Sheet1\").Shapes(1).Delete@                    End　Sub', '在此，Shapes属性的Index被赋予值1，Sheet1工作表的第一个图形成为要被删除的对象。Delete方法使用后，对象图形即被删除。', '/images/zhiku/TipsNO339-001.png', '/images/zhiku/TipsNO339-002.png', '选择任意的图形', '图形的Index索引号就是，以Z命令的方式将图形的前后关系表示排序。\n            通常上，Z命令就是图形的做成顺序，其也可以变化。指定实际的图形就是利用图形的名称。关于图形名称的使用方法请参照Tips341。', '', '', '', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('340', '340', '选择多个图形', 'Range属性', 'Range属性使用后，能够从Shape属性集合里取得一个或者多个图形。\n多个图形选择的时候，在参数Index里传入使用Array函数的数组。', 'Sub　Sample340()@                        <cite>#从Sheet1里的全部图形中选择第一个和第三个图形</cite>@                        Worksheets(\"Sheet1\").Shapes.Range(Array(1,3)).Select@                    End　Sub', '在此，选择Sheet1工作表里的第一个和第三个图形。在Range属性的参数里使用Array函数传值。\n                 Array函数的参数可以指定图形的Index索引号也可以指定图形的名称。详细的请参照下记小提示。', '/images/zhiku/TipsNO340-001.png', '/images/zhiku/TipsNO340-002.png', '图形的Index索引号', '在Array函数的参数里指定图形的名称，使用图形的名称可以参照多个图形，右侧的例子是使用两个图形的名字。', 'Sub　Sample340_2()@                         Worksheets(\"Sheet1\").Shapes.@                         Range(Array(\"图形1\", \"图形2\")).Select@                    End Sub', '', '', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('341', '341', '赋予图形名称', 'Name属性', 'Name属性是取得被赋予图形的名字。也可以去设定它。', 'Sub Sample341_1()@          Worksheets(\"Sheet1\").Shapes(1).Name = \"圆\"@          <cite>##给Sheet1的第一个图形赋予名字</cite>@          Worksheets(\"Sheet1\").Shapes(\"圆\").Select@          <cite>##在Sheet1里选择名字是\"圆\"的图形</cite>@          MsgBox \"第一个图形的名字:\"　&amp; Worksheets(\"Sheet1\").Shapes(1).Name@          <cite>##被选择的图形的名字以弹出框形成表现</cite>@    End Sub', '在此，首先使用Name属性给第一个图形赋予名字。然后，选择了用这个名字的图形后，就会弹出被设定第一个图形名字的信息框。', '/images/zhiku/TipsNO341-001.png', '/images/zhiku/TipsNO341-002.png', 'Index索引号和图形的名字', '图形插入之后，如果从工程内操作图形的话，那么给图形赋予名字会更好不是吗。像这样做就可以进行确切的处理了。', '', '', '', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('342', '342', '如何绘制直线（Line）', 'AddLine方法', 'AddLine方法用来绘制直线。在参数里指定直线的起点与终点。关于各个参数请参照详解。', 'Sub Sample342_1()@          With Worksheets(\"Sheet1\").Shapes@            With .AddLine(20,20,200,200).Line@            <cite>##给直线添加样式</cite>@           　　 .Weight = 5@               <cite>##粗细设为5</cite>@               .ForeColor.RGB　=　RGB(255,0,0)@               <cite>##颜色设为红色</cite>@               End With@          End With@    End Sub', '在此，Sheet1工作表里画一条红色的直线，更进一步的去设定这条直线的样式，将Weight属性设为5，Color属性设为红色。\n        AddLine方法的参数具体是什么如下所示。', '/images/zhiku/TipsNO342-001.png', '/images/zhiku/TipsNO342-002.png', '', '', '', '', '', '2017-11-30 14:05:04', null, null, '[{\"title\":\"AddLineメソッドの引数\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"BeginX\",\"工作表左端为基准，用坐标来指定线的起点的水平位置\"],[\"BeginY\",\"工作表上端为基准，用坐标来指定线的起点的垂直位置\"],[\"EndX\",\"工作表右端为基准，用坐标来指定线的起点的水平位置\"],[\"EndY\",\"工作表下端为基准，用坐标来指定线的起点的垂直位置\"]]}]');
INSERT INTO `t_tips` VALUES ('343', '343', '文本框内表示文本', 'AddTextbox方法', 'AddTextbox方法是为了在工作表内创建文本框。参数Orientation是用来指定文本框内文本的方向。具体的指定值参照下记详解。参数Left,Top是指定了文本框左侧边缘,上部边缘的位置，以磅为单位。参数Width,Height是指定了文本框的宽度,高度的位置，以磅为单位。', 'Sub Sample343_1()@          Dim temp As Shape@          <cite>##指定文字的水平方向做成文本框</cite>@          Set temp = Worksheets(\"Sheet1\").Shapes _@             .AddTextbox(msoTextOrientationHorizontal _@             ,10,20,80,25)@          <cite>##在做成的文本框内写入文字\"Excel VBA\"</cite>@          temp.TextFrame.Characters.Text = \"Excel VBA\"@    End Sub', '在此，Sheet1工作表里做成文本框。并且，在做成的文本框里使用TextFrame属性，添加文字。\n        AddTextbox方法的参数Orientation的指定值具体如下所示。', '', '', '', '', '', '', '', '2017-11-30 14:05:04', null, null, '[{\"title\":\"AddTextbox方法的参数Orientation的指定值\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"msoTextOrientationDownward\",\"向右转90度\"],[\"msoTextOrientationHorizontal\",\"水平方向\"],[\"msoTextOrientationHorizontalRotatedFarEast\",\"横向书写\"],[\"msoTextOrientationUpward\",\"向左转90度\"],[\"msoTextOrientationVertical\",\"垂直方向\"],[\"msoTextOrientationVerticalFarEast\",\"纵向书写\"]]}]');
INSERT INTO `t_tips` VALUES ('344', '344', '图形的做成', 'AddShape方法', 'AddShape方法是用来在工作表内做成图形的。参数Type用来指定图形的种类。详细的说明请参照下记详解。参数Left,Top是指定了图形左侧边缘,上部边缘的位置，以磅为单位。参数Width,Height是指定了图形的宽度,高度的位置，以磅为单位。', 'Sub Sample344_1()@          With Worksheets(\"Sheet1\").Shapes _@            .AddShape(msoShapeStripedRightArrow _@            ,10,20,100,40)@            <cite>#插入向左的图形</cite>@            .TextFrame.Characters.Text = \"Excel VBA\"@            <cite>##在该图形内添加文字“Excel VBA”</cite>@          #End With@    End Sub', '在工作表里插入向左的矢量图形，并添加文字“Excel VBA”', '', '', '', '', '', '', '', '2017-11-30 14:05:04', null, null, '[{\"title\":\"AddTextbox方法的参数Orientation的指定值\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"msoShape16pointStar\",\"十六角星。\"],[\"msoShape24pointStar\",\"二十四角星。\"],[\"msoShape32pointStar\",\"三十二角星。\"],[\"msoShape4pointStar\",\"四角星。\"],[\"msoShape5pointStar\",\"五角星。\"],[\"msoShape8pointStar\",\"八角星。\"],[\"msoShapeActionButtonBackorPrevious\",\"后退”或“上一个”按钮。\"],[\"\",\"支持鼠标单击和鼠标移过操作。\"],[\"msoShapeActionButtonBeginning\",\"“开始”按钮。\"],[\"\",\"支持鼠标单击和鼠标移过操作。\"],[\"msoShapeActionButtonCustom\",\"不带默认图片或文本的按钮。\"],[\"\",\"支持鼠标单击和鼠标移过操作。\"],[\"msoShapeActionButtonDocument\",\"“文档”按钮。\"],[\"\",\"支持鼠标单击和鼠标移过操作。\"],[\"msoShapeActionButtonEnd\",\"“结束”按钮。\"],[\"\",\"支持鼠标单击和鼠标移过操作。\"],[\"msoShapeActionButtonForwardorNext\",\"“前进”或“下一个”按钮。\"],[\"\",\"支持鼠标单击和鼠标移过操作。\"],[\"msoShapeActionButtonHelp\",\"帮助按钮。\"],[\"\",\"支持鼠标单击和鼠标移过操作。\"],[\"msoShapeActionButtonHome\",\"“主页”按钮。\"],[\"\",\"支持鼠标单击和鼠标移过操作。\"],[\"msoShapeActionButtonInformation\",\"“信息”按钮。\"],[\"\",\"支持鼠标单击和鼠标移过操作。\"],[\"msoShapeActionButtonMovie\",\"“影片”按钮。\"],[\"\",\"支持鼠标单击和鼠标移过操作。\"],[\"msoShapeActionButtonReturn\",\"“返回”按钮。\"],[\"\",\"支持鼠标单击和鼠标移过操作。\"],[\"msoShapeActionButtonSound\",\"“声音”按钮。\"],[\"\",\"支持鼠标单击和鼠标移过操作。\"],[\"msoShapeArc\",\"弧形。\"],[\"msoShapeBalloon\",\"气球。\"],[\"msoShapeBentArrow\",\"带90度圆角的箭头。\"],[\"msoShapeBentUpArrow\",\"带90度直角的箭头。默认情况下上指。\"],[\"msoShapeBevel\",\"凹凸效果。\"],[\"msoShapeBlockArc\",\"空心弧。\"],[\"msoShapeCan\",\"圆柱形。\"],[\"msoShapeChevron\",\"V形。\"],[\"msoShapeCircularArrow\",\"带180度圆角的箭头。\"],[\"msoShapeCloudCallout\",\"云形标注。\"],[\"msoShapeCross\",\"十字形。\"],[\"msoShapeCube\",\"立方。\"],[\"msoShapeCurvedDownArrow\",\"上弧形箭头。\"],[\"msoShapeCurvedDownRibbon\",\"下凸弯带形横幅。\"],[\"msoShapeCurvedLeftArrow\",\"右弧形箭头。\"],[\"msoShapeCurvedRightArrow\",\"左弧形箭头。\"],[\"msoShapeCurvedUpArrow\",\"下弧形箭头。\"],[\"msoShapeCurvedUpRibbon\",\"上凸弯带形。\"],[\"msoShapeDiamond\",\"菱形。\"],[\"msoShapeDonut\",\"环形。\"],[\"msoShapeDoubleBrace\",\"双大括号。\"],[\"msoShapeDoubleBracket\",\"双括号。\"],[\"msoShapeDoubleWave\",\"双波形。\"],[\"msoShapeDownArrow\",\"下箭头。\"]]}]');
INSERT INTO `t_tips` VALUES ('345', '345', '移动图形', 'Left属性/Top属性', 'Left属性是用来设置左侧边缘的位置，Top属性是用来设置上方边缘的位置。全都以磅为单位。', 'Sub Sample345_1()@          With Worksheets(\"Sheet1\").Shapes(1)@                .Left = .Left + 20@                .Top = .Top + 30@          End With@    End Sub', '在此，将Sheet1工作表里第一个图形从现在的位置开始向右20磅，向下30磅的方向移动。对于 Left属性的指定值，如果为正数那么向右移动，如果为负数则向左移动。Top属性的指定值，如果为正数那么向下移动，如果为负数则向上移动。', '/images/zhiku/TipsNO345-001.png', '/images/zhiku/TipsNO345-002.png', '从现在的位置移动到指定位置', '从现在的图形的位置移动到指定位置的时候，能使用IncrementLeft和IncrementTop两个属性。它们分别代表水平方向和垂直方向的指定。通过参数的设置来移动位置。具体参照右侧例。', '', '(图形移动前)', '(图形移动后)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('346', '346', '图形的显示隐藏互相切换', 'Visible属性', 'Visible属性是用来指定图形的显示与隐藏。设置值为True的时候该图形显示，False的时候该图形变为隐藏。', 'Sub Sample346_1()@          Worksheets(\"Sheet1\").Shapes(1).Visible = False@          <cite>##将Sheet1里的第一个图形隐藏</cite>@    End Sub', '在此，将Sheet1工作表里第一个图形隐藏。设置True之后再次执行该图形会被表示。', '/images/zhiku/TipsNO346-001.png', '/images/zhiku/TipsNO346-002.png', '显示/隐藏之间的切换', '使用Not演算符，可以简单的在显示和隐藏之间切换。右侧的例子，每次执行都会将该图形在显示和隐藏之间切换', '', '(图形隐藏前)', '(图形隐藏后)', '2017-11-30 14:05:04', null, null, '');
INSERT INTO `t_tips` VALUES ('347', '347', '图形的组合化', 'Group/Ungroup方法', 'Group方法是用来将特定的图形进行组合化的。Ungroup方法是用来取消组合的。', 'Sub Sample347_1()@          Worksheets(\"Sheet1\").Shapes(\"Group1\").Ungroup@          <cite>##将组合化图形「Group1」取消组合</cite>@          Worksheets(\"Sheet1\").Shapes.Range(Array(1,2)).Group@          <cite>##将第一个和第二个图形组合</cite>@    End Sub', '在此，之前的工作表内有一个由三个图形组合的图形\"Group1\"。首先，将这个组合图形取消组合，之后，将第一个和第二个图形组合。', '/images/zhiku/TipsNO347-001.png', '/images/zhiku/TipsNO347-002.png', '重新组合', '关于组合的命令还有重新组合。右侧的例子用来说明，一次取消组合后将第一个图形重新组合。', '', '(所有图形的组合)', '(只有第一张和第二张图形的组合)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('348', '348', '图形翻转', 'Flip方法', '利用Flip方法可以操作图形的上下，左右翻转。通过使用Rotation属性进行图形翻转的时候，连文字也可以翻转，根据文字的方向相对应翻转的方向也有所不同，详细的参照最下方的小提示。', 'Sub Sample348_1()@          Worksheets(\"Sheet1\").Shapes(1).Flip msoFlipHorizontal@          <cite>##将Sheet1的第一个图形进行左右翻转</cite>@    End Sub', 'Sheet1工作表里有向右指向的质量图形，对其进行左右翻转。参数FlipCmd的指定值如下。', '/images/zhiku/TipsNO348-001.png', '/images/zhiku/TipsNO348-002.png', '翻转与文字', '图形内有文字的情况，图形左右翻转之后文字保持不变。上下翻转之后文字变为相反方向。文字是纵向书写的时候，图形左右翻转之后变为相反方向。上下翻转则文字保持不变。', '', '(图形要进行左右翻转)', '(图形执行完左右翻转)', '2017-11-30 14:05:05', null, null, '[{\"title\":\"参数FlipCmd里指定的MsoFlipCmd类的设定值\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"msoFlipHorizontal\",\"左右翻转\"],[\"msoFlipVertical\",\"上下翻转\"]]}]');
INSERT INTO `t_tips` VALUES ('349', '349', '图形旋转', 'Rotation属性', 'Rotation属性是可以将图形旋转任意角度的属性。顺时针旋转设置加值，逆时针旋转设置减值。有文字的时候文字也随着一起旋转。', 'Sub Sample349_1()@          Worksheets(\"Sheet1\").Shapes(1).Rotation = -30@          <cite>##将第一个图片逆时针旋转30度</cite>@    End Sub', 'Sheet1工作表里的第一个图形逆时针旋转30度。文字也一起旋转。', '/images/zhiku/TipsNO349-001.png', '/images/zhiku/TipsNO349-002.png', '指定角度', 'Rotation属性指定角度是单精度浮点小数型(Single型)。比如设定角度365和5是相同效果。', '', '(图形要进行左右翻转)', '(图形执行完左右翻转)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('350', '350', '3D图形旋转', 'RotationX/RotationY/RotationZ属性', 'RotationX属性用来指定3D图形的X轴的旋转角度。RotationY属性用来指定3D图形的Y轴的旋转角度。RotationZ属性用来指定3D图形的Z轴的旋转角度。', 'Sub Sample350_1()@          With Worksheets(\"Sheet1\").Shapes(1).ThreeD@          <cite>##执行第一个图形的3D设定</cite>@                .RotationX = 30@                .RotationY = -20@                .RotationZ = 10@          #End With@    End Sub', '在此，旋转第一个3D图形，3D的设定根据ThreeD属性来进行处理。', '/images/zhiku/TipsNO350-001.png', '/images/zhiku/TipsNO350-002.png', 'ThreeD属性', 'ThreeD属性是返回包含3D表示效果书式属性的ThreeDFormat对象。', '', '', '', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('351', '351', '创建艺术字', 'AddTextEffect方法', 'AddTextEffect方法是用来做成艺术字对象的。参数里可指定文本和书式以及表示位置。详细说明参照如下详解。', 'Sub Sample351_1()@         Worksheets(\"Sheet1\").Shapes(1).AddTextEffect _@             PresetTextEffect:=msoTextEffect16 _@             , Text:=\"Excel VBA\" _@             <cite>##指定文本</cite>@             , FontName:=\"Arial\" _@             <cite>##指定字体</cite>@             , FontSize:=28 _@             <cite>##指定字体大小</cite>@             , FontBold:=False _@             , FontItalic:=False _@             , Left:=10 _@             <cite>##指定左边缘距离</cite>@             , Top:=20@             <cite>##指定上边缘距离</cite>@          End With@    End Sub', '插入艺术字，文字是\"Excel VBA\"，字体是\"Arial\"，字体大小是\"28\"磅，粗体和斜体不设定。\n        AddTextEffect方法的参数如下所示。。', '', '', '', '', '', '', '', '2017-11-30 14:05:05', null, null, '[{\"title\":\"AddTextEffectメソッドの引数\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"PresetTextEffect\",\"预置文本效果\"],[\"\",\"MsoPresetTextEffect可为以下常量之一\"],[\"\",\"msoTextEffect1~msoTextEffect30\"],[\"\",\"msoTextEffectMixed\"],[\"FontName\",\"艺术字对象中所用的字体名称\"],[\"FontSize\",\"以磅为单位给出艺术字对象中所用的字体大小\"],[\"FontBold\",\"在艺术字中要加粗的字体\"],[\"Fontltalic\",\"在艺术字中要倾斜的字体\"],[\"Left\",\"相对于文档的左上角，以磅为单位给出艺术字对象边框左上角的位置\"],[\"Top\",\"相对于文档的顶部，以磅为单位给出艺术字对象边框顶部的位置\"]]}]');
INSERT INTO `t_tips` VALUES ('352', '352', '线的格式设定', 'Line属性', 'Line属性是在Shape对象里取得LinFormat对象。这个对象和表示书式的属性结合使用。', 'Sub Sample352_1()@         With Worksheets(\"Sheet1\").Shapes(1).Line@         <cite>##对Sheet1的第一个图形做处理</cite>@             .Weight = 5@             .EndArrowheadStyle = msoArrowheadtriangle@             <cite>##将终点的矢量风格设为三角矢量图</cite>@             .ForeColor.RGB = RGB(0, 255, 0)@             <cite>##颜色设为绿色</cite>@          End With@    End Sub', '在此，变化Sheet1工作表里的直线的格式。文本的粗细设为5磅，终点风格设为三角矢量图。EndArrowheadStyle属性的指定值如下所示。\n        AddTextEffect方法的参数如下所示。', '', '', '', '', '', '', '', '2017-11-30 14:05:05', null, null, '[{\"title\":\"EndArrowheadStyle属性的指定值\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"msoArrowheadDiamond\",\"菱形箭头\"],[\"msoArrowheadNone\",\"无箭头\"],[\"msoArrowheadOpen\",\"打开箭头\"],[\"msoArrowheadOval\",\"圆形箭头\"],[\"msoArrowheadStealth\",\"锋利的箭头\"],[\"msoArrowheadStyleMixed\",\"仅返回值。与其他的状态组合显示\"],[\"msoArrowheadTriangle\",\"三角箭头\"]]}]');
INSERT INTO `t_tips` VALUES ('353', '353', '自动图形填充色', 'Fill属性', 'Fill属性是将自动图形填充颜色的属性。线和箭头以外的2D图形的填充的格式和表示前景色的ForeColor属性结合使用。ForeColor属性用来指定RGB颜色。', 'Sub Sample353_1()@         Worksheets(\"Sheet1\").Shapes(1).Fill.ForeColor.RGB = RGB(255, 124, 0)@         <cite>##将第一个图形填充橘色</cite>@    End Sub', '在此，填充Sheet1工作表里第一个图形的前景色为橘色。\n        颜色的指定使用RGB函数。RGB函数由红，绿，蓝各个0~255的值来设置。', '/images/zhiku/TipsNO353-001.png', '/images/zhiku/TipsNO353-002.png', '颜色的指定', '用RGB函数指定颜色，任何一个颜色在RGB函数里很难分辨出来会是什么颜色。这个时候，在图形上右键选择“设置形状格式”，在弹出对话框内选择\"颜色\"，再选择\"其他颜色\"会弹出框，在其选择RGB就可以知道具体数值了。', '', '', '', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('354', '354', '直线变点线', 'DashStyle属性', '使用DashStyle属性可以变化线的种类。对于线的种类可以指定MsoLineDashStyle类的常量。具体参照如下详解。', 'Sub Sample354_1()@          Worksheets(\"Sheet1\").Shapes(1).Line.DashStyle = msoLineRoundDot@    End Sub', 'Sheet1工作表里的直线变成电线，先用Line属性取得格式，再用DashStyle属性变化线的种类。\n        DashStyle属性的指定值如下所示。', '/images/zhiku/TipsNO354-001.png', '/images/zhiku/TipsNO354-002.png', '', '', '', '(直线变化前)', '(直线变化成点线)', '2017-11-30 14:05:05', null, null, '[{\"title\":\"DashStyle属性指定的MsoLineDashStyle类的常量\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"msoLineDash\",\"直线仅由短划线构成\"],[\"msoLineDashDot\",\"直线是点划线图案\"],[\"msoLineDashDotDot\",\"直线是点点划线图案\"],[\"msoLineLongDash\",\"直线是由长划线构成\"],[\"msoLineLongDashDot\",\"直线是长点划线构成\"],[\"msoLineRoundDot\",\"直线由圆点构成\"],[\"msoLineSolid\",\"直线是实现\"],[\"msoLineSquareDot\",\"直线是由方点构成\"]]}]');
INSERT INTO `t_tips` VALUES ('355', '355', '填充一种颜色色调', 'OneColorGradient方法', 'OneColorGradient方法用来设置一种颜色的色调。各个参数的说明参照如下详解。', 'Sub Sample355_1()@         Worksheets(\"Sheet1\").Shapes(1).Fill.OneColorGradient _@            Style:=msoGradientHorizontal, Variant:=1, Degree:=1@         <cite> <cite>##执行第一个图形的3D设定</cite></cite>@    End Sub', '设置图形水平方向的色调。', '', '', '', '', '', '', '', '2017-11-30 14:05:05', null, null, '[{\"title\":\"OneColorGradient方法的参数\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"Style\",\"MsoGradientStyle类型的常量指定\"],[\"Variant\",\"过渡变量，取值范围1~4之间，分别与“填充效果”对话框中\\\"过渡\\\"选项卡的四个\"],[\"\",\"过渡变量相对应。如果GradientStyle设为msoGradientFromCenter,则Variant\"],[\"\",\"只能设为1或2\"],[\"Degree\",\"灰度，取值范围为0.0(表示最深)～1.0(表示最浅)之间\"]]},{\"title\":\"设置参数Style的MsoGradientStyle常量\",\"heads\":[\"常量\",\"说明\"],\"rows\":[[\"msoGradientDiagonalDown\",\"右下对角线\"],[\"msoGradientDiagonalUp\",\"右上对角线\"],[\"msoGradientFromCenter\",\"从中央开始\"],[\"msoGradientFromCorner\",\"从角开始\"],[\"msoGradientFromTitle\",\"从标题向外部\"],[\"msoGradientHorizontal\",\"水平方向\"],[\"msoGradientMixed\",\"混在色调\"],[\"msoGradientVertical\",\"垂直方向\"]]}]');
INSERT INTO `t_tips` VALUES ('356', '356', '填充两种颜色色调', 'TwoColorGradient方法', 'TwoColorGradient方法用来设置两种颜色的色调。参数Style的设定值参照Tips355。', 'Sub Sample356_1()@         With Worksheets(\"Sheet1\").Shapes(1).Fill@            .TwoColorGradient msoGradientHorizontal, 1@            <cite>##设定两种颜色的色调</cite>@            .ForeColor.RGB = RGB(0, 255, 0)@            <cite>##前景色绿色</cite>@            .BackColor.RGB = RGB(0, 0, 255)@            <cite>##背景色蓝色</cite>@         End With@    End Sub', '对于Sheet1工作表里的图形，执行设置两种颜色的色调。ForeColor属性用来设置第一个色调， BackColor属性用来设置第二个色调，在这里，最初的颜色是绿色，第二个颜色是蓝色。', '/images/zhiku/TipsNO356-001.png', '/images/zhiku/TipsNO356-002.png', '使用预设颜色', '在EXCEL里事先准备了像\"彩虹出岫\"这样的预设颜色。使用预设颜色要用PresetGradient属性。右侧的例子用来给某个图形设置既存的\"彩虹出岫\"色调。', '', '', '', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('357', '357', '填充图形的纹理效果', 'PresetTextured方法', 'PresetTextured方法是由来给图形填充纹理的。参数PresetTexture用来指定纹理的种类', 'Sub Sample357_1()@         Worksheets(\"Sheet1\").Shapes(1).Fill _@            .PresetTextured msoTextureDenim@            <cite>##给图形设定斜纹布的纹理样式</cite>@    End Sub', '在这里，给图形指定了斜纹布的纹理样式，关于纹理的指定值如下所示。', '/images/zhiku/TipsNO357-001.png', '/images/zhiku/TipsNO357-002.png', '使用原图填充效果', '使用UserTextured方法，画像文件可以指定纹理样式。右侧的例子是将ball.jpg文件作为纹理设定到图形上。', '', '', '', '2017-11-30 14:05:05', null, null, '[{\"title\":\"参数PresetTexture里指定了MsoPresetTexture类的常量\",\"heads\":[\"常量\",\"说明\"],\"rows\":[[\"msoTextureBlueTissuePaper\",\"蓝色砂纸纹理。\"],[\"msoTextureBouquet\",\"花束纹理。\"],[\"msoTextureBrownMarble\",\"褐色大理石纹理。\"],[\"msoTextureCanvas\",\"画布纹理。\"],[\"msoTextureCork\",\"软木塞纹理。\"],[\"msoTextureDenim\",\"布纹理。\"],[\"msoTextureFishFossil\",\"鱼类化石纹理。\"],[\"msoTextureGranite\",\"花岗岩纹理。\"],[\"msoTextureGreenMarble\",\"绿色大理石纹理。\"],[\"msoTextureMediumWood\",\"深色木质纹理。\"],[\"msoTextureNewsprint\",\"新闻纸纹理。\"],[\"msoTextureOak\",\"橡木纹理。\"],[\"msoTexturePaperBag\",\"纸袋纹理。\"],[\"msoTexturePapyrus\",\"纸莎草纸纹理。\"],[\"msoTextureParchment\",\"羊皮纸纹理。\"],[\"msoTexturePinkTissuePaper\",\"粉色砂纸纹理。\"],[\"msoTexturePurpleMesh\",\"紫色网格纹理。\"],[\"msoTextureRecycledPaper\",\"再生纸纹理。\"],[\"msoTextureSand\",\"沙滩纹理。\"],[\"msoTextureStationery\",\"信纸纹理。\"],[\"msoTextureWalnut\",\"胡桃纹理。\"],[\"msoTextureWaterDroplets\",\"水滴纹理。\"],[\"msoTextureWhiteMarble\",\"白色大理石纹理。\"],[\"msoTextureWovenMat\",\"编织物纹理。\"]]}]');
INSERT INTO `t_tips` VALUES ('358', '358', '图片中光彩的设定', 'Glow属性', 'Glow属性是基于图片中光彩设定的一种属性。光彩，是利用Glow属性在所取得的GlowFormat格式中进行设定。光彩的尺寸大小（半径）是通过使用Radius属性指定，颜色是通过Color属性指定。', 'Sub Sample358_1()@         With Worksheets(\"Sheet1\").Shapes(1).Glow@         <cite>##对1sheet页图片进行设定#</cite>@            .Radius = 18@            <cite>#半径设定为 18 point#</cite>@            .Color.RGB = RGB(0,255,0)　　@            <cite>#颜色设定为绿色</cite>@         End With@    End Sub', '对图片的光彩进行设定，半径设定为18。颜色设定为绿色通过使用函数RGB进行设定。', '/images/zhiku/TipsNO358-001.png', '/images/zhiku/TipsNO358-002.png', '选择方法', '和U光彩机能类似，也有对图片层次设定的机能。如果要进行图片层次的设定，就使用SoftEdge属性，接下来的样式选择的是图片层次种类4。', '', '(图片的光彩设定)', '(光彩设定执行了)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('359', '359', '图片反射的设定', 'Reflection属性', 'Reflection属性是对图片的反射进行设定。图片所表示的反射样式在ReflectionFormat中取得。', 'Sub Sample359_1()@         Worksheets(\"Sheet1\").Shapes(1).Reflection _@            #.Type = msoReflectionType1@            <cite>#图片的反射效果设定#</cite>@    End Sub', '这里，进行图片反射的设定。图片反射的种类下面进行阐述。\n        还有，如果要指清空反射的设定，就要对引数Type中的msoReflectionTypeNone进行指定。', '/images/zhiku/TipsNO359-001.png', '/images/zhiku/TipsNO359-002.png', '', '', '', '(设定图片反射)', '(图片反射执行了)', '2017-11-30 14:05:05', null, null, '[{\"title\":\"引数Typen中指定的值\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"msoReflectionType1\",\"反射（弱）没有抵消\"],[\"msoReflectionType2\",\"反射（中）没有抵消\"],[\"msoReflectionType3\",\"反射（強）没有抵消\"],[\"msoReflectionType4\",\"反射（弱）４ｐ抵消\"],[\"msoReflectionType5\",\"反射（中）４ｐ抵消\"],[\"msoReflectionType6\",\"反射（強）４ｐ抵消\"],[\"msoReflectionType7\",\"反射（弱）８ｐ抵消\"],[\"msoReflectionType8\",\"反射（中）８ｐ抵消\"],[\"msoReflectionType9\",\"反射（強）８ｐ抵消\"]]}]');
INSERT INTO `t_tips` VALUES ('360', '360', '生成图表', 'Add方法/SetSourceData方法/ChartType属性', 'Add方法是在object里指定ChartObjects作成图表。参数Left是图表左端的位置，参数Top是图表上端的位置，工作sheet页从左上端开始的距离用point指定。参数Width和Height是用来指定宽度和高度。并且，SetSourceData方法成为图表的参数Source原来的数据，结构的方向由参数PlotBy指定。ChartType属性是以XIChartType类的定数指定图表的种类。关于XIChartType属性的参数，请参照[解说]。', 'Sub Sample360_1()@         With Worksheets(\"Sheet1\").ChartObjects _@            .Add(230, 10, 250, 180).Char@            <cite>#插入图表</cite>@            .SetSourceData Range(\"A3\").CurrentRegion@            <cite>##图表的数据是单元格A3以后的表格数据</cite>@            .ChartType = xlColumnClustered@            <cite>##图表的种类是「集合纵棒」图表</cite>@         End With@    End Sub', '单元格A3以下的表格数据生成柱状图表。\n        在VBA中要生成图表，首先要制作Add方法。这个时刻，是数据等什么都没被设定的状态。\n        并且，对这个图表用SetCourceData方法指定数据，ChartType属性指定图表的种类。', '/images/zhiku/TipsNO359-001.png', '/images/zhiku/TipsNO359-002.png', '', '', '', '', '', '2017-11-30 14:05:05', null, null, '[{\"title\":\"可以按下面的那样指定ChartType属性指定值\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"xl3DArea\",\"三维面积图\"],[\"xl3DAreaStacked\",\"三维堆积面积图\"],[\"xl3DAreaStacked100\",\"百分比堆积面积图\"],[\"xl3DBarClustered\",\"三维簇状条形图\"],[\"xl3DBarStacked\",\"三维堆积条形图\"],[\"xl3DBarStacked100\",\"三维百分比堆积条形图\"],[\"xl3DColumn\",\"三维柱形图\"],[\"xl3DColumnClustered\",\"三维簇状柱形图\"],[\"xl3DColumnStacked\",\"三维堆积柱形图\"],[\"xl3DColumnStacked100\",\"三维百分比堆积柱形图\"],[\"xl3DLine\",\"三维折线图\"],[\"xl3DPie\",\"三维饼图\"],[\"xl3DPieExploded\",\"分离型三维饼图\"],[\"xlArea\",\"面积图\"],[\"xlAreaStacked\",\"堆积面积图\"],[\"xlAreaStacked100\",\"百分比堆积面积图\"],[\"xlBarClustered\",\"簇状条形图\"],[\"xlBarOfPie\",\"复合条饼图\"],[\"xlBarStacked\",\"堆积条形图\"],[\"xlBarStacked100\",\"百分比堆积条形图\"],[\"xlBubble\",\"气泡图\"],[\"xlBubble3DEffect\",\"三维气泡图\"],[\"xlColumnClustered\",\"簇状柱形图\"],[\"xlColumnStacked\",\"堆积柱形图\"],[\"xlColumnStacked100\",\"百分比堆积柱形图\"],[\"xlConeBarClustered\",\"簇状条形圆锥图\"],[\"xlConeBarStacked\",\"堆积条形圆锥图\"],[\"xlConeBarStacked100\",\"百分比堆积条形圆锥图\"],[\"xlConeCol\",\"三维柱形圆锥图\"],[\"xlConeColClustered\",\"簇状柱形圆锥图\"],[\"xlConeColStacked\",\"堆积柱形圆锥图\"],[\"xlConeColStacked100\",\"百分比堆积柱形圆锥图\"],[\"xlCylinderBarClustered\",\"簇状条形圆柱图\"],[\"xlCylinderBarStacked\",\"堆积条形圆柱图\"],[\"xlCylinderBarStacked100\",\"百分比堆积条形圆柱图\"],[\"xlCylinderCol\",\"三维柱形圆柱图\"],[\"xlCylinderColClustered\",\"簇状柱形圆锥图\"],[\"xlCylinderColStacked\",\"堆积柱形圆锥图\"],[\"xlCylinderColStacked100\",\"百分比堆积柱形圆柱图\"],[\"xlDoughnut\",\"圆环图\"],[\"xlDoughnutExploded\",\"分离型圆环图\"],[\"xlLine\",\"折线图\"],[\"xlLineMarkers\",\"数据点折线图\"],[\"xlLineMarkersStacked\",\"堆积数据点折线图\"],[\"xlLineMarkersStacked100\",\"百分比堆积数据点折线图\"],[\"xlLineStacked\",\"堆积折线图\"],[\"xlLineStacked100\",\"百分比堆积折线图\"],[\"xlPie\",\"饼图\"],[\"xlPieExploded\",\"分离型饼图\"],[\"xlPieOfPie\",\"复合饼图\"],[\"xlPyramidBarClustered\",\"簇状条形棱锥图\"],[\"xlPyramidBarStacked\",\"堆积条形棱锥图\"],[\"xlPyramidBarStacked100\",\"百分比堆积条形棱锥图\"],[\"xlPyramidCol\",\"三维柱形棱锥图\"],[\"xlPyramidColClustered\",\"簇状柱形棱锥图\"],[\"xlPyramidColStacked\",\"堆积柱形棱锥图\"],[\"xlPyramidColStacked100\",\"百分比堆积柱形棱锥图\"],[\"xlRadar\",\"雷达图\"],[\"xlRadarFilled\",\"填充雷达图\"],[\"xlRadarMarkers\",\"数据点雷达图\"],[\"xlStockHLC\",\"盘高-盘低-收盘图\"],[\"xlStockOHLC\",\"开盘-盘高-盘低-收盘图\"],[\"xlStockVHLC\",\"成交量-盘高-盘低-收盘图\"],[\"xlStockVOHLC\",\"成交量-开盘-盘高-盘低-收盘图\"],[\"xlSurface\",\"三维曲面图\"],[\"xlSurfaceTopView\",\"曲面图（俯视图）\"],[\"xlSurfaceTopViewWireframe\",\"曲面图（俯视框架图）\"],[\"xlSurfaceWireframe\",\"三维曲面图（框架图）\"],[\"xlXYScatter\",\"散点图\"],[\"xlXYScatterLines\",\"折线散点图\"],[\"xlXYScatterLinesNoMarkers\",\"无数据点折线散点图\"],[\"xlXYScatterSmooth\",\"平滑线散点图\"],[\"xlXYScatterSmoothNoMarkers\",\"xlXYScatterSmoothNoMarkers\"]]}]');
INSERT INTO `t_tips` VALUES ('361', '361', '追加图表页', 'Charts对象/Add方法', 'Charts对象表示图表页。可以使用Add方法制作图表页。Add方法的参数Before、After指定了在sheet页的左边或者右边生成图标页。参数Count是指定追加Chart对象的个数。关于XlChartType类参数，请参照Tips360。', 'Sub Sample361_1()@         With Charts.Add(After: = Worksheets(\"Sheet1\"))@         <cite>##添加图表页</cite>@         .SetSourceData Worksheets(\"Sheet1\").Range(\"A3\") _@            .CurrentRegion@            <cite>##单元格A3以后的单元格范围设定数据</cite>@         .ChartType = xlColumnClusTered@         <cite>##图表的种类设置成「集合纵棒」</cite>@         End with@    End Sub', '用工作簿Sheet1的数据作为图表页的源数据。Add方法作成空的图表后，再指定数据和图表的种类。', '/images/zhiku/TipsNO361-001.png', '/images/zhiku/TipsNO361-002.png', '选择方法', '图表页的名字和原来的sheet页的名字是有关系的。数得到工作簿的数量用[Worksheets.Count]记下，在这种情况下，因为Count属性的对象是Worksheets集，所以不包含图表页。\n        \n        如果数得sheet页数量包含图表页，「Sheets Count」是Sheets集的对象。', '', '', '', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('362', '362', '图表的选择、删除', '选择方法/删除方法', 'Select方法是选择指定的目标文件。Delete方法是删除指定的目标文件', 'Sub Sample362_1()@         Worksheets(\"Sheet1\").ChartObjects(1).Select@         <cite>##1つ目のグラフを選択する</cite>@         Worksheets(\"Sheet1\").ChartObjects(2).Delete@         <cite>##2つ目グラフを削除する</cite>@    End Sub', '工作簿Sheet1中有一个柱形图、一个扇形图。这里，第一个表选中后，第二个表删除。结果剩下一个选中的图表。', '/images/zhiku/TipsNO362-001.png', '/images/zhiku/TipsNO362-002.png', '选择方法', 'Select方法是，选择目标对象的方法。不过在实际的程序中，很少会用到Select方法。这个例子的第二个图表，通过Delete方法被删除。利用宏记录的话，以[选择-处理]的形式记录。多数情况不用选择也可以处理。', '', '', '', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('363', '363', '更改图表的种类', 'ChartType属性', 'ChartType属性，表示图表的种类。也可能更改已存在的图表的种类。ChartType属性，是指定的XiChartType类的常量。对于XiChartType类的常量。请参照Tips360。', 'Sub Sample363_1()@         Worksheets(\"Sheet1\").ChartObjects(1).Chart@            #.ChartType = xlColumnStacked@         <cite>##工作簿的Sheet1的第一个图表的类型是\"堆积柱形图\"</cite>@    End Sub', 'Sheet1的柱形图表，更改为\"堆积柱形图\"型图表。ChartObject对象，变成为了显示图表的框架。其中Chart对象作为实际的图表存在。因此像这个例子一样变成\"ChartObjects(1).Chart\"的记述方法。', '/images/zhiku/TipsNO363-001.png', '/images/zhiku/TipsNO363-002.png', '一同设置图表标题', '不仅仅是图表的种类，除此之外也可以用ChartWizard方法一起更改设置。下面的例子是，更改Sheet1的柱形图。', '', '', '', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('364', '364', '图标名称赋予', 'Name属性', 'Name属性是表示图标的名称的，能够取得值和设定值。', 'Sub Sample364_1()@         Worksheets(\"Sheet1\").ChartObjects(1).Name = \"销售状况\"@         <cite>##将Sheet1工作表的第一个图表命名为\"销售状况\"</cite>@    End Sub', '使用Name属性给图标添加名称。在这里给Sheet1工作表里的第一个图标赋予名称\"销售状况\"。图标插入的时候会添加自动的名称，一旦加上了明确的名称后，在做项目的时候理解会更容易。', '/images/zhiku/TipsNO364-001.png', '/images/zhiku/TipsNO364-002.png', '图标工作表', '图标工作表的时候，则变成图标工作表的名称。右侧的例子，将图标工作表的名称变成\"销售状况\"', '', '', '', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('365', '365', '分离饼图的一部分', 'Name属性', 'SeriesCollection方法是用来返回图标的数据系列。指定参数Index的时候，返回被指定完了的Index的数据系列。Explosion属性是用来切出指定的图表或者饼状图的要素。0~1000的范围为有效值。切出值是以图标的半径进行百分比。', 'Sub Sample365_1()@         Worksheets(\"Sheet1\").ChartObjects(1).Chart _@             .SeriesCollection(1).Points(1).Explosion = 20@    End Sub', '在这里对Sheet1工作表的第一个图表进行处理。将第一个项目数据系列(张三)。Points方法用来指定数据系列的要素。', '/images/zhiku/TipsNO365-001.png', '/images/zhiku/TipsNO365-002.png', '返回切出数据', '返回切出数据是将Explosion属性设为\"0\"', '', '', '', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('366', '366', '在第2轴上分配特定的序列', 'HasAxis属性/AxisGroup属性', 'HasAxis属性可以设定指定图表的轴的表示/不表示。参数index可以用xlCategory（项目轴），xlValue（数值轴）和xlSeriesAxis（序列轴）中的一个来指定对象的轴。参数index2中，可以用xlPrimary（主轴）或者xlSecondary（第2轴）来指定轴的种类。AxisGroup属性可以将指定的数据序列设定为主轴或者设定为第2轴。', 'Sub Sample366_1()@         With Worksheets(\"Sheet1\").ChartObjects(1).Chart@         .HasAxis(xlValue, xlSecondary) = True@         <cite>#表示数值轴的第2轴</cite>@             With　.SeriesCollection(\"合计\")@             <cite>#设定\"合计\"数据序列</cite>@                .ChartType = xlLine@                <cite>#设置为折现图表</cite>@                .AxisGroup = xlSecondary@                <cite>#把图标设定为第2轴</cite>@             End With@         End With@    End Sub', '这里，对\"Sheet1\"工作表的棒形图表进行处理。首先，表示数值轴的第2轴。如果不事先进行这个设定，之后在第2轴上设定数据序列的时候会发生错误（第2轴如果没有被全部设定，回发生错误）。\n        如果表示第2轴，在数据序列上用SeriesCollection方法获取\"合计\"，图表的种类选择折线图表。再用AxisGroup属性把轴设定成第2轴。', '/images/zhiku/TipsNO366-001.png', '/images/zhiku/TipsNO366-002.png', '返回切出数据', '返回切出数据是将Explosion属性设为\"0\"', '', '(将合计数据显示在第2轴上)', '(合计数据变成折线图表，显示在第2轴上)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('367', '367', '设定图表大小及位置', 'Left属性/Top属性/Width属性/Height属性', '从图表的左上端开始，Left属性用磅值指定图表左端的位置，Tip属性用磅值指定图表上端的位置。Width属性和Height属性分别用磅值指定图表的宽度和高度。', 'Sub Sample367_1()@         With Worksheets(\"Sheet1\").ChartObjects(1)@         <cite>#以第一个图表为对象</cite>@             .Left = 10@             <cite>#左端指定10磅的位置</cite>@             .Top = 100@             <cite> #上端指定100磅的位置</cite>@             .Width = 250@             <cite>#将幅度变更为250磅</cite>@             .Height = 150@             <cite>#将高度变更为150磅</cite>@         End With@    End Sub', '这里，变更图表的位置，幅度和高度。', '/images/zhiku/TipsNO367-001.png', '/images/zhiku/TipsNO367-002.png', '组合图表和表的宽度', '要组合图表的宽度和表的宽度，要在Width属性中指定表的列宽。表的列宽用Width属性获取。请参考下面的例子。', '', '(移动图表位置，改变大小)', '(改变了图表的位置和大小)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('368', '368', '变更图表展示区域的颜色', 'PlotArea属性/Color属性', '图表的展示区域用PlotArea对象来表示。获取PlotArea对象，要使用PlotArea属性。颜色用Color属性设定。使用RGB函数设定颜色。', 'Sub Sample368_1()@         Worksheets(\"Sheet1\").ChartObjects(1).Chart _@            .PlotArea.Interior.Color = RGB(0,   255,   255)@         <cite>#将展示区域的颜色设置为青色</cite>@    End Sub', '“Sheet1”工作表的第一个图表的展示区域变更为“青色”。', '/images/zhiku/TipsNO368-001.png', '/images/zhiku/TipsNO368-002.png', '', '', '', '(改变PlotArea的颜色)', '(改变PlotArea的颜色)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('369', '369', '设定图表的标题', 'HasTitle属性/ChartTitle属性', 'HasTitle属性可以切换图表标题的表示与非表示。如果指定为True，则表示图表标题。ChartTitle属性可以获取表示图表标题的ChartTitle对象。与Text属性一起使用，可以设定图表标题的文字列。', 'Sub Sample369_1()@         With Worksheets(\"Sheet1\").ChartObjects(1).Chart@             <cite>#对于第一个图表的处理</cite>@             .HasTitle = True@             <cite>#表示图表标题</cite>@             With  .ChartTitle@             <cite> #对于图表标题的处理</cite>@                .Text = \"销售数据\"@                <cite># #指定文字列</cite>@                .Font.Size = 12@                <cite> #指定字体大小</cite>@             #End With@         End With@    End Sub', '在“Sheet1”工作表的第一个图表中指定图表标题。\n        用HasTitle属性表示图表标题，用ChartTitle属性指定文字。而且，在指定图表标题的情况，必须先使用HasTitle属性来表示图表标题。如果在不表示图表标题的状态下指定标题文字列，就会报错。', '/images/zhiku/TipsNO369-001.png', '/images/zhiku/TipsNO369-002.png', '把图表标题链接到单元格中', '把图表标题链接到单元格的值上，用Text属性指定的地方记述成[.Text = \"=Sheet!A1]这样。Text属性中指定的公式包含工作表名称。', '', '(设定图表标题)', '(图表标题设定)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('370', '370', '设定图表的轴标签', 'HasTitle属性/AxisTitle属性', 'HasTitle属性可以切换轴标签标题的表示与非表示。指定为True的时候，表示轴标签。AxisTitle属性可以获取表示图表轴标签的AxisTitle对象。与Text属性组合使用，可以设定轴标签的文字列。', 'Sub Sample370_1()@         With Worksheets(\"Sheet1\").ChartObjects(1).Chart _@             .Axes(xlCategory)@             <cite>#对于项目轴的处理</cite>@             .HasTitle = True@             <cite>#表示项目标签</cite>@             .AxisTitle.Text = \"负责\"@             <cite>#在标签中设定文字列</cite>@             .AxisTitle.Font.Size = 9@             <cite>#设定标签的字体大小</cite>@         End With@    End Sub', '对于\"Sheet1\"工作表的第一个图表的项目轴，进行处理。表示项目轴的标签，表示成“担当”。把字体大小设定成9磅。', '/images/zhiku/TipsNO370-001.png', '/images/zhiku/TipsNO370-002.png', '将轴标签链接到单元格的值', '在轴标签中使用单元格的值，并且链接在一起，像Text属性中[Text = \"Sheet!A3\"]指定的那样。这时，设定的公式中包含了工作表名称。', '', '(设定项目轴标签)', '(项目轴设定了标签)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('371', '371', '设定数轴的最大值/最小值', 'MaximumScale属性/MinimumScale属性', '设定数轴的最大值、最小值，要使用MaximumScale属性（最大值），MinimumScale属性（最小值）。', 'Sub Sample371_1()@         With Worksheets(\"Sheet1\").ChartObjects(1).Chart _@             .Axes(xlValue)@             <cite>#对第一个图表的数轴进行设定</cite>@         　  .MaximumScale = 120@             <cite> #最大值设定为120</cite>@         　  .MinimumScale = 20@             <cite> #最小值设定为20</cite>@         #End With@    End Sub', '对\"Sheet1\"工作表的第一个图表进行处理。在Axes属性中指定xlValue，以数轴为对象。之后，分别用MaximumScale属性指定最大值，用MinimumScale指定最小值。', '/images/zhiku/TipsNO370-001.png', '/images/zhiku/TipsNO370-002.png', '指定数轴的刻度间隔', '刻度间隔用MajorUnit来指定，辅助刻度间隔用MinorUnit属性来指定。', '', '(设定最大值和最小值)', '(最大值和最小值设定)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('372', '372', '参照图表的图例', 'HasLegend属性/Legend属性', 'HasLegend可以切换凡例的表示与非表示。如果指定为True，则表示凡例。Legend属性可以获取表示凡例的Legend对象。', 'Sub Sample372_1()@         With Worksheets(\"Sheet1\").ChartObjects(1).Chart@         <cite>#以第一个图表为对象</cite>@　  　       .HasLegend = True@             <cite> #表示图例</cite>@             .Legend.Font.Size = 9@             <cite> #将字体大小设置为9磅</cite>@         　  .MinimumScale = 20@             <cite> #最小值设定为20</cite>@         #End With@    End Sub', '在“Sheet1”工作表的第一个图表中表示凡例，并将字体的大小设定为9磅。这里，在设定字体前指定HasLegend属性为True，并表示凡例。像这样，不事先将HasLegend属性的值设为True，如果指定字体就报错。', '/images/zhiku/TipsNO372-001.png', '/images/zhiku/TipsNO372-002.png', '', '', '', '(表示图例)', '(表示图例)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('373', '373', '计算图表的个数', 'Count属性', 'Count属性可以获取指定对象的个数。', 'Sub Sample373_1()@         MsgBox\"图表的个数:\" &amp; _@             Worksheets(\"Sheet1\").ChartObjects.Count@             <cite># #在信息框中表示图表的个数</cite>@    End Sub', '这里，计算“Sheet1”工作表中图表的个数，并表示在信息框中。', '/images/zhiku/TipsNO373-001.png', '/images/zhiku/TipsNO373-002.png', '计算工作表的个数', '计算图表页的个数，要使用Charts对象和Count属性。下面的例子是在信息框中表示图表页的数量。', '', '(显示图表个数)', '(图表个数被显示)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('374', '374', '获取图表的数据序列', 'SeriesCollection方法', 'SeriesCollection方法可以获取表示图表数据序列的SeriesCollection对象。用指定的索引号可以获取特定的数据序列。', 'Sub Sample374_1()@         Worksheets(\"Sheet1\").ChartObjects(1).Chart _@             #.SeriesCollection(\"张三\").Delete@             <cite> #删除数据序列“张三”</cite>@    End Sub', '这里，对“Sheet1\"工作表的第一个图表进行处理。使用SeriesCollection方法，获取”张三“数据序列，用Delete方法删除这个数据序列。', '/images/zhiku/TipsNO374-001.png', '/images/zhiku/TipsNO374-002.png', '', '', '', '(删除数据中的一部分)', '(数据中的一部分被删除)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('375', '375', '获取数据要素', 'Points方法', 'Points方法可以获取图表要素（Points对象）集合的Points对象。通过指定的索引号可以对特定的数据要素进行处理。', 'Sub Sample375_1()@         Worksheets(\"Sheet1\").ChartObjects(1).Chart _@            #.SeriesCollection(\"张三\").Points(2) _@            #.Interior.Color = RGB(255,   0,   0)@             <cite># #将数据序列“张三”的第二个数据要素的颜色设为“红色”</cite>@    End Sub', '这里，对“Sheet1”工作表的第一个图表进行处理。用SeriesCollection方法获取数据序列“张三”，用Points方法获取第二个数据要素。\n        使用RGB函数将获取的数据要素的颜色设置为“红色”。', '/images/zhiku/TipsNO375-001.png', '/images/zhiku/TipsNO375-002.png', '', '', '', '(获取数据)', '(指定的数据用红色涂抹覆盖)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('376', '376', '设定数据标志的格式', 'MarkerSize属性/MarkerStyle属性/MarkerBackgroudColor属性/MarkerForegroundColor属性', '可以改变图表上特定的序列，或者是特定的要素的标志的颜色，形状和尺寸。MarkerSize属性可以设定标志的尺寸，MarkerStyle属性可以设定标志的形状。MarkerBackground属性可以设定标志的背景色，MarkerForegroundColor属性可以设定标志的前景色。MarkerStyle属性中指定的常量请参考“详解”。', 'Sub Sample376_1()@        With Worksheets(\"Sheet1\").ChartObjects(1).Chart _@               ##.SeriesCollection(\"张三\")@               <cite>#对数据序列\"张三\"的处理</cite>@           　　 #.MarkerSize = 5@               <cite>#将尺寸设定成5磅</cite>@               # .MarkerForegroundColor = RGB(255,   0,   0)@               <cite># #前景色设为“红色”</cite>@               # .MarkerBackgroundColor = RGB(255,   255,   0)@               <cite># #背景色设为“黄色”</cite>@               # .MarkerStyle = xlMarkerStylePlus@               <cite># #把标记设定为带加号的四边形</cite>@          End With@    End Sub', '这里，设定折线形图表中的数据序列的标志。\n        AddLine方法的参数具体是什么如下所示。', '/images/zhiku/TipsNO376-001.png', '/images/zhiku/TipsNO376-002.png', '', '', '', '(张三的数据设定marker)', '(marker被设定)', '2017-11-30 14:05:05', null, null, '[{\"title\":\"MarkerStyle属性中指定的XlMarkerStyle类的常量\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"xlMarkerStyleAutomatic\",\"自动\"],[\"xlMarkerStyleCircle\",\"圆形\"],[\"xlMarkerStyleDash\",\"长柱形\"],[\"xlMarkerStyleDiamond\",\"菱形\"],[\"xlMarkerStyleDot\",\"短柱形\"],[\"xlMarkerStyleNone\",\"无\"],[\"xlMarkerStylePicture\",\"图像\"],[\"xlMarkerStylePlus\",\"有加号（+）的四边形\"],[\"xlMarkerStyleSquare\",\"四边形\"],[\"xlMarkerStyleStar\",\"有星号（*）的四边形\"],[\"xlMarkerStyleTriangle\",\"三角形\"],[\"xlMarkerStyleX\",\"有X号的四边形\"]]}]');
INSERT INTO `t_tips` VALUES ('377', '377', '表示表格标签', 'HasDataLabels属性/DataLabels属性', 'HasDataLabels属性可以设定数据序列的标签的表示（True）、非表示（False）。指定特定的数据序列的表格标签的情况，要指定索引号。DataLabels属性可以获取数据标签的收集（DataLabels对象）。获取特定的数据标签要指定索引号。而且设定数据标签上表示的值要使用ApplyDataLabels方法。ApplyDataLabels方法中指定的值请参考“详解”。', 'Sub Sample377_1()@        With Worksheets(\"Sheet1\").ChartObjects(1).Chart _@               ##.SeriesCollection(\"张三\")@               <cite>#对数据序列\"张三\"的处理</cite>@           　　 #.HasDataLabels = True@               <cite># #表示数据标签</cite>@               #.ApplyDataLabels ShowValue: = True@               <cite># #在数据标签里表示值</cite>@               #With.Points(3).DataLabel@               <cite># #对于第三个数据要素的处理</cite>@                    .Text = .Text &amp; \"最多\"@                    <cite># #在标签的值里追加文字咧</cite>@                    .Font.Color = RGB(255,  0,  0)@                    <cite># # 字体的颜色设定成“红色”</cite>@        End With@    End Sub', '这里，以柱状图表的数据序列“张三”的第三个数据要素为对象，进行数据标签的设定。数据标签的文字列用Text属性获取/设定。因为表示数据标签，就会表示值，所以要在值的位置追加“最多”文字列。而且字体的颜色设定成“红色”。', '/images/zhiku/TipsNO377-001.png', '/images/zhiku/TipsNO377-002.png', '', '', '', '(执行数据标签的设定)', '(数据标签被设定)', '2017-11-30 14:05:05', null, null, '[{\"title\":\"ApplyDataLabels方法的参数\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"Type\",\"在XlDataLabelsType类的常量中指定数据标签的种类\"],[\"LengendKey\",\"如果指定True，在要素的旁边做凡例标记\"],[\"AutoText\",\"如果指定True，根据对象自动生成基于内容的合适的文字列\"],[\"HasLeaderLines\",\"如果指定True，在数据序列上表示引出线\"],[\"ShowSeriesName\",\"如果指定True，在数据标签上表示序列名\"],[\"ShowCategoryName\",\"如果指定True，在数据标签上表示分类名\"],[\"ShowValue\",\"如果指定True，在数据标签上表示值\"],[\"ShowPercentage\",\"如果指定True，在数据标签上表示百分比\"],[\"ShowBubbleSize\",\"如果指定True，在数据标签上表示气泡大小\"],[\"Separator\",\"指定数据标签的分割文字\"]]},{\"title\":\"ApplyDataLabels方法的参数Type中指定的XlDataLabelsType类的常量\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"xlDataLabelsShowBubbleSizes\",\"关于绝对值的气泡的大小\"],[\"xlDataLabelsShowLabel\",\"数据要素所属的分类名\"],[\"xlDataLabelsShowLabelAndPercent\",\"全体的百分比和要素的项目名。只有在圆型图表和饼形图表中\"],[\"xlDataLabelsShowNone\",\"无\"],[\"xlDataLabelsShowPercent\",\"全部的百分比。只有在圆形图表和饼形图表中可以指定\"],[\"xlDataLabelsShowValue\",\"数据要素所属的既定值\"],[\"ShowValue\",\"如果指定True，在数据标签中表示值\"],[\"ShowPercentage\",\"如果指定True，在数据标签中表示百分比\"],[\"ShowBubbleSize\",\"如果指定True，在数据标签上表示气泡大小\"],[\"Separator\",\"指定数据标签的分割文字\"]]}]');
INSERT INTO `t_tips` VALUES ('378', '378', '表示数据表格', 'HasDataTable属性/DataTable属性', 'HasDataTable属性可以设定数据表格的表示（True）、非表示（False）。DataTable属性可以获取表示数据表格的DataTable对象。', 'Sub Sample378_1()@        Worksheets(\"Sheet1\").ChartObjects(1).Chart _@        # .HasDataTable = True@        <cite>#表示数据表格</cite>@    End Sub', '表示“Sheet1”工作表中的第一个图表的数据表格。', '/images/zhiku/TipsNO378-001.png', '/images/zhiku/TipsNO378-002.png', '', '', '', '(显示数据表)', '(数据表被显示)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('379', '379', '将图表保存成图像文件', 'Export方法', '利用Export方法，可以将指定的图表保存成图像。在参数Filename中指定保存的文件名。', 'Sub Sample379_1()@        Worksheets(\"Sheet1\").ChartObjects(1).Chart.Export _@            #ThisWorkbook.Path &amp; \"\\图表样例.gif\"@            <cite># #将图表用“图表样例.gif”的文件名保存在</cite>@            <cite># #与这个book相同的文件夹中</cite>@    End Sub', '将图表用“图表样例.gif”的名称来保存。使用Path属性，将保存地址指定到与这个book相同的文件夹。', '/images/zhiku/TipsNO379-001.png', '/images/zhiku/TipsNO379-002.png', '', '', '', '(作为保存图像文件的图表)', '(作为图像文件被保存)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('380', '380', '作成窗体', '追加新规用户窗体', 'UserForm(窗体)，用户能独自作成对话框。在作成的窗体上，布置文字框和命令按钮等等的控件，能实行这样的处理。作成窗体，单击VBE的[插入]菜单栏里的「用户窗体」。', '', '一插入用户窗体，就会自动的加上「UserForm1」的名称。', '/images/zhiku/TipsNO380-001.png', '/images/zhiku/TipsNO380-002.png', '', '', '', '(插入用户窗体)', '(已插入用户窗体)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('381', '381', '表示用户窗体', 'Show方法', '作成的UserForm从系统中表示，利用Show方法。变量modal，可能指定在UserForm表示中工作表呀单元格的操作等其他的处理。指定的值是[vbModal(不可操作)]、[vbModeless(可能操作)]。', 'Sub Sample381_1()@         UserForm1.Show vbModeless@         <cite>##「UserForm1」用modeless表示</cite>@    End Sub', '表示[UserForm1]。这时，指定变量modal里vbModeless。这样的话，UserForm表示的期间也有其他操作的可能。', '/images/zhiku/TipsNO381-001.png', '/images/zhiku/TipsNO381-002.png', '样式和非模态', '用户窗体表示中窗体不能其他的操作(指定Show方法的变量中VbModal)[样式窗体]，窗体能其他操作(指定Show方法的变量中VbModeless)呼出[非模态窗体]。', '', '(表示用户窗体)', '(用户窗体被表示了)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('382', '382', '作成控件', '[工具箱]', '向UserForm配置文本框呀命令按钮等等这样的控件，利用[工具箱]。单击[工具箱]上面的控件追加，拖拽到UserForm的任意地方，就能将控件布置到UserForm上。布置后，拖拽的话位置也能改变。', '', '表示[UserForm1]。这时，指定变量modal里vbModeless。这样的话，UserForm表示的期间也有其他操作的可能。', '/images/zhiku/TipsNO382-001.png', '/images/zhiku/TipsNO382-003.png', '复制控件', '作成完的复制控件，使用复制&粘贴。或者，按下ctrl键，既存的控件一拖拽&放入，控件就被复制了。', '', '(向UserForm上拖拽和布置)', '(命令按钮布置了)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('383', '383', '设定属性', '[属性]窗口', '[属性]窗口，能设定对象的宽呀高度，解释等等。事先设定场合，使用最适合的[属性]窗口。', '', '这里，UserForm的大小通过使用[属性]窗口改变了。', '/images/zhiku/TipsNO383-001.png', '/images/zhiku/TipsNO383-002.png', '运行时设定', '属性可能在程序运行的时候设定。设定[属性]窗口，变化时一旦改变场合属性内改变就要适合。', '', '(使用[属性]窗口设定)', '(UserForm的大小改变了)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('384', '384', '整理控件的布置', '[对齐]菜单', '混合的几个控件位置，利用VBE的[格式]菜单里的[对齐]菜单。还有，统一大小的场合，[格式]菜单的[统一尺寸]菜单。还有，[窗体]工具栏可能是同样的操作。', '', '使UserForm布置的文本框统一位置和大小。\n        这里，宽最小的文本框和高度最高的文本框合在一起，布置统一左对齐，统一垂直间距。\n        首先，确认工具箱的[对象的选择]按钮被选择了，围住全部拖拽的文本框，选择全部的文本框。然后，单击[格式]菜单→[统一尺寸]的[两者都相同]，统一尺寸。接下来，单击[格式]菜单的[对齐]的[左]就左对齐了。并且，单击[格式]菜单的[垂直间距]的[相同]，就调整了文本框的位置。', '/images/zhiku/TipsNO384-001.png', '/images/zhiku/TipsNO384-002.png', '', '', '', '(统一凌乱的文本框位置和大小)', '(文本框位置和大小统一了)', '2017-11-30 14:05:05', null, null, '');
INSERT INTO `t_tips` VALUES ('385', '385', '使用控件', 'Controls属性', '在Form上布置控件，能取得Controls内容。指定index序号，可能取得任意的控件。还有，index序号是从[0]开始的。', 'Sub Sample385_1()@         UserForm1.Show vbModeless@         <cite>#用户窗体用非模态表示</cite>@         MsgBox UserForm1.Controls(1).Text@         <cite>##表示第二个文本框里输入的字符串</cite>@    End Sub', '这里，UserForm上布置的控件的里面，第二个文本框里设定的字符串在MsgBox里表示。\n        用MsgBox来表示的时候UserForm保持不变，用非模态来表示。然后，取得Controls属性使用控件，取得Text属性里文本框的字符串。', '/images/zhiku/TipsNO385-001.png', '/images/zhiku/TipsNO385-002.png', '选择方法', 'Select方法是，选择目标对象的方法。不过在实际的程序中，很少会用到Select方法。这个例子的第二个图表，通过Delete方法被删除。利用宏记录的话，以[选择-处理]的形式记录。多数情况不用选择也可以处理。', '', '(参照第2个控件)', '(表示设定的文字列)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('386', '386', '自动调整控件的大小', 'AutoSize属性', 'AutoSize属性，表示文字的长度与控件的大小设定是否对上。一指定Ture时，控件的大小就会自动改变，一指定False时大小固定。', 'Sub Sample386_1()@         UserForm1.Show vbModeless@         <cite>#UserForm1用非模态表示</cite>@         MsgBox \"调整文本框的宽\"@         <cite>##表示信息</cite>@         UserForm1.TextBox1.AutoSize = True@         <cite>##自动调整文本框的宽</cite>@    End Sub', '首先，UserForm用非模态表示。然后，为了确认连续表示文本框动作。信息表示后，单击[OK]按钮，自动调整文本框的宽。', '/images/zhiku/TipsNO386-001.png', '/images/zhiku/TipsNO386-002.png', '根据样本', '式样运行后，文本框的属性就这样设定了。又一次尝试，文件夹保存后一旦关闭，窗口使用AutoSize属性适合设定False。', '', '(调整文本框的宽)', '(文本框的宽调整了)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('387', '387', '取得控件的个数', 'Count属性', 'Count属性指定object返回对象的个数。取得控件的个数，使用Controls属性，UserForm上做的全部的控件对象。', 'Sub Sample387_1()@         UserForm1.Show vbModeless@         <cite>#UserForm1用非模态表示</cite>@         MsgBox \"控件的个数：\" ＆ _@             UserForm1.Controls.Count@         <cite>##表示控件的个数</cite>@    End Sub', '这里，首先在UserForm上面，布置了2个文本框，2个命令按钮复选框，2个一共6个控件。这个个数通过Count属性取得，在Msgbox表示。\n        根据确认结果，UserForm用非模态表示后，Msgbox表示出。', '/images/zhiku/TipsNO387-001.png', '/images/zhiku/TipsNO387-002.png', '', '', '', '(计算控件的个数)', '(表示出控件的个数)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('388', '388', '设定控件的输入顺序', 'TabIndex属性', 'TabIndex属性,UserForm上Tab键按下时控件的焦点移动。表示那个顺序（Tab顺序）。号码从[0]开始。通常TabIndex属性,UserForm上布置控件的顺序决定的。想指定任意的顺序的话，利用TabIndex属性。', 'Sub Sample388_1()@         With UserForm1@         <cite>#对UserForm进行处理</cite>@         .TextBox2.TabIndex = 1@         <cite>#第2个Tab顺序</cite>@         .CheckBox1.TabIndex = 2@         <cite>#第3个Tab顺序</cite>@         .CheckBox2.TabIndex = 3@         <cite>#第4个Tab顺序</cite>@         .CommandButton1.TabIndex = 4@         <cite>#第5个Tab顺序</cite>@         .CommandButton2.TabIndex = 5@         <cite>#第6个Tab顺序</cite>@         .Show@         <cite>#表示UserForm</cite>@         #End With@    End Sub', '改变UserForm上的Tab顺序。进行全部的控件设定后，表示UserForm。', '/images/zhiku/TipsNO388-001.png', '/images/zhiku/TipsNO388-002.png', '手动设定Tab顺序', 'TabIndex属性，[属性]窗口也可能设定。同时，也能用[视图]菜单的[Tab顺序]确认·设定。', '', '(改变Tab顺序)', '(Tab顺序被改变)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('389', '389', '移动焦点', 'SetFocus方法', 'SetFocus方法，指定对象(控件)移动焦点（合计光标）', 'Sub Sample389_1()@         UserForm1.Show vbModeless@         <cite>#UserForm用非模态表示</cite>@         MsgBox  \"命令按钮移动光标\"@         <cite>#表示消息</cite>@         UserForm1.CommandButton1.SetFocus@         <cite>#命令按钮移动光标</cite>@    End Sub', '在这里，表示UserForm,表示了消息后，命令按钮使用SetFocus方法移动光标。为了理解这个动作，UserForm用非模态表示。', '/images/zhiku/TipsNO389-001.png', '/images/zhiku/TipsNO389-002.png', '', '', '', '(命令按钮移动光标)', '(命令按钮光标被移动)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('390', '390', '点控件然后表示提示', 'ControlTipText属性', '一设定ControlTipText属性，用鼠标点控件时就会表示提示（控件提示）。', 'Sub Sample390_1()@         UserForm1.TextBox2.ControlTipTexｔ = \"输入住所\"@         <cite>#在住所栏设定提示</cite>@         #UserForm1.Show@         <cite>#表示UserForm</cite>@    End Sub', '在这里，住所栏（TextBox2）表示提示。因为表示提示在住所栏，叫[输入片住所]。那之后，表示UserForm。\n        鼠标光标放在住所栏，请确认动作。', '/images/zhiku/TipsNO390-001.png', '/images/zhiku/TipsNO390-002.png', '', '', '', '(文本框里设定提示)', '(提示被表示了)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('391', '391', '设定标题', 'Caption属性', 'Caption就是取得和设定指定的object的caption。取得和设定指定的用户窗体的标题。', 'Sub Sample391_1()@         UserForm1.Caption＝\"Excel VBA\"@         <cite>#设定标题</cite>@         UserForm1.Show@         <cite>#表示用户窗体</cite>@    End Sub', '这里，用户窗体的标题表示为「Excel　VBA」。', '/images/zhiku/TipsNO391-001.png', '/images/zhiku/TipsNO391-002.png', '', '', '', '(设定用户窗体的标题)', '(设定好的用户窗体的标题)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('392', '392', '设定用户窗体的表示位置', 'StartupPosition属性', 'StartupPosition是设定用户窗体的开始的表示位置。可以指定到画面的右上，画面的中央等等。也可以在Excel窗口的中央表示。StartupPosition属性指定的值可以参照解说。', 'Sub Sample392_1()@         UserForm1.StartupPosition＝1@         <cite>#表示位置在Excel窗口的中央</cite>@         UserForm1.Show@         <cite>#表示用户窗体</cite>@         End Sub@    End Sub', '这里是在Excel画面的中央。首先，StartupPosition属性的值指定，之后表示用户窗体。Startupposition的值可以是下面的值。', '/images/zhiku/TipsNO392-001.png', '/images/zhiku/TipsNO392-002.png', '在画面中央表示', 'StartupPosition属性的值设为2，在画面的中央表示。Excel的最大化的基础上运行，确认和下面的例子的区别。', 'Sub Sample392_2()@         UserForm1.StartupPosition＝2@         UserForm1.Show@     End Sub', '', '', '2017-11-30 14:05:06', null, null, '[{\"title\":\"StartupPosition属性指定的值\",\"heads\":[\"值\",\"说明\",\"值\",\"说明\"],\"rows\":[[\"0\",\"无设定\",\"2\",\"画面正中间\"],[\"0\",\"无设定\",\"2\",\"画面正中间\"],[\"1\",\"Excel窗口中央\",\"3\",\"画面左上角\"]]}]');
INSERT INTO `t_tips` VALUES ('393', '393', 'UserForm/Control的表示位置设定', 'Left属性/Top属性', 'Left属性是指定用户窗口左端的位置、Top属性是指定上端的位置、每个画面以左上端为基准指定。', 'Sub Sample393_1()@         With UserForm1@             <cite>#对应UserForm的指定</cite>@             .Top=100@             <cite> #上端的位置設定「100」</cite>@            　.Left=100@             <cite> #左端的位置設定「100」</cite>@             .Show@         End　With@    End Sub', '指定用户窗口的位置。使用Left属性，Top属性指定位置，不管Excel窗口，以画面的左上端为基准。等等，StartupPosition指定0以外的场合，Left属性，Top属性的指定无效。', '/images/zhiku/TipsNO393-001.png', '/images/zhiku/TipsNO393-002.png', '', '', '', '', '', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('394', '394', '变更From或Control的大小', 'Height属性/Width属性', '就From或Control的大小，设定Heigth属性（高度），With属性（幅度），以像素为单位。', 'Sub Sample394_1()@         With UserForm1@             <cite>#对于用户窗体的处理</cite>@                 .Show Modeless@                 <cite> #表示Modeless</cite>@                 MsgBox \"使TextBox的高度和幅度一致\"@                 <cite>#表示信息</cite>@                 .TextBox2.Width = .TextBox1.Width@                 <cite>#使住所的幅度和姓名的幅度一致</cite>@                 .TextBox2.Height = .TextBox1.Height@                 <cite>#使住所的高度和姓名的高度一致</cite>@         End　With@    End Sub', '在这里，使UserFrom上的TextBox的幅度一致。首先，Modeless表示UserFrom。这样是为了动作确认。Message表示后，使TextBox的幅度一致。', '/images/zhiku/TipsNO394-001.png', '/images/zhiku/TipsNO394-002.png', '', '', '', '(使TextBox的高度和幅度一致)', '(高度和幅度一致)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('395', '395', '变更Form上的MousePointer', 'MousePointer属性/Mouselcon属性', '使用MousePointer属性可以设MousePointer的形式。Pointer的形式，每个Control都可以设定还有，可以组合Mouselcon属性使用，可以作为原始的图标使用。', 'Sub Sample395_1()@         With UserForm1@         <cite>#对于用户窗体的处理</cite>@            .TextBox1.MousePointer = fmMousePointerAppStarting@            <cite>#文本框鼠标是图标沙漏</cite>@            With .CommandButton1@            <cite>#处理按钮的处理</cite>@            .MousePointer = fmMousePointerCustom@            <cite>#使用Icon的指定</cite>@            .MouseIcon = LoadPicture(ThisWorkbook.Path &amp; \"\\icon.ico\")@            <cite>#使用Icon的指定</cite>@            End With@            .Show@         End With@    End Sub', '在这里，鼠标在用户窗体上的文本框和控制按钮上面的时候，鼠标的形状变更。文本框变成［图标和沙漏］，命令按钮变成［Icon.ico］文件所有的设定终了后，表示用户窗体。\n        就Icon 文件的指定LoadPicture函数使用读取文件。那么，Icon的形状表示出来。', '/images/zhiku/TipsNO395-001.png', '/images/zhiku/TipsNO395-002.png', '', '', '', '', '', '2017-11-30 14:05:06', null, null, '[{\"title\":\"指定MousePointer属性fmMousePointer的值\",\"heads\":[\"值\",\"说明\"],\"rows\":[[\"ｆｍMousePointerDefault\",\"标准Pointer\"],[\"ｆｍMousePointerArrow\",\"图标\"],[\"ｆｍMousePointerCross\",\"十字Pointer\"],[\"ｆｍMousePointerIBeam\",\"Ibeam\"],[\"ｆｍMousePointerSizeNESW\",\"指示右上和左下的两端图标\"],[\"ｆｍMousePointerSizeNS\",\"指示上和下的两端图标\"],[\"ｆｍMousePointerSizeNWSE\",\"指示左上和右下的两端图标\"],[\"ｆｍMousePoinerSizeWE\",\"指示右和左的两端图标\"],[\"ｆｍMousePointerUｐAｒrow\",\"上向的图标\"],[\"ｆｍMousePoinerHourglass\",\"沙漏\"],[\"ｆｍMousePointerNoDrop\",\"重复拖拽的对象有不可的圆圈（圆和对角线）\"],[\"ｆｍMousePointerAppStarting\",\"图标和沙漏\"],[\"ｆｍMousePoinerHelp\",\"图标和疑问符\"],[\"ｆｍMousePointerSizeAll\",\"游标大小变更（指示上下左右的图标）\"],[\"ｆｍMousePointerCustom\",\"指定MouseIcon属性使用的Icon\"]]}]');
INSERT INTO `t_tips` VALUES ('396', '396', 'Form表示前的初期设定', 'Initialize事件', '用户窗体的初期表示（按缓存的读入）时，Initialize事件发生。使用这个事件时，可以对Form表示前进行初期表示。', 'Sub Sample396_1()@         Private Sub UserForm_Initialize()@               TextBox1.Text=Date &amp; \"日\"@               <cite>#文本框中设定日期</cite>@    End Sub', '在这里，Initialize事件使用，文本框中输入本日的日期。\n        Initialize事件是用户窗体读入时发生的事件。实际上是在用户窗体实行前发生的事件，用来初期化用户窗体。\n        那么，请参照第１３章中的［事件妙招］', '/images/zhiku/TipsNO392-001.png', '/images/zhiku/TipsNO392-002.png', '示例的实行方法', '示例在实行时，按照标准模块中的代码实行。', 'Sub Sample396_2()@         UserForm1.Show@     End Sub', '(用户窗体初期化)', '(文本框中表示日期)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('397', '397', 'Form背景色变更', 'BackColor属性', '使用BackColor属性，可以设定用户窗体的背景色。背景色使用RGB函数设定RGB值。', 'Sub Sample397_1()@    Private Sub CommandButton1_Click（）@         Dim r As Long, g As Long, b As Long@         With Me@              r = .TextBox1.Value@              <cite>#取得红色的值</cite>@              g = .TextBox2.Value@              <cite>#取得绿色的值</cite>@              b = .TextBox3.Value@              <cite>#取得蓝色的值</cite>@              .BackColor = RGB(r, g, b)@              <cite>#設定背景色</cite>@         End　With@    End Sub', '在这里，取得每个文本框的输入值之后，作为RGB函数的输入值使用。使用输入的值来设定用户窗体的背景色。\n        这个处理是在单击命令窗口时执行。还有，在用户窗体上表示书写的值。', '/images/zhiku/TipsNO397-001.png', '/images/zhiku/TipsNO397-002.png', '示例的实行方法', '示例在实行时，按照标准模块中的代码实行。', 'Sub Sample397_2()@         UserForm1.Show', '(设定背景色)', '(设定背景色后)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('398', '398', '隐藏Form', 'Hide方法', '使用Hide方法时，用户窗体可以暂时隐藏起来，仅仅是非表示由于没有关闭用户窗体，所以控件的输入值等等保持不变。', 'Sub Sample398_1()@    Private Sub CommandButton1_Click（）@         With UserForm1@              .Hide@              MsgBox \"用户窗体隐藏，单击[OK]再次显示\"@              <cite>#显示信息</cite>@              .Show@         End　With@    End Sub', '单机命令按钮进行动作确认。如果单击命令按钮，隐藏用户窗体。显示提示信息。在提示框中单击［ＯＫ］按钮时，用户窗体可以再一次显示出来。单击命令按钮前，文本框中输入的是什么数据，一样在保存着，请确认一下。', '/images/zhiku/TipsNO398-001.png', '/images/zhiku/TipsNO398-002.png', '示例的实行方法', '示例在实行时，按照标准模块中的代码实行。', 'Sub Sample398_2()@         UserForm1.Show', '(文本框输入值后,隐藏用户窗体)', '(再次显示用户窗体,文本框保持)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('399', '399', '关闭Form', 'Unload语法', 'Unload方法，是用户窗体关闭方法，和隐藏方法完全不一样的关闭，所以文本框中的文字会丢失。', 'Sub Sample399_1()@    Private Sub CommandButton1_Click（）@         Unload Me@    End Sub', '这个快捷键是可以切换VBE窗口和EXCEL窗口的。\n        VBE使用完后，点击[关闭]按钮。或者，如果直接关闭EXCEL窗口，VBE窗口也会自动关闭。', '/images/zhiku/TipsNO399-001.png', '/images/zhiku/TipsNO399-002.png', '示例的实行方法', '示例在实行时，按照标准模块中的代码实行。', 'Sub Sample399_2()@         UserForm1.Show', '(关闭用户窗体)', '(关闭用户窗体后)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('400', '400', '通过命令按钮执行处理', 'Click事件', '单击命令按钮时，Click事件会发生。Click事件是VBE上的命令按钮单击时作成的。在这个程序里，命令按钮被单击时执行处理。', 'Sub Sample400_1()@    Private Sub CommandButton1_Click（）@        <cite>#命令按钮单击时的处理</cite>@        TextBox1.Text = \"命令按钮按下\"@        <cite>#设定文本框中的文字</cite>@    End Sub', '在这里，按下命令按钮时，设定文本框中的文字。', '/images/zhiku/TipsNO400-001.png', '/images/zhiku/TipsNO400-002.png', '示例的实行方法', '示例在实行时，按照标准模块中的代码实行。', 'Sub Sample400_2()@         UserForm1.Show', '(单击命令按钮执行处理)', '(文字序列输入文本框中)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('401', '401', '通过<Enter>键/<Esc>键实行处理', 'Default属性/Cancel属性', 'Default属性设定为True时，对应的命令按钮是既定默认的按钮，命令按钮对应的控件没有游标时，通过<Enter>键和点击该命令按钮是同样的动作。还有，Cancel属性指定是True时，这个命令按钮和取消按钮同样作用。没有游标也可以取消选择。', 'Sub Sample401_1()@    Private Sub UserForm_Initialize()@        Witn Me@             .CommandButton1.Default=True@             <cite>#命令按钮1设定为默认按钮</cite>@             .CommandButton2.Cancel=True@             <cite>#命令按钮2设定为取消按钮</cite>@    End Sub@    Private Sub CommandButton1_Click()@        TextBox1.Text=\"&lt;Enter&gt;键押下\"@    End Sub@    Private Sub CommandButton2_Click()@        TextBox1.Text=\"&lt;Esc&gt;键押下\"@    End Sub', '在这里，使用Iniliatize事件，能够给命令按钮分配默认属性和取消属性。每个命令按钮都可以变为<Enter>键或者<Esc>键操作。\n        还有，命令按钮上有游标的时候，<Enter>键按下时，会注意到有游标的命令按钮的按下。', '', '', '', '', '', '', '', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('402', '402', '使命令按钮有效无效', 'Enabled属性', '对于命令按钮的有效和无效的切换，使用Enabled属性。当Enabled属性变成False时，命令按钮变成无效。游标不能取得，也不能就点击。', 'Sub Sample402_1()@    Private Sub CheckBox1_Click（）@        <cite>#复选框单击后的处理</cite>@        Witn Me@        If .CheckBox1.Value=True Then@             <cite>复选框选择判定</cite>@             .CommandButton1.Enabled=True@        Else@             .CommandButton1.Enabled=False@        End If@        End With@    End Sub', '在这里，对应于用户窗体上的复选框，命令按钮在有效和无效间切换。复选框选择的时候，Value的值变成True。', '/images/zhiku/TipsNO402-001.png', '/images/zhiku/TipsNO402-002.png', '', '', '', '(对应于用户窗体上的复选框，命令按钮在有效和无效间切换)', '(命令按钮设定变更)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('403', '403', '表示嵌入命令按钮的详细信息', 'Tag属性', 'Tag属性是，取得或设定为了满足命令按钮或标签，文本框嵌入的对象的信息。', 'Sub Sample403_1()@    Private Sub UserForm_Initialize（）@        <cite>#初期化用户窗体</cite>@        CommandButton1.Tag = \"确认入力数据\"@        <cite>#设定命令按钮的Tag属性的字符串</cite>@    End　Sub@    Private Sub CommandButton1_Click（）@             <cite>#在Tag属性中设定的值可以表示在提示框中</cite>@    End Sub', '在这里，首先初期化事件，设定命令按钮的Tag属性的字符串。\n        打开用户窗体后，点击命令按钮时，在Tag属性中设定的值可以表示在提示框中。', '/images/zhiku/TipsNO403-001.png', '/images/zhiku/TipsNO403-002.png', '', '', '', '(在命令按钮上设定信息)', '(设定信息)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('404', '404', '点击命令按钮后，使游标不存在', 'TakeFocusOnClick属性', 'TakeFocusOnClick属性是，在点击控件后，可以设定取得的该控件。设定为True时，游标还在，设定为False时，游标就不在了。', 'Sub Sample404_1()@    Private Sub UserForm_Initialize（）@        #CommandButton1.TakeFocusOnClick=False@        CommandButton2.TakeFocusOnClick=False@        <cite>#使每个命令按钮没有游标</cite>@    End　Sub@    Private Sub CommandButton1_Click（）@         TextBox1.Text=\"Excel　VBA\"@         <cite>#在文本框入力[Excel VBA]</cite>@    End Sub', '在用户窗体上，有一个文本框和两个命令按钮。在打开用户窗体时，文本框中的游标设定的样子。在这个状态下，点击实行按钮时，在文本框入力[Excel VBA]，通常情况下，实行按钮上的游标依然存在，初期化时，为了不使命令按钮上的游标移动，在文本框上设定游标。', '/images/zhiku/TipsNO404-001.png', '/images/zhiku/TipsNO404-002.png', '', '', '', '(在文本框上有游标)', '(在文本框上依然有游标)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('405', '405', '使命令按钮有效无效', 'Picture属性', '使用Picture属性，可以在命令按钮上表示图片。能够指定的画像文件可以是，命令按钮变成无效。游标不能取得，也不能就点击。Bitup(bmp/dib)、Gif image(jpg)、JPEG file(jpg)、meta file(wmf/emf)、icon(ico)。使用LoadPicture函数设定图像文件。', 'Sub Sample405_1()@    Private Sub UserForm_Initialize（）@        #CommandButton1.Picture=LoadPicture(ThisWorkbook.Path &amp; \"\\OK.bmp\")@    End　Sub', '点击命令按钮，使用LoadPicture函数读入当前路径下的[OK.bmp]文件。设定命令按钮。', '/images/zhiku/TipsNO405-001.png', '/images/zhiku/TipsNO405-002.png', '', '', '', '(命令按钮上指定图像)', '(命令按钮上指定图像后)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('406', '406', '用AccessKey执行', 'Accelerator属性', 'Accelerator属性是，在命令按钮上设定AccessKey。设定AccessKey时，<Alt>Key+被分配的Key和点击命令按钮执行同样的处理。', 'Sub Sample406_1()@    Private Sub UserForm_Initialize（）@        #CommandButton1.Accelerator=\"a\"@        #命令按钮上分配了&lt;Alt&gt;key+&lt;a&gt;key的AccessKey@    End　Sub@    Private Sub CommandButton1_Click（）@        TextBox1.Text=\"Excel VBA\"@    End　Sub', '在这里，命令按钮上分配了<Alt>key+<a>key的AccessKey。在用户窗体初期化时表示分配信息后，&lyAlt>key+<a>key按下时和点击命令按钮执行相同的处理。在文本框中入力[Excel VBA]。', '/images/zhiku/TipsNO406-001.png', '/images/zhiku/TipsNO406-002.png', '示例的实行方法', 'AccessKey是，和<Alt>key的组合。不能指定和<Ctrl>或<Shift>键的组合(也不能指定<Ａ>的大写和<Shift>键的组合)。还有，命令按钮的Caption是[实行(a)]的样子，AccessKey是用半角括号包围时，该文字(这里是［ａ］)上引入下线，明确表示AccessKey。', '', '(在命令按钮上分配AccessKey)', '(命令按钮设定变更)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('407', '407', '切换按钮变更时实行的处理', 'Value属性', 'Value属性是,切换状态的取得。On时是True，Off时是False。和Caption属性组合使用，切换按钮的On和Off切换表示。', 'Sub Sample407_1()@    Private Sub UserForm_Initialize（）@        <cite>#切换按钮按下时的处理</cite>@            If ToggleButton1.Value Then@                <cite>切换按钮的状态判断</cite>@                ToggleButton1.Caption = \"OK\"@                <cite>#on的情况Caption设定为[on]</cite>@            Else@                ToggleButton1.Caption = \"OFF\"@             End If@    End Sub', '对应于切换按钮的状态，Caption属性变化。切换按钮是on和off之间切换的按钮。On时变成按钮的区分状态。\n        这里，变化成和他的状态对应的取消状态。', '/images/zhiku/TipsNO407-001.png', '/images/zhiku/TipsNO407-002.png', '', '', '', '(变化成的取消状态)', '(变化成的取消状态后)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('408', '408', '淡色表示切换按钮', 'TripleState属性', '使用TripleState属性，可以指定切换按钮的Value属性为Null。设定为Null值的切换按钮，可以淡色表示。切换按钮是on和off时，表示状态为未设定。', 'Sub Sample408_1()@    Private Sub UserForm_Initialize（）@        #ToggleButton1.TripleState=True@        <cite>#淡色表示切换按钮</cite>@    End Sub@    Private Sub ToggleButton1_Change（）@         Select Case ToggleButton1.Value@            Case True@                <cite>ToggleButton1.Caption=\"OK\"</cite>@            Case False@                <cite>ToggleButton1.Caption=\"OFF\"</cite>@            Case Else@                <cite>ToggleButton1.Caption=\"未設定\"</cite>@         End Select@    End Sub', '在这里，使用TripleState属性，切换按钮设定为淡色表示，首先，用户窗体的Initialize事件的TripleState属性设定为True。\n        用户窗体表示后，切换按钮的change事件的状态对应变更为取消。\n        再者，取消的变更通过Click事件通常是可能的，切换按钮变为淡色按钮的时候，切换按钮编辑不可。还有，下回的处理使用Click事件。', '', '', '', '', '', '', '', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('409', '410', '取得/设定文本框的字符串', '文本属性', '利用文本属性，取得·设定文本框中的字符串。', 'Sub Sample410_1()@    Private Sub CommandButton1_Click()@        <cite>#单击命令按钮时的处理</cite>@        TextBox1.Text = \"Excel VBA\"@        <cite>#在文本框中输入字符串「Excel VBA」</cite>@        MsgBox \"输入框的文字：\"　＆ TextBox1.Text@        <cite>#表示在文本框中输入的字符串</cite>@    End Sub', '在这里，单击命令按钮时，在文本框中输入字符串，然后，取得输入的字符串，在消息框中表示。可以确认text文本属性的设定和取得\n        这里，变化成和他的状态对应的取消状态。', '/images/zhiku/TipsNO410-001.png', '/images/zhiku/TipsNO410-002.png', '', '', '', '(设定·取得文本框的值)', '(设定文本框的值，并且取得这个值)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('410', '411', '获取输入字符数', '文本长度属性', '利用文本长度属性，能确认在文本框中输入的字符长度', 'Sub Sample411_1()@    Private Sub UserForm_Initialize()@    <cite>#初始化Userform</cite>@        CommandButton1.Enabled = False@        <cite>#使命令按钮无效</cite>@    End Sub@    Private Sub TextBox1_Change()@    <cite>#文本框的值变化时的处理</cite>@        If TextBox1.TextLength = 0 Then@        <cite>#确认文本框中字符数</cite>@            CommandButton1.Enabled = False@            <cite>#字符长度为0时，命令按钮无效</cite>@        Else@            CommandButton1.Enabled = True@        <cite>#字符长度不为0时，命令按钮有效</cite>@        End If@    End Sub', '在这里，文本框没有输入值并且命令按钮不能使用。\n        首先，Initialize事件命令按钮无效。\n        用户形式表示后，在文本框中输入文字并且命令按钮变为有效。当文本框的字符数变为0（也就是空白栏）时，命令按钮再次变为无效。', '/images/zhiku/TipsNO411-001.png', '/images/zhiku/TipsNO411-002.png', '', '', '', '(按照text box的字符串的长度进行处理)', '(如果text box文字输入，命令按钮变得有效)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('411', '412', '居中对齐文本框的文字', 'TextAlign属性', 'TextAlign属性是指设定本文框内字符串位置的属性。可选择的有左对齐、居中对齐、右对齐请参照[详解]的指定值', 'Sub Sample412_1()@    Private Sub UserForm_Initialize()@    <cite>#初始化Userform</cite>@        TextBox1.Text = \"Excel VBA\"@        <cite>##设定输入框的文本为[Excel VBA]</cite>@    End Sub@    Private Sub CommandButton1_Click()@    <cite>#单击命令按钮时的处理</cite>@        TextBox1.TextAlign = fmTextAlignCenter@        <cite>#设定文本居中对齐</cite>@    End Sub', '在文本框中设定被设定文字的配置。单击命令按钮的同时文本框中的字符串变为居中对齐。TextAlign属性的指定值，参照下面的表格', '/images/zhiku/TipsNO412-001.png', '/images/zhiku/TipsNO412-002.png', '', '', '', '(把text box的字符串做为中间对齐)', '(字符串变为了中间对齐)', '2017-11-30 14:05:06', null, null, '[{\"title\":\"TextAlign属性指定值\",\"heads\":[\"常量\",\"内容\"],\"rows\":[[\"fmTextAlignLeft\",\"左对齐(默认値)\"],[\"fmTextAligCenter\",\"居中对齐\"],[\"fmTextAlignRight\",\"右对齐\"]]}]');
INSERT INTO `t_tips` VALUES ('412', '413', '使其可以输入多行', 'MultiLine属性', 'MultiLine属性指的是，一旦指定为True，文本框变为可以输入多行。用户可以强制换行。强制换行是的快捷键是Ctrl+Enter。', 'Sub Sample413_1()@    Private Sub UserForm_Initialize（）@    <cite>#初始化Userform</cite>@        TextBox1.Text = \"Excel VBA\"@        <cite>##设定输入框的文本为[Excel VBA]</cite>@    End　Sub@    Private Sub TextBox1_Change()@        <cite>#单击命令按钮时的处理</cite>@        TextBox1.MultiLine = True@        <cite>#可以输入多行的设定</cite>@    End　Sub', '文本框能输入多行是指，MultiLine属性设置为True。在这里，为了确认单击命令按钮时指定功能的设定，通常，设定为UserForm的Initialize事件等会更好一些。', '/images/zhiku/TipsNO413-001.png', '/images/zhiku/TipsNO413-002.png', '在文本框设置滚动条', '输入的内容可能多行，导致超出文本框范围。这时可以设定滚动条。设定值有以下几种、fmScrollBarsVertical垂直方向)、fmScrollBarsHorizontal(水平方向)、fmScrollBarsBoth（水平和垂直方向）、fmScrollBarsNone（不设置）。', '', '(按下Ctrl 键＋Enter键不能换行)', '(按下Ctrl 键＋Enter键能换行)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('413', '414', '限制输入字符串长度', 'MaxLength属性', '利用MaxLength属性，可以设置文本框输入的最大字符串数。防止在输入邮编号或者商品代码等时发生错误。', 'Sub Sample414_1()@    Private Sub CommandButton1_Click()@    <cite>#单击命令按钮时的处理</cite>@        #TextBox1.MaxLength = 10@        <cite>#指定可输入的字符创长度为10</cite>@    End　Sub', '单击命令按钮时，设定文本框可输入的字符串长度为10。另外，如果已经在文本框里输入十个以上的字符的情况，程序运行后，将保持原来的状态.\n        在这里，为了确认单击命令按钮时指定功能的设定，通常，设定为UserForm的Initialize事件等会更好一些。', '/images/zhiku/TipsNO414-001.png', '/images/zhiku/TipsNO414-002.png', '', '', '', '(输入字符串长度超过十)', '(输入的字符串长度不能超过十)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('414', '415', '换行或者Tab键的输入有效化', 'EnterKeyBehavior属性/TabKeyBehavior属性', '利用EnterKeyBehavior/TabKeyBehavior属性，text box有焦点的时候，能设定推了回车键和ab键的时候的动作。MultiLine属性True，EnterKeyBehavior属性是True的情况，在textbox内按回车键换行。另外，MultiLine属性是True、TabKeyBehavior属性是True的情况下，在textbox里按Tab键，将插入一个Tab', 'Sub Sample415_1()@    Private Sub CommandButton1_Click()@    <cite>#单击命令按钮时的处理</cite>@        With TextBox1@        <cite>#对text box的设定</cite>@             .MultiLine = True@             <cite>#可以输入多行</cite>@             .EnterKeyBehavior = True@             <cite>#换行键有效</cite>@             .TabKeyBehavior = True@             <cite>#Tab键有效</cite>@        End With@    End　Sub', '单击了命令按钮的时候，进行textbox的设定。可以输入多行，换行键和Tab键有效。另外，在这里，为了确认单击命令按钮时指定功能的设定，通常，设定为UserForm的Initialize事件等会更好一些。', '/images/zhiku/TipsNO415-001.png', '/images/zhiku/TipsNO415-002.png', '在文本框设置滚动条', '在这里介绍了的设定，「属性窗」也能设定。', '', '(按下Ctrl 键＋Enter键能换行)', '(按下Ctrl 键＋Enter键不能换行)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('415', '416', '移动焦点使字符串全部被选择', 'EnterFieldBehavior属性', '利用EnterFieldBehavior属性的话，text box取得了焦点的时候，能指定是不是选择输入的字符串。指定True的话，选择字符串。', 'Sub Sample416_1()@    Private Sub UserForm_Initialize()@    <cite>#初始化Userform</cite>@        With TextBox1@        <cite>#对text box的设定</cite>@            .Text = \"Excel VBA\"@            <cite>#text box设定字符串</cite>@            .EnterFieldBehavior = fmEnterFieldBehaviorSelectAll@            <cite>#选择焦点取得的时候字符串</cite>@        End With@    End Sub', 'textbox取得了焦点的时候，选择text box内的字符串。Userform表示后、用Tab键移动文本框内的焦点。选择字符串。另外，EnterFieldBehavior属性的指定值，参照下面。', '/images/zhiku/TipsNO416-001.png', '/images/zhiku/TipsNO416-002.png', '', '', '', '(把text box的字符串做为中间对齐)', '(选择文字列)', '2017-11-30 14:05:06', null, null, '[{\"title\":\"EnterFieldBehavior属性指定值\",\"heads\":[\"定数\",\"内容\"],\"rows\":[[\"fmEnterFieldBehaviorSelectAll\",\"选择全部的字符串\"],[\"fmEnterFieldBehaviorReacallSelection\",\"按照上回Ctrl活性的状态\"]]}]');
INSERT INTO `t_tips` VALUES ('416', '417', '移动焦点使字符串全部被选择', 'HideSelection属性', 'HideSelection属性如果设定成False，即便是失去了焦点控制字符串也会保持选中的状态', 'Sub Sample417_1()@    Private Sub UserForm_Initialize()@    <cite>#初始化Userform</cite>@        With TextBox1@        <cite>#对text box的设定</cite>@            .Text = \"Excel VBA\"@            <cite>#设定字符串</cite>@            .HideSelection = False@            <cite>#设定保持字符串的选中状态</cite>@        End With@    End Sub', '初始化Userform时，设定文本框中的字符串，并移动焦点。保持字符串的选择状态。UserForm表示后，选择文本框中的字符串。在那之后、用Tab键等移动焦点到其他的程序上。确认保持文本框里的字符串的选择状态。', '/images/zhiku/TipsNO417-001.png', '/images/zhiku/TipsNO417-002.png', '在文本框设定滚动条', '在这里介绍了的设定，「属性窗」也能设定。', '', '(选择字符串)', '(移动焦点字符串也被选择了)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('417', '418', '移动焦点使字符串全部被选择', 'SelectionMargin属性', '如果SelectionMargin属性是True，在text box和组合框左侧能设定空白。设定空白，只是单击空白部分，就能选择输入的全体字符串。表示多行的场合，可以进行整行选择。', 'Sub Sample418_1()@    Private Sub UserForm_Initialize()@    <cite>#初始化Userform</cite>@        With TextBox1@        <cite>#对text box的设定</cite>@            .Text = \"Excel VBA\"@            <cite>#在文本框设置字符串</cite>@    End Sub@    Private Sub CommandButton1_Click()@    <cite>#在左侧设置空白</cite>@        TextBox1.SelectionMargin = True@    End Sub', '在与text box的左端被输入的字符串之间，设定空白。在这里，设定单击命令按钮。因为单击空白处输入的字符串被全部选择，所以进行选择字符串全体的操作多的情况非常方便。', '/images/zhiku/TipsNO418-001.png', '/images/zhiku/TipsNO418-002.png', '', '', '', '(在文本框的左侧设置空白)', '(设定空白)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('418', '419', '在文本框内禁止编辑', 'Locked属性', 'Locked属性是True的话，文本框变为不能编辑状态。 如果Enabled属性是False，那么textbox则不可使用，编辑、选择均不可用，Control的颜色也会置灰。', 'Sub Sample419_1()@    Private Sub UserForm_Initialize()@    <cite>#初始化Userform</cite>@        .Text = \"Excel VBA\"@        <cite>#在文本框1内设定“Excel VBA”</cite>@        TextBox2.Text = \"Visual Basic for Applications\"@        <cite>##在文本框2内设定“Visual Basic for Applications”</cite>@    End Sub@    Private Sub ToggleButton1_Click()@    <cite>#按下切换按钮时的处理</cite>@        If ToggleButton1.Value Then@        <cite>#判定切换按钮的状态</cite>@             TextBox1.Enabled = False@             <cite>#TextBox1不可编辑</cite>@             TextBox2.Locked = True@             <cite>#TextBox2不可使用</cite>@        Else@             TextBox1.Enabled = True@             <cite>#TextBox1可以编辑</cite>@             TextBox2.Locked = False@             <cite>#TextBox2可以使用</cite>@        End If', '在这里，使用切换按钮变更各自文本框的状态。如果点击切换按钮，上面的文本框变得可编辑/不可编辑，下面的文本框变得可使用/不可使用。', '/images/zhiku/TipsNO419-001.png', '/images/zhiku/TipsNO419-002.png', '', '', '', '(改变文本框的状态)', '(文本框1不可编辑，文本框2不可使用)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('419', '420', '可以输入密码', 'PasswordChar属性', 'object.PasswordChar = str', 'Sub Sample420_1()@    Private Sub UserForm_Initialize()@    <cite>#初始化Userform</cite>@        TextBox1.PasswordChar = \"*\"@        <cite>#在文本框输入的字符串以“*”的形式表示</cite>@    End Sub@    Private Sub CommandButton1_Click()@        <cite>#单击命令按钮时的处理</cite>@        If TextBox1.Value = \"VBA\" Then@        <cite>#输入字符串的确认</cite>@             Unload Me@             <cite>#输入的字符串是“VBA”的情况，Userform关闭</cite>@        Else@             MsgBox \"密码不一致\" &amp; vbCrLf _@             &amp; \"请再输入\"@             <cite>#输入的字符串不是“VBA”的场合时表示的信息</cite>@    End Sub', '在这里，作为在文本框内输入密码时用。指定PasswordChar属性为“*”，输入的字符串全部用“*”表示。\n        单击命令按钮时比较字符串，和“VBA”相同的情况下关闭，不相同时提示信息。\n        另外，可以指定“*”以外的字符串作为PasswordChar属性。但是，因为一般用“*”或者“●”来表示密码的情况多，所以用用户更常见的字符来表示更好。', '/images/zhiku/TipsNO420-001.png', '/images/zhiku/TipsNO420-002.png', '', '', '', '(作为输入密码用的文本框)', '(用“*”来表示输入的字符串)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('420', '421', '在文本框里显示滚动条', 'ScrollBar属性', '使用ScrollBar属性，可以显示文本框中的滚动条。但是作为对象的文本框的MultiLine属性如果不是True，这个设定便无效。', 'Sub Sample421_1()@    Private Sub UserForm_Initialize()@    <cite>#初始化Userform</cite>@         TextBox1.MultiLine = True@         <cite>#文本框可以输入多行</cite>@         TextBox1.Text = \"Excel VBA\" &amp; vbLf _@         &amp; \"Visual Basic for Applications\"@         <cite>#在文本框设定字符串</cite>@    End Sub@    Private Sub ToggleButton1_Click()@    <cite>#单击切换按钮时的处理</cite>@        If ToggleButton1.Value Then@        <cite>#切换按钮是不是o的判定</cite>@             TextBox1.ScrollBars = fmScrollBarsVertical@             <cite>#在文本框设定垂直的滚动条</cite>@             ToggleButton1.Caption = \"不显示滚动条\"@             <cite>##变更切换按钮的文字</cite>@        Else@            TextBox1.ScrollBars = fmScrollBarsNone@            <cite>#解除文本框的滚动条</cite>@            ToggleButton1.Caption = \"显示滚动条\"@            <cite>#变更切换按钮的文字</cite>@        End If@    End Sub', '在这里，由于toggle button的开/关断在text box里(上)表示垂直滚动条要非表示。ScrollBars属性指定值，是下面的那样。\n        为了设定MultiLine属性是True并且无效，Userform初期化时就设定着。\n        另外，用这个例子最初点击切换按钮时，文本框滚动条不显示的情况下，在文本框里表示光标，请上下移动光标，滚动条表示。\n        \n            ▼\n            ScrollBar属性指定值\n            \n                \n                    参数\n                    说明\n                \n                \n                    fmScrollBarNone\n                    \n                        不显示滚动条（默认值）\n                    \n                \n                \n                    fmScrollBarHorizontal\n                    \n                        显示水平的滚动条\n                    \n                \n                \n                    fmScrollBarVertical\n                    \n                        显示垂直的滚动条\n                    \n                \n                \n                    fmScrollBarBoth\n                    \n                        显示水平和垂直的滚动条', '/images/zhiku/TipsNO421-001.png', '/images/zhiku/TipsNO421-002.png', '', '', '', '(在文本框显示滚动条)', '(在文本框显示了滚动条)', '2017-11-30 14:05:06', null, null, '[{\"title\":\"ScrollBar属性指定值\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"fmScrollBarNone\",\"不显示滚动条（默认值）\"],[\"fmScrollBarHorizontal\",\"显示水平的滚动条\"],[\"fmScrollBarVertical\",\"显示垂直的滚动条\"],[\"fmScrollBarBoth\",\"显示水平和垂直的滚动条\"]]}]');
INSERT INTO `t_tips` VALUES ('421', '422', '在文本框表示单元格的值', 'ControlSource属性', '利用ControlSource属性，能把单元格的数据指定到文本框。指定单元格的值变更，文本框的值也自动变化。', 'Sub Sample422_1()@    Private Sub CommandButton1_Click()@    <cite>#单击CommandButton1时的处理</cite>@        TextBox1.ControlSource = \"A1\"@        <cite>#在单元格A1设定文本框的程序</cite>@    End Sub@    Private Sub CommandButton2_Click()@    <cite>#单击CommandButton2时的处理</cite>@    MsgBox \"改变单元格A1的值\"@    <cite>#表示信息</cite>@    Range(\"A1\").Value = \"VBA\"@    <cite>#变更单元格A1的值为“VBA”</cite>@    End Sub', '使文本框和单元格相连，在文本框里显示单元格的值。在这，用A1单元格做链接。事先在A1单元格输入“Excel”的文字。Useform表示后，单击CommandButton1，文本框和单元格链接，单元格A1的值在文本框表示出来。\n        接下来，单击CommandButton2并且信息表示后，单元格A1的值变为“VBA”。这个时候文本框的值也自动更新。\n        另外，单击其他sheet页的情况下，「TextBox1.ControlSource = \"Sheet2!A1\"」的公式将在别的sheet页指定。不指定sheet页的情况下，将参照当前的单元格。', '/images/zhiku/TipsNO422-001.png', '/images/zhiku/TipsNO422-002.png', '', '', '', '(链接文本框和单元格)', '(设定文本框和单元格的值)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('422', '423', '全面涂抹文本框', 'BackColor属性', 'BackColor属性是指，设定文本框的背景色。使用16进制数或者RGB函数指定使用的颜色。', 'Sub Sample423_1()@    Private Sub ToggleButton1_Click()@    <cite>#单击切换按钮时的处理</cite>@        If ToggleButton1.Value Then@        <cite>#确定切换按钮的状态</cite>@            TextBox1.BackColor = RGB(255, 0, 0)@            <cite>#切换按钮是on时，设定文本框背景是红色</cite>@        Else@            TextBox1.BackColor = &amp;H80000005@            <cite>#切换按钮是off时，设定文本框颜色为默认值</cite>@            <cite>#设定“窗的背景颜色”</cite>@        End If@    End Sub', '设定文本框的背景色。背景色是指指定BackColor属性。在这里，切换按钮的on/off分别对应背景色红色和默认色。', '/images/zhiku/TipsNO423-001.png', '/images/zhiku/TipsNO423-002.png', '', '', '', '(设定文本框的背景色)', '(设定了文本框的背景色)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('423', '424', '只清除文本框的数据', 'TypeName函数', '通过TypeName函数、可以判断controler是不是文本框。要清除文本框，文本框的属性设定成vbNullString。', 'Sub Sample424_1()@    Private Sub CommandButton1_Click()@    <cite>#单击命令按钮时的处理</cite>@        Dim temp As Control@        For Each temp In Controls@        <cite>#处理所有的控制</cite>@            If TypeName(temp) = \"TextBox\" Then@            <cite>#判定是不是文本框</cite>@                temp.Value = vbNullString@            <cite>#不是文本框的场合，变为空白栏</cite>@            End If@        Next@    End Sub', '在Userform设置两个文本框和一个下拉框。另外，事先在“属性窗”设置好字符串。单击命令按钮的情况下，在controller里，只对文本框进行处理。清除文本框的值。', '/images/zhiku/TipsNO424-001.png', '/images/zhiku/TipsNO424-002.png', '', '', '', '(只清除文本框的值)', '(文本框的值被清除了)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('424', '425', '在下拉框追加增项目', 'AddItem方法的语法', '利用AddItem方法，能在下拉框中增加项目。用参数item增加项目，用参数varindex增加行。省略这些步骤时，将会自动在末尾添加项目。另外，下拉框的列表的编号从0开始。', 'Sub Sample425_1()@    Private Sub CommandButton1_Click()@    <cite>#单击命令按钮时的处理</cite>@        Dim tempData As Variant@        Dim temp As Variant@        tempData = Array(\"tennis\",\"baseball\",\"basketball\" _@            ,\"volleyball\",\"ski\",\"snowboard\")@            <cite>##设定添加项目的顺序</cite>@        For Each temp In tempData@        <cite>#处理排列内的顺序</cite>@            ComboBox1.AddItem temp@            <cite>#在下拉框添加排列的数据</cite>@        Next@        ComboBox1.ListRows = 3@        <cite>#设定在下拉框表示的行数</cite>@    End Sub', '在下拉框添加项目。为了添加多个项目，把所有的项目都放在一个数组里。在这之后，循环处理数组的数据并添加到下拉框中\n            另外，单击下拉按钮时，将显示的项目数通过ListRows属性设定成3个项目。', '/images/zhiku/TipsNO425-001.png', '/images/zhiku/TipsNO425-002.png', '', '', '', '(在下拉框添加项目)', '(在下拉框添加了项目)', '2017-11-30 14:05:06', null, null, '');
INSERT INTO `t_tips` VALUES ('425', '426', '指定下拉框的默认值', 'listIndex属性', '使用listIndex属性的话，可以指定下拉框的默认值。属性默认值是“-1”，表示没选择的状态。指定的号码，第一个项目是“0”，第二个项目是“1”。', 'Sub Sample426_1()@    Private Sub CommandButton1_Click()@    <cite>#单击命令按钮时的处理</cite>@        Dim tempData As Variant@        Dim temp As Variant@        tempData = Array(\"classic\",\"Jazz\" _@            ,\"fusion\",\"world music\")@            <cite>#排列加入组合框追加的项目</cite>@        For Each temp In TempData@        <cite>#依次处理排列的内容</cite>@            ComboBox1.AddItem temp　@        <cite>#在下拉框添加排列里的值</cite>\\@        Next@        ComboBox1.listIndex = 1@        <cite>#把号码2的值作为默认值</cite>@    End Sub', '设定下拉框项目期间，设定表示值为默认值。在这，单击命令按钮时，下拉框添加4个项目，最后设定第二号项目为默认值。', '/images/zhiku/TipsNO426-001.png', '/images/zhiku/TipsNO426-002.png', '', '', '', '(设定下拉框的默认值)', '(设定了下拉框的默认值)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('426', '427', '在下拉框表示多个项目值', 'listIndex属性', 'ColumnCount属性是指，指定下拉框列数的属性。在下拉框里被选择项目的哪个列来表示，是TextColumn属性指定。', 'Sub Sample427_1()@    Private Sub CommandButton1_Click()@    <cite>#单击命令按钮时的处理</cite>@        Dim TempData(0 to 1,0 to 1) As Variant@        Dim temp As Variant@        tempData(0,0) = \"Excel\"@        tempData(0,1) = \"Access\"@        tempData(1,0) = \"VBA\"@        tempData(1,1) = \"Macro\"@        <cite>#设定下拉框添加数据的数组</cite>@        With ComBoBox1@        <cite>#处理对应的下拉框</cite>@            .ColumnCount = 2@            <cite>#设定列数为2</cite>@            .ColumnWidths = \"50;50\"@            <cite>#设定列幅50</cite>@            .Column() = tempData@            <cite>#设定下拉框的数据</cite>@            .TextColumn = 2@            <cite>#在下拉框里1表示第2个项目的值</cite>@        End With@    End Sub', '在下拉框设定多列，并表示。设定值由Column属性设定。同时，在这里是ColumnWidths属性设定着队列幅度。\n        最后，在下拉框选择项目时，选择了项目的时候，指定TextColumn属性为2，将在下拉框表示两列', '/images/zhiku/TipsNO427-001.png', '/images/zhiku/TipsNO427-002.png', '', '', '', '(在下拉框设定多列)', '(表示了选择项目的两列的值)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('427', '428', '组合框不可直接输入', 'Style属性', '利用Style属性，可以在组合框内直接添加值。Style属性指定的值，请参照[详解]。', 'Sub Sample428_1()@    Private Sub CommandButton1_Click()@    <cite>#单击命令按钮时的处理</cite>@        Dim tempData As Variant@        Dim temp As Variant@        tempData = Array(\"古典音乐\",\"爵士\"_,\"混合音乐\",\"世界音乐\")@        <cite>#组合框设定的项目排列后插入</cite>@        For Each temp In tempData@            ComboBox1.AddItem temp@        <cite>#组合框项目设定</cite>@        Next@        ComboBox1.Style = fmStyleDropDownList@        <cite>#组合框设为不可以编辑</cite>@    End Sub', '点击命令按钮，组合框被设定的项目，不可以编辑。通常情况下的组合框，用户可以输入项目，可以使用Style属性设定不可以输入。或者，Style属性指定的值，如下面的那样。', '', '', '', '', '', '', '', '2017-11-30 14:05:07', null, null, '[{\"title\":\"Style属性的指定值\",\"heads\":[\"值\",\"说明\"],\"rows\":[[\"fmStyleDropDownCombo\",\"ComboBox的编辑区域的值可以输入，或者值可以从DropDownList选择（既定值）\"],[\"fmStyleDropDownList\",\"ComboBox作为List操作时，值一定要有从List中选择的\"]]}]');
INSERT INTO `t_tips` VALUES ('428', '429', 'ListBox中添加内容', 'AddItem方法', '使用AddItem方法，可以在ListBox内添加项目。在参数Item添加项目，参数varindex添加项目的所指定的行位置。如果省略的话，处追加项目的末尾处被追加。或者，ComboBox的List的第一个号码变为[0]。', 'Sub Sample429_1()@    Private Sub CommandButton1_Click()@    <cite>#单击命令按钮时的处理</cite>@        Dim tempData As Variant@        Dim temp As Variant@        tempData = Array(\"古典音乐\",\"爵士\"_@            ,\"混合音乐\",\"世界音乐\")@        <cite>#ComboBox设定的项目排列后插入</cite>@        For Each temp In tempData@        <cite>#队列的值按数序排列处理</cite>@            ListBox1.AddItem temp@        <cite>#队列内的值添加到ListBox中</cite>@        Next@    End Sub', '点击Command按钮时，在ListBox内追加项目。在这里，为了追加复数的项目，一次排列代入追加的项目。此后循环处理队列内的数据，依次添加到ListBox中。', '/images/zhiku/TipsNO429-001.png', '/images/zhiku/TipsNO429-002.png', '', '', '', '(ListBox中追加项目)', '(ListBox中项目被追加)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('429', '430', '设定单元格相应的值为ListBox的数据源', 'RowSource属性', '利用RowSource属性的话，就能够作为Listbox的项目设定worksheet的单元格范围值', 'Private Sub CommandButton1_Click()@            <cite>点击CommandButton时的处理</cite>@            ListBox1.RowSource = Range(\"A1:A5\").Address@            <cite>设定单元格相应的值为ListBox的数据源</cite>@        End Sub', '设定单元格范围值到Listbox的项目里。这样，点击CommandButton设定单元格A1~A5相应的值\n        \n             为ListBox的数据源。设定单元格范围值得时候，使用Address属性，指定单元格地址。', '/images/zhiku/TipsNO430-001.png', '/images/zhiku/TipsNO430-002.png', '设定其他worksheet的值', '设定其他worksheet的值的话，下记这样记述例如，设定[sheet1]worksheet单元格A1~A5相应的值为ListBox的数据源。设定的值为[sheet名！单元格范围Address]。', '', '', '', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('430', '431', 'ListBox的数据源复数表示', 'ColumnCount属性/TextColumn属性', 'ColumnCount属性就是指定Listbox的列数。被选择的项目具体表示在Listbox的那一列，是TextColumn 属性指定的。', 'Private Sub CommandButton1_Click()　　　　　　　　　　　　									<cite>点击CommandButton时的处理</cite>@            Dim tempData(0 To 1, 0 To 1) As Variant@            Dim temp As Variant@            tempData(0 ,  0) = \"Excel\"@            tempData(0 ,  1) = \"Access\"@            tempData(1 ,  0) = \"VBA\"@            tempData(1 ,  1) = \"Macro\"								<cite>设定追加数据的数组到Listbox内</cite>@            With  ComboBox1								<cite>对Listbox的设置</cite>@                .ColumnCount  =  2							<cite>设定2列</cite>@                .ColumnWidths  = \"50;50\"							<cite>各列列幅设为50point	</cite>@                .Column()  =  tempData							<cite>设定Listbox的数据</cite>@                .TextColumn  =  2							<cite>第二列的值表示在Listbox里</cite>@            End With@        End Sub', '设定，表示复数列的值到Listbox。设定的值是利用数组设定到Column属性里。\n            并且，利用ColumnWidths属性设定列的幅度。\n            最后，用ListBox选择项目时，第二列值能被表示那样指定TextColumn的属性为2。', '/images/zhiku/TipsNO431-001.png', '/images/zhiku/TipsNO431-002.png', '', '', '', '', '', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('431', '432', '确认项目值是否被选择了', 'ListIndex属性', 'ListIndex属性就是，获取当前被选择项目值的索引号。没选择的话就返回【-1】。需要注意的是，索引是从【0】开始采番的。', 'Private Sub UserForm_Initialize()　　　　　　　　　　		<cite>UserForm初期化时的处理		</cite>@            ListBox1.RowSource = \"A1:A5\"						<cite>设定单元格A1~A5的值为ListBox的数据源	</cite>@        End Sub@        Private Sub CommandButton1_Click()						<cite>点击CommandButton时的处理</cite>@            If　ListBox1.ListIndex =　-1　Then					<cite>判断ListBox里的值是否被选择了</cite>@                MsgBox　\"什么也没选择\"							<cite>什么也没有选择时的信息</cite>@            Else@                MsgBox　\"选择项目 : \" &amp; ListBox1.Text			<cite>被选择的场合，被选择的字符串表示</cite>@            End　If@        End Sub', '取得Listbox里选择的值。点击CommandButton，Listbox里什么都没有选择场合，\n                表示这个目的的信息，被选择的场合，利用Text属性，表示被选择项目值到信息框里。', '/images/zhiku/TipsNO432-001.png', '/images/zhiku/TipsNO432-002.png', '', '', '', '', '', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('432', '433', '选择被取得的项目值', 'List属性', '用Text属性能够取到的项目是第一列的值。在多列表示的Listbox里取得其他列的值得利用List属性。\n参数row指定行号，参数column指定列号。所有的号都是从零开始采番的。', 'Private Sub UserForm_Initialize()　　　　　　　　<cite>#UserForm初期化时的处理</cite>@            With ListBox1								<cite>对ListBox的处理</cite>@                .RowSource = Worksheets(\"sheet1\").Range(\"A1:B3\").Address@                设定Listbox的数据源为单元格A1～B3的值@                .ColumnWidths  = \"50;30\"				<cite>分别指定Listbox的列幅</cite>@                .ColumnCount  =  2						<cite>指定Listbox的列为2列</cite>@            End With@        End Sub@        Private Sub CommandButton1_Click()				<cite>点击CommandButton时的处理</cite>@            With ListBox1@                MsgBox　\"选择项目 : \" &amp; ｖｂCrLf _@                &amp; .List ( . ListIndex, 0) &amp; ｖｂCrLf _@                &amp; .List ( . ListIndex, 1)@            End　With			                        <cite>表示被选择的项目</cite>@        End Sub', '在这里，从表示2列数据的Listbox里，表示出被选择的项目到messagebox里。\n                Listbox里的任意数据选择后，点击CommandButton，被选择的项目被表示。\n                在这里，被选择项目的索引号（第几行）用ListIndex属性取得，列号用参数column指定。', '/images/zhiku/TipsNO433-001.png', '/images/zhiku/TipsNO433-002.png', '', '', '', '', '', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('433', '434', '选择复数个项目', 'MultiSelect属性', '利用MultiSelect属性，能选择复数个项目。被选择的项目是将Selected属性设定True。关于MultiSelect\n    属性的设定值请参照解说。', 'Private Sub UserForm_Initialize()					<cite># UserForm的初期化处理	</cite>@                        With ListBox1@                            .RowSource = Range(\"A1:A4\").Address@                             <cite># 将ListBox中的数据放到单元格A1~A4中</cite>@                            .MultiSelect = fmMultiSelectMulti			<cite># 可以选择复数个项目</cite>@                        End With@                    End Sub@                    Private Sub CommandButton1_Click()					<cite># 点击命令按钮时的处理</cite>@                        Dim str As String@                        Dim i As Long@                        With ListBox1@                             For i = 0 To 3				 <cite># 仅循环ListBox项目的个数	</cite>@                               If .Selected(i) Then					 <cite># 判定项目是否被选择</cite>@                                str = str &amp; .List(i, 0) &amp; vbCrLf@                                 <cite># 取得被选择的项目	</cite>@                               End If@                             Next@                             MsgBox \"选择的项目：\" &amp; vbCrLf &amp; str@                              <cite># 将被选择的项目在信息框中表示	</cite>@                        End With@                    End Sub', '在这里，能选择ListBox中的复数个项目。因为被选择项目的Selected属性是True，所以能取到选择的\n    项目。此外，MultiSelect属性的设定值参照下面。', '/images/zhiku/TipsNO434-001.png', '/images/zhiku/TipsNO434-002.png', '', '', '', '(能选择的项目)', '(表示被选择的项目)', '2017-11-30 14:05:07', null, null, '[{\"title\":\"AutoFill方法的参数\",\"heads\":[\"常数\",\"说明\"],\"rows\":[[\"fmMultiSelectSingle\",\"只能选择一个项目（默认值）。\"],[\"fmMultiSelectMulti\",\"按空格键或者在已选择的项目上点击，解除选择状态。\"],[\"fmMultiSelectExtended\",\"边按Shift键边点击或边按Shift键边按方向的任何一个键，从前\\n                    一个选择的项目到现在选择的项目都作为所选项。边按Ctr键边点击，将所选择的项目解除选择状态。\"]]}]');
INSERT INTO `t_tips` VALUES ('434', '435', '从ListBox中删除被选择项目', 'RemoveItem方法', 'RemoveItem方法是从ListBox中删除参数index指定的索引号的项目。', 'Private Sub UserForm_Initialize()						<cite># UserForm的初期化处理</cite>@                        Dim temp As Variant@                        Dim i As Long@                        temp = Range(\"A1:A4\").Value							<cite># 将单元格A1~A4的值赋给变量</cite>@                        With ListBox1				 <cite># 对于ListBox的处理</cite>@                             For i = 0 To Ubound(Temp)						<cite> # 循环数组的要素数</cite>@                               .AddItem temp(i , 1)						 <cite># 将项目设定到ListBox中</cite>@                             Next@                             .MultiSelect = fmMultiSelectMulti@                             <cite># 可以选择多个ListBox的项目</cite>@                        End With@                    End Sub@                    Private Sub CommandButton1_Click()@                        Dim i As Long@                        For I = ListBox1.ListCount - 1 To Step -1@                         <cite># 循环ListBox项目的个数</cite>@                           If ListBox1.Selected(i) Then						<cite># 判断项目是否被选择</cite>@                            str = str &amp; .List(i, 0) &amp; vbCrLf				<cite># 删除被选择的项目</cite>@                           End If@                        Next@                    End Sub', '从ListBox中删除指定的项目。在这里，ListBox的项目可以选择多个，点击命令按钮时，删除所有被选择\n    的项目。ListBox的项目数是用ListCount属性取得的。此外，因为被选择的项目的Selected属性是True，\n    所以使用If语句进行判断。\n	如果删除项目，项目的索引号会自动连续。因此，确认要从ListBox最后的项目倒序循环。', '', '', '', '', '', '', '', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('435', '436', '表示form上的图像', 'Picture属性', '利用Picture属性，能够在form上的Image控件中表示出图像，用LoadPicture函数指定表示的画像。', 'Sub  Sample436()@                        Private Sub CommandButton1_Click()@                        <cite>#点击命令按钮时的处理</cite>@                            Image1.Picture = _@                                       LoadPicture(ThisWorkbook.Path &amp; \"\\image.jpg\")@                        <cite>#在图像控件中表示图像</cite>@                   End Sub', '点击命令按钮时，读入例子文件和同一文件夹内拥有的图像，并将图片显示在图像控件内。\n而且，图像控件在属性窗口中要将PictureSizeMode设定为【fmPictureSizeModeZoom】\n这样做可以在合适的图像控件尺寸中表示图像。', '/images/zhiku/TipsNO436-001.png', '/images/zhiku/TipsNO436-002.png', '', '', '', '(在图像控件中表示图像)', '(图像被表示出来)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('436', '437', '设定标签的字体', 'Size属性/Bold属性', '设定标签的字体要使用Font对象。将介绍用Size属性设置字体的大小，用Bold属性设置字体的粗体。\n其他的能够使用italic属性（斜体）和UnderLine属性（下划线）等属性来设置。', 'Private Sub CommandButton1_Click()@                    <cite>#点击命令按钮时的处理</cite>@                        Dim temp As Control@                        For Each temp In Controls       <cite>#对所有的控件做处理</cite>@                            If TypeName(temp) = \"Label\" Then      <cite>#判断是不是标签</cite>@                            　　　　　temp.Font.Bold = True      <cite>#设定字体为粗体</cite>@                                    temp.Font.Size = 12       <cite>#设定字体大小为12	</cite>@                            End If@                        Next@                    End Sub', '点击命令按钮时，变更UserForm上的所有标签的字体。循环所有的控件，用TypeName函数判断\n是不是标签，如果是标签的场合，字体设置为粗体，字号设置为12号。', '/images/zhiku/TipsNO437-001.png', '/images/zhiku/TipsNO437-002.png', '', '', '', '(设定所有标签的字体)', '(标签的字体被变更)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('437', '438', '取得/设定选择框/选择按钮的状态', 'Value属性', 'Value属性能取得/设定选择框或选择按钮的on/off状态。On时Value属性状态是True。Off时Value\n    属性状态是False。', 'Private Sub CommandButton1_Click()@                         <cite>点击命令按钮时的处理</cite>@                             MsgBox \"选择框的状态：\" &amp;  CheckBox1.Value &amp; vbCrLf _@                                &amp; \"选择按钮的状态：\" &amp; OptionButton1.Value@                             <cite># 将分别取得选择框和选择按钮的状态在信息框中表示</cite>@                    End Sub', '点击命令按钮时，将取得UserForm上的选择框和选择按钮的状态在信息框中表示。', '/images/zhiku/TipsNO438-001.png', '/images/zhiku/TipsNO438-002.png', '', '', '', '(选择选择框和选择按钮的状态)', '(表示信息)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('438', '439', '控制按钮的表示/非表示', 'Visible属性', 'Visible属性、取得指定了的控制的表示/非表示的设定。设定为True为表示，\n   设定为False为非表示。', 'Private Sub UserForm_Initialize()						<cite>用户的初始化时的处理</cite>@                        CheckBox1.Value = True					<cite>把复选框确定</cite>@                    End Sub@                    Private Sub CheckBox1_Change()						<cite>点击执行按钮的时候进行处理</cite>@                        If CheckBox1_change()					<cite>复选框是否为开进行判断</cite>@                            CommandButton1.Visible = True@                            <cite>复选框是开的情况。执行按钮表示</cite>@                        Else@                            CommandButton1.Visible = False@                            <cite>复选框是开的情况。执行按钮非表示</cite>@                        End If@                    End Sub', '这里是，利用复选框的Change事件，复选框的开/关和控制按钮的表示与非表示的替换。\n	另外，表示用户表单的时候复选框为开，之后在把它进行处理调整。', '/images/zhiku/TipsNO439-001.png', '/images/zhiku/TipsNO439-002.png', '', '', '', '(控制按钮的表示/非表示)', '(控制按钮变成了非表示)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('439', '440', '分组化选择按钮', 'GroupName属性', '利用GroupName的属性，能对选择按钮进行分组化。被分组之后的选择按钮，只能选中1个按钮。\n而且，一个按钮选中的时候，其他的按钮则自动的关掉。', 'Sub Sample440()@                        Private Sub CommandButton1_Click()@                            <cite>#单击命令按钮时候的处理	</cite>@                        OptionButton1.GroupName = \"GroupA\"@                            <cite>#设置OptionButton1的Group的名为【RroupA】</cite>@                        #OptionButton2.GroupName = \"GroupA\"@                            <cite>#设置OptionButton2的Group的名为【RroupA】</cite>@                        #OptionButton3.GroupName = \"GroupB\"@                            <cite>#设置OptionButton3的Group的名为【RroupB】</cite>@                        #OptionButton4.GroupName = \"GroupB\"@                            <cite>#设置OptionButton4的Group的名为【RroupB】</cite>@                    End Sub', '在这里，单机命令按钮，把用户表格上的选择按钮分成两个小组。把OptionButton的1和2做为「GroupA」\n的小组，把OptionButton的3和4做为「GroupB」的小组。', '/images/zhiku/TipsNO440-001.png', '/images/zhiku/TipsNO440-002.png', '', '', '', '(四个选择按钮，分成两个组)', '(分成的两个组，分别能选择一个各自的选择按钮)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('440', '441', '追加TabStrip/MultiPage页', 'Add方法', 'Add方法是追加TabStrip控制页和MultiPage控制页。总之，UserForm上的数据分组放在几个页面上。TabStrip与放在控制页相同，MultiPage与每个页的数据不同。', 'Private  Sub  CommandButton1_Click()@        <cite> #  点击CommandButton的时候处理</cite>@　　　　     TabStrip1.Tabs.Add     <cite>  # 追加一个TabStrip标签</cite>@    End  Sub', '追加TabStrip标签。点击CommandButton，TabStrip页就会追加。', '/images/zhiku/TipsNO441-001.png', '/images/zhiku/TipsNO441-002.png', '', '', '', '(追加标签)', '(追加标签之后)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('441', '442', 'TabStrip被选择取得tab', 'SelectedItem 属性', 'SelectedItem 属性是获得被选择的TabStrip。组合Caption的属性，能取得tab的Caption。', 'Private  Sub  CommandButton1_Click()@         <cite>#点击CommandButton时的处理</cite>@         MsgBox \"被点中的tab是 \" &amp; _@        TabStrip1.SelectedItem.Caption  &amp; \"。\"@        <cite> #表示被选择的tab的Caption</cite>@        End Sub', '表示点击CommandButton和选择的tab的Caption。', '/images/zhiku/TipsNO442-001.png', '/images/zhiku/TipsNO442-002.png', '选择tab进行操作', '这里是，仅表示Caption，设置Caption也可能。下次的样本是，被选择的Caption值为\n            [Hint]。\n            Private  Sub  CommandButton1_Click()\n               TabStrip1.SelectedItem.Caption _\n            =\"\"Hint\"\"\n            End  Sub\"', '', '(获得被选择的tab)', '(表示被选择的tab的Caption)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('442', '443', '设定滚动条的最大值·最小值', 'Max属性/Min属性', 'Max属性是设置滚动条的最大值，Min属性是设置滚动条的最小值。', 'Private  Sub  UserForm_Initialize()　　<cite>   # 用户表的初始化处理</cite>@　　　　With   ScrollBar1        <cite>  # 关于滚动条的处理</cite>@　　　　　　　.Min  =  18    <cite>   #　最小值设置为18</cite>@　　　　　　　.Max =  80     <cite>  #　最大值设置为80</cite>@　　　　End  With@　　　　TextBox1.Value = ScrollBar1.Value@　　　<cite>　#  将滚动条的值赋予文本框/<cite></cite></cite>@    End  Sub@    Private  Sub  ScrollBar1_Change()  <cite>     # 滚动条变化时的处理</cite>@　　　　TextBox1.Value = ScrollBar1.Value@　　　<cite>　#  将滚动条的值赋予文本框</cite>@    End  Sub@    Private  Sub  TextBox1_Change()    <cite>   # 文本框的值变化的时候得处理</cite>@　　　　　On  Error  Resume  Next   <cite>    # エラー処理</cite>@　　　　　ScrollBar1.Value  =  TextBox1.Value@　　　<cite>　　# 文本框的值赋予滚动条</cite>@    End Sub@', '设置滚动条的最大值和最小值。并且，用文本框表示滚动条的值。这个时候，滚动条的Change事件，滚动条的值改变的时候，文本框的值立刻反映出来。\n     还有文本框的值是变量的时候，使用文本框的Change事件，文本框的值反映在滚动条中，但是文本框内的值在滚动条最大值和最小值的范围外，输入原本数值以外的值得时候，使用滚动条的时候会出现On  Error  Resume  Next ， 如果发生错误，只需无视即可。', '', '', '', '', '', '', '', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('443', '444', '使旋转按钮和文本框联动', 'Value属性', 'Value属性是用来取得或者设定旋转按钮的值。使用Value属性，能够做到使文本框和旋转按钮的值联动起来。', 'Private Sub UserForm_Initialize()<cite>#UserForm的初始化处理</cite>@         With SpinButton1     <cite> #对旋转按钮做处理</cite>@            .Min = 18       <cite>   #设定最小值为18</cite>@            .Max = 80       <cite>   #设定最小值为18</cite>@        End With@    TextBox1.Value = SpinButton1.Value@    <cite>   #将旋转按钮的值赋值给文本框的值</cite>@        End Sub@        Private Sub SpinButton1_Change ()<cite>#滚动条变化时的处理</cite>@    TextBox1.Value = SpinButton1.Value@    <cite> #将旋转按钮的值赋值给文本框的值</cite>@      End Sub@     Private Sub TextBox1_Change ()<cite>#文本框变化时的处理</cite>@           On Error Resume Next  <cite>  #错误处理</cite>@           SpinButton1.Value = TextBox1.Value@        <cite>   #将文本框的值赋值给旋转按钮的值</cite>@            End Sub', '在这里，设定旋转按钮的最大值和最小值。在文本框里表示出旋转按钮的值。此时，滚动条的Change\n事件中旋转按钮的值变更的场合，直接将值反映到文本框中。\n       而且，文本框的值变更的场合，使用文本框的Change事件，将文本框的值反映到旋转按钮中去，但是，文本框内的值在旋转按钮的值范围以外时，为了让原本数值以外的值被入力，会使用Error Resume Next进行错误处理，无视错误发生的场合。', '', '', '', '', '', '', '', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('444', '445', '在worksheet上使用控制', 'ActiveX控制', '使用ActiveX控制，能在worksheet上使用测试Box等控制。使用ActiveX控制开始插入[开发]标记。', 'Dim  curRow  As Long   <cite>#参照行号声明行变量</cite>@       Private  Sub  CommandButton1_Click()@        <cite> #点击CommandButton时#处理</cite>@          curRow = 1 <cite>  #设置行号值为1</cite>@          With  Worksheets(\"Sheet1\")@               .ScrollBar1.Min = 1  <cite> #设置ScrollBar的最小值</cite>@               .ScrollBar1.Max= 4 <cite>  #设置ScrollBar的最大值</cite>@           End With@        SmpScrollBar <cite>  #调用SmpScrollBar程序</cite>@          End  Sub@    Private Sub ScrollBar1_Change()@      <cite> #ScrollBar发生变化时的处理</cite>@        curRow = ScrollBar1.Value  <cite>  #设置变量ScrollBar的值</cite>@        SmpScrollBar <cite>  #调用SmpScrollBar程序</cite>@        End  Sub@     Sub  SmpScrollBar()@       <cite> #SmpScrollBar的值和对应的单元格的值改变的程序</cite>@        Range(\"D1\").Value = Range(\"A\" &amp;  curRow).Value@       <cite> #A列的值参照ScrollBar的值(变量的值)对应的单元格D1的值</cite>@        End Sub', '配置和处理worksheet上的控制的行为。这里是，使用ActiveX控制。\n        点击CommandButton之后，设置ScrollBar的最大值和最小值，将ScrollBar的值代入给变量。通过变量的值，改变ScrollBar的值和单元格D1的值。ScrollBar发生变化时使用change事件进行处理。\n   将ScrollBar的值代入给变量，调用程序改变单元格D1的值。\n   SmpScrollBar程序是，单元格D1使用变量的值输入A列的值。', '', '', '', '', '', '', '', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('445', '446', '执行印刷', 'PrintOut方法', 'PrintOut方法，指定了印刷的worksheet和图片等。关于指定的引数请参照【详解】。', 'Sub Sample446()@           Worksheets(\"Sheet1\").PrintOut Copies:=2  <cite> #打印2份Sheet1</cite>@     End Sub', '印刷2次「Sheet1」worksheet页。以下是PrintOut方法的参数。', '/images/zhiku/TipsNO446-001.png', '/images/zhiku/TipsNO446-002.png', '', '', '', '(印刷worksheet)', '(印刷完成（打印预览模式）)', '2017-11-30 14:05:07', null, null, '[{\"title\":\"PrintOut方法的参数\",\"heads\":[\"值\",\"说明\"],\"rows\":[[\"From\",\"打印的开始页号。如果省略此参数，则从起始位置开始打印。\"],[\"To\",\"打印的终止页号。如果省略此参数，则打印至最后一页。\"],[\"Copoes\",\"打印份数。如果省略此参数，则只打印一份。\"],[\"Preview\",\"如果为True，将在打印之前调用打印预览。\"],[\"ActiePrinter\",\"使用打印机的名称。\"],[\"PrintToFile\",\"打印文件。\"],[\"Collate\",\"如果为True，则逐份打印副本。\"],[\"PrToFileName\",\"如果PrintToFile为True，则指定要打印到文件的文件名。\"],[\"IgnorePrintAreas\",\"如果为True，则忽略打印区域并打印整个对象。\"]]}]');
INSERT INTO `t_tips` VALUES ('446', '447', '打印预览', 'PrintPrewview方法', 'PrintPreview方法，表示为打印预览。参数EnableChanges，是用户指定打印预览模式时，设定其他空余部分和page是否能够变更。', 'Sub Sample447()@            Worksheets(\"Sheet1\").PrintPreview EnableChanges:=False@           <cite> #打印预览Sheet1worksheet</cite>@          <cite>  #这时的印刷设定变更为不可改变</cite>@         End　Sub', '【Sheet1】worksheet执行打印预览。指定了参数EnableChanges为False，印刷设定为不可变更。', '/images/zhiku/TipsNO447-001.png', '/images/zhiku/TipsNO447-002.png', '用PrintOut方法进行印刷预览', '指定PrintOut方法的参数Preview为True时，\n 变更为打印预览模式。', '', '(打印预览)', '(打印预览模式)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('447', '448', 'ActivePrinter转换', 'ActivePrinter属性', '利用ActivePrinter属性，现在可以取得和设定活动的打印机名称。', 'Sub Sample448()@           MsgBox \"现在使用的打印机名称：\"　_@           &amp;  Application.ActivePrinter@           <cite>  #表示活动的打印机的名称</cite>@         End　Sub', '在MsgBox中表示现在使用的打印机的名称。', '/images/zhiku/TipsNO448-001.png', '/images/zhiku/TipsNO448-002.png', '其他的利用方法', 'ActiePrinter属性，能够设定值。总之，印刷前印刷机是能够转换的。但是，这个时候印刷机名必须正确。\n        获取ActiePrinter的名时，最好使用【立即窗口】。VBE中【视图】菜单→【立即窗口】【立即窗口】打开，输入【?application.activeprinter】\n然后按下【Enter】键，现在使用的打印机的名称就会表示出来。', '', '(表示现在使用的打印机的名称\n                    )', '(表示现在使用的打印机的名称\n                    )', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('448', '449', '纸张大小和印刷的横纵向变换', 'PaperSize属性/Orientation属性', 'PaperSize属性是设定纸张的大小，Orientation属性是设定印刷的横纵方向。PaperSize属性/Orientation属性的值请参照【详解】', 'Sub Sample449()@              With　Worksheets(\"Sheet1\")    <cite>    #对Sheet1进行处理</cite>@              .PageSetup.Orientation = xlPortrait@           <cite>    #印刷的方向设定为纵向</cite>@              .PageSetup.PaperSize = xlPaperB5@           <cite>    #纸张的大小设定为B5</cite>@              .PrintPreview             <cite>   #打印预览模式</cite>@              End With@     End Sub', '设定印刷的横纵向和纸张的大小。这里，印刷的横纵向设定为纵向，纸张的大小设定为B5，之后进入打印预览模式。\n\n            下边是PaperSize属性/Orientation属性的定数。', '', '', '', '', '', '', '', '2017-11-30 14:05:07', null, null, '[{\"title\":\"PaperSize属性主要的xlPapeSize Class定数\",\"heads\":[\"定数\",\"说明\"],\"rows\":[[\"xｌPaperA4\",\"A4(210mm x 297mm)\"],[\"xｌPaperA5\",\"A5(148mm x 210mm)\"],[\"xｌPaperA3\",\"A3(297mm x 420mm)\"],[\"xｌPaperB5\",\"B5(182mm x 257mm)\"],[\"xｌPaperB4\",\"B4(250mm x 354mm)\"]]},{\"title\":\"Orientation主要的 xlPageOrientation Class定数\",\"heads\":[\"定数\",\"说明\"],\"rows\":[[\"xLandscape\",\"横向\"],[\"xｌPortrait\",\"纵向\"]]}]');
INSERT INTO `t_tips` VALUES ('449', '450', '印刷前确认打印页数', 'HPageBreaks属性/VPageBreaks属性', 'HPageBreaks属性，更改横向页数的总数。VPageBreaks属性，更改纵向页数的总数。总页数为横向的页数加1，纵向页数加1之后相乘。', 'Sub Sample450()@              With　Worksheets(\"Sheet1\")     <cite>  #对Sheet1进行处理</cite>@               MsgBox \"总页数: \" &amp;  (.HPageBreaks.Count + 1 ) _@               * (.VPageBreaks.Count + 1) <cite> #在MsgBox里表示总页数</cite>@            End With@            End　Sub', '在MsgBox中表示 worksheet【Sheet1】印刷时的总数。获取横纵向的总页数，之后相乘求的结果。', '/images/zhiku/TipsNO450-001.png', '/images/zhiku/TipsNO450-002.png', '其他的方法', '获取印刷时的总页数，还有下边的方法。下面这个例子，进行pagepreview后，使用Excel 4.0的宏指令就可以获取的总页数。\n            Sub Sample450_1() \n            ActiveWindow.View = _ \n            xlPageBreakPreview \n            MsgBox \"总页数 : \" _ \n            & ExecuteExce14Macro _ \n            (\"GET.DOCUMENT(50,\"\"Sheet1\"\"\")\") \n            End Sub', '', '(印刷时的总页数\n\n                    )', '(表示印刷时的总页数\n\n                    )', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('450', '451', '指定页的印刷范围', 'FitToPagesTall属性/FitToPagesWide属性', '利用FitToPagesTall属性(纵向)，FitToPagesWide属性(横向)，可以指定印刷的范围。如果，Zoom属性设定称Ture时，上面俩个属性就会无效。', 'Sub Sample451()@            With　Worksheets(\"Sheet1\")           <cite>#对Sheet1进行处理</cite>@                .pageSetup.Zoom = False          <cite>#Zoom表示设定是否有效</cite>@                .PageSetup.FitToPagesTall = 1　　 <cite>#设定纵向为1高度</cite>@                .PageSetup.FitToPagesWide = 1　　 <cite>#设定横向为1宽度</cite>@                .PrintPreview                     <cite>#打印预览模式	</cite>@            End With@        End　Sub', '设置【Sheet1】worksheet印刷范围为横纵高度和宽度为1，之后表示为打印预览模式。', '/images/zhiku/TipsNO451-001.png', '/images/zhiku/TipsNO451-002.png', '', '', '', '(横纵度为1)', '(设定为1时打印预览模式)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('451', '452', '设置打印时空白单位', 'CentimetersTopoints方法', '利用CentimetersTopoints方法，可以将厘米单位和point(1point=0.35mm)单位之间进行转换。组合使用TopMargin属性和BottomMargin属性，可以设置打印时空白区域。', 'Sub Sample452()@            With　Worksheets(\"Sheet1\")                        <cite>#对Sheet1进行处理</cite>@                .PageSetup.TopMargin _@                    = Application.CentimetersToPoints(3)      <cite>#设定距上边框3cm</cite>@                .PageSetup.BottomMargin  _@                     =Application.CentimetersToPoints(3)      <cite>#设定距下边框3cm</cite>@                .PrintPreview                                 <cite>#打印预览模式</cite>@            End With@        End　Sub', '以厘米为单位，进行设定空白区域。设定距上边框和下边框分别为3cm。通常，设定空白区域是以point为单位，但是CentimetersToPoints方法能够指定厘米为单位。', '/images/zhiku/TipsNO452-001.png', '/images/zhiku/TipsNO452-002.png', '左右空白的设定', '左右的空白，可以利用LeftMargin属性\n            （左空白），和RightMargin属性（右空白）进行 \n            设定。', '', '(以厘米为单位设定上下的空白距离)', '(上下空白设定完成)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('452', '453', '设定中间为印刷位置', 'CenterHorizontally属性/CenterVertically属性', '水平(CenterHorizontally属性)和垂直(CenterVertically属性)能够配置印刷对象在印刷时的位置。在印刷时能够达到最好的效果。', 'Sub Sample453()@            With　Worksheets(\"Sheet1\")               <cite>#对Sheet1进行操作</cite>@                .pageSetup.CenterHorizontally = True <cite>#配置水平方向为中间位置</cite>@                .pageSetup.CenterVertically = True   <cite>#配置垂直方向为中间位置</cite>@                .PrintPreview                        <cite>#打印预览模式</cite>@            End With@        End　Sub', '设置【Sheet1】worksheet印刷时印刷内容在打印纸的中间位置，之后表示为打印预览模式。', '/images/zhiku/TipsNO453-001.png', '/images/zhiku/TipsNO453-002.png', '', '', '', '(设定印刷的时候的配置)', '(设定水平和垂直方向为中间)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('453', '454', '指定页的印刷范围', 'LeftHeader属性/CenterHeader属性/RightHeader属性', '利用左页眉(LeftHeader属性),中间页眉(CenterHeader属性),右页眉(RightHeader属性),可以设定页眉的信息。设定的详细内容请参照【详解】', 'Sub Sample454()@            With　Worksheets(\"Sheet1\")              <cite>#对Sheet1进行操作</cite>@                .pageSetup.LeftHeader = \"&amp;D\"        <cite>#将左页眉内容设置成日期</cite>@                .PageSetup.CenterHeader　= \"&amp;F\"     <cite>#将中间页眉内容设置称文件名</cite>@                .PageSetup.RightHeader　= \"&amp;A\"      <cite>#将右页眉设置成Sheet页名</cite>@                .PrintPreview                       <cite>#打印预览模式</cite>@            End With@        End　Sub', '分别对页眉的左页眉，中间页眉，右页眉的内容进行设定。设定的值也可以是字符串以外的值，下面是页眉和页脚的设定值（页眉和页脚的设定值是共通的）。', '/images/zhiku/TipsNO454-001.png', '/images/zhiku/TipsNO454-002.png', '', '', '', '(设置页眉)', '(页眉设置完成)', '2017-11-30 14:05:07', null, null, '[{\"title\":\"页眉和页脚的设定值\",\"heads\":[\"CODE\",\"说明\"],\"rows\":[[\"&L\",\"字符串左对齐\"],[\"&C\",\"字符串中间对齐\"],[\"&R\",\"字符串右对齐\"],[\"&E\",\"印刷时在字符串下添加双实线\"],[\"&X\",\"印刷时文字向上对齐\"],[\"&Y\",\"印刷时文字向下对齐\"],[\"&B\",\"印刷时以黑体印刷字符串\"],[\"&I\",\"印刷时以斜体印刷字符串\"],[\"&U\",\"印刷时在字符串下添加下划线\"],[\"&S\",\"印刷时取消字符串的下划线\"],[\"&\\\"フォント名\\\"\",\"印刷时指定文字的字体\"],[\"&nn\",\"印刷是指定文字字体的大小。nn是指定point数为2位的数值。\"],[\"&Color\",\"指定印刷时文字的颜色。指定16进制的颜色的值。\"],[\"&\\\"+\\\"\",\"印刷现在的Sheet页的【主题】（Excel2007以后版本）\"],[\"&\\\"-\\\"\",\"印刷现在的Sheet页的【文本】（Excel2007以后版本）\"],[\"&KxxSyyy\",\"用指定颜色印刷现在Sheet页的文字。xx：指定2位的数值（1~12）的颜色。Syyy：指定颜色的深浅（从深到浅）。（Excel2007以后版本）\"],[\"&D\",\"印刷现在的日期\"],[\"&T\",\"印刷现在的时刻\"],[\"&F\",\"印刷文件名\"],[\"&A\",\"印刷Sheet页名\"],[\"&P\",\"印刷页码\"],[\"&P+<数值>\",\"印刷时页码数为页码数+<数值>\"],[\"&P-<数值>\",\"印刷时页码数为页码数-<数值>\"],[\"&&\",\"印刷符号（&）\"],[\"&N\",\"印刷文件所有的页数\"],[\"&Z\",\"印刷文件路径\"],[\"&G\",\"插入信息\"]]}]');
INSERT INTO `t_tips` VALUES ('454', '455', '设置页脚', 'LeftFooter属性/CenterFooter属性/RightFooter属性', '使用左页脚(LeftFooter属性)、中央页脚(CenterFooter属性)、右页脚(RightFooter属性)可以对页脚信息进行设定。', 'Sub Sample455()@            With　Worksheets(\"Sheet1\")@                .pageSetup.LeftFooter = \"&amp;USheet1\"		 <cite>#左页脚设置为Sheet1，并且加下划线</cite>@                .PageSetup.CenterFooter　= \"&amp;P/&amp;N\"	     <cite>#中间页脚设置为页数和总页数	</cite>@                .PageSetup.RightFooter　= \"印刷時刻 : &amp;T\" <cite>#右页脚设置为时间		</cite>@                .PrintPreview                            <cite>#打印预览模式</cite>@            End With@        End　Sub', '分别对左页脚、中间页脚、右页脚进行相应的操作。设定的值也可以是其他的值，详细请参照【Tips454】', '/images/zhiku/TipsNO455-001.png', '/images/zhiku/TipsNO455-002.png', '', '', '', '(设置页脚)', '(页脚设置完成)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('455', '456', '在页眉/页脚表示图片', 'LeftHeaderPicture属性', 'LeftHeaderPicture属性是在页眉表示图片的属性。表示图片文件需要指定文件路径。', 'Sub Sample456()@            With　Worksheets(\"Sheet1\")                      <cite>#对Sheet1进行操作	</cite>@                .pageSetup.LeftHeader = \"&amp;G\"                <cite>#在左页眉配置图片	</cite>@                .PageSetup.LeftHeaderPicture.Filename　= _@                    ThisWorkbook.Path &amp; \"\\Image1.jpg\"		<cite>#指定表示的图片文件	</cite>@                .PrintPreview                               <cite>#打印预览模式		</cite>@            End With@        End　Sub', '设定左页眉表示指定的图片文件。使用以下的属性可以在页眉/页脚各个位置表示图片。', '/images/zhiku/TipsNO456-001.png', '/images/zhiku/TipsNO456-002.png', '', '', '', '(在左页眉配置图片)', '(图片设置完成)', '2017-11-30 14:05:07', null, null, '[{\"title\":\"图片表示在页眉/页脚各个位置的属性\",\"heads\":[\"定数\",\"内容\"],\"rows\":[[\"CenterHeaderPicture\",\"中间页眉\"],[\"RightHeaderPicture\",\"右页眉\"],[\"LeftFooterPicture\",\"左页脚\"],[\"CenterFooterPicture\",\"中间页脚\"],[\"RightFooterPicture\",\"右页脚\"]]}]');
INSERT INTO `t_tips` VALUES ('456', '457', '设定顶端标记行和左端标记列', 'PrintTitleRows属性/PrintTitleColumns属性', '利用PrintTitleRows属性和PrintTitleColumns属性可以设定顶端标记行和左端标记列。因为必定印刷指定的行列个各页，所以印刷大的表时非常方便。', 'Sub Sample457()@            With　Worksheets(\"Sheet1\")       <cite>#对Sheet1进行操作		</cite>@                .pageSetup.PrintTitleRows = .Rows(1).Address	 <cite>#设定1行为顶端标记行		</cite>@                .pageSetup.PrintTitleColumns = .Columns(\"A\").Address	 <cite>#设定A列为左端标记列	</cite>@                .PrintPreview      <cite>#打印预览模式			</cite>@            End With@        End　Sub', '设定行列各自的标记。这里指定了1行为行标记，A列为列标记。使用了Rows属性（行），Columns属性（列）指定了行列的值。最后印刷预览进行确认。', '/images/zhiku/TipsNO457-001.png', '/images/zhiku/TipsNO457-002.png', '', '', '', '(设定印刷是行列标记)', '(印刷标记设定完成)', '2017-11-30 14:05:07', null, null, '');
INSERT INTO `t_tips` VALUES ('457', '458', '进行黑白印刷', 'BlackAndWhite属性', 'BlackAndWhite属性为True的时候，进行黑白印刷。利用这个方法彩色打印机也可以进行黑白印刷。', 'Sub Sample458()@            With　Worksheets(\"Sheet1\")                <cite>#对Sheet1进行处理	</cite>@                .pageSetup.BlackAndWhite = True       <cite>#设置黑白印刷有效	</cite>@                .PrintPreview                         <cite>#进行印刷预览</cite>@            End With@        End　Sub', '对【Sheet1】worksheet进行黑白印刷。最后进入打印预览模式确认。', '/images/zhiku/TipsNO458-001.png', '/images/zhiku/TipsNO458-002.png', '黑白印刷和灰度等级', '在这里，介绍了黑白印刷的设定方法。\n            但是黑白印刷实际上并不能详细看清，在颜\n            色分辨不清的情况下，进行灰度等级印刷就\n            好了。灰度印刷由打印机进行设定。', '', '(设定为黑白印刷)', '(黑白印刷设定完成)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('458', '459', '单一对象印刷', 'PrintOut方法', '指定印刷对象，使用PrintOut方法，只印刷指定对象。', 'Sub Sample459()@            Worksheets(\"Sheet1\").ChartObjects(1).Chart _@                .PrintOut  Preview : = True		 <cite>#把Sheet1工作单的图表做为印刷对象，之后进入打印预览模式</cite>@        End　Sub', '在这里，把「Sheet1」Worksheet上的图表做为印刷对象。把图表做为PrintOut方法指定的对象。\n                因为要进行确认，把PrintOut方法的参数PrintPrevuew做为True，进入打印预览模式（实际上并没有\n                            进行印刷。如果要进行印刷，将Preview的参数设定为False）。', '/images/zhiku/TipsNO459-001.png', '/images/zhiku/TipsNO459-002.png', '', '', '', '(指定印刷的对象)', '(印刷图表)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('459', '460', '设定印刷范围', 'PrintArea属性', '利用PrintArea属性，能设定印刷范围。用字符串指定单元格的地址。', 'Sub Sample460()@            With　Worksheets(\"Sheet1\")                       <cite>#对Sheet1进行操作</cite>@                .pageSetup.PrintArea = Selection.Address	 <cite>#印刷对象设定为被选择的单元格范围</cite>@                .PrintPreview                                <cite>#打印预览模式</cite>@            End With@        End　Sub', '这里，把「Sheet1」Worksheet被选择的单元格范围做为印刷对象。为了确认，进入打印预览模式。', '/images/zhiku/TipsNO460-001.png', '/images/zhiku/TipsNO460-002.png', '回避错误', '这个例子，把被选择的单元格范围做\n            为印刷对象。但是，被选择的对象是单元格\n            以外对象。在那里加上判断，判断现在选择\n            的对象是不是单元格里的对象，这样就能回\n            避错误。下面这个例子，只印刷在单元格中\n            被选择的对象。', 'Sub  Sample460 2()@                        With Worksheets(\"Sheet1\")@                            If TypeName(Selection) = _@                                \"Range\" Then@                                .PageSetup.PrintArea  _@                                    = Selection.Address@                                .PrintPreview@                            End If@                        End with@                    End Sub', '(把被选择的单元格范围做为印刷对象)', '(被选择的单元格范围成为了印刷对象)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('460', '461', '设定印刷倍率', 'Zoom属性', 'Zoom属性，是设定印刷时的倍率。能够设定10~400的值(百分比)。', 'Sub Sample461()@            With  Worksheets(\"Sheet1\")              <cite>#对Sheet1进行操作	</cite>@                .PageSetup.Zoom  =  150           <cite>#设定印刷时候的倍率为150%		</cite>@                .PrintPreview                           <cite>#打印预览模式			</cite>@            End  with@        End　Sub', '设定印刷倍率为150%，之后进入打印预览模式。', '/images/zhiku/TipsNO461-001.png', '/images/zhiku/TipsNO461-002.png', '', '', '', '(设定印刷倍率为150%)', '(设定印刷倍率为150%)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('461', '462', '印刷单元格的网格线', 'PrintGridlines属性', 'PrintGridlines属性，设定印刷时是否印刷网格线。PrintGridlines属性是True情况下，印刷网格线，是False情况下，不印刷网格线。', 'Sub Sample462()@            With  Worksheets(\"Sheet1\")              <cite>#对Sheet1进行操作	</cite>@                .PageSetup.PrintGridlines  =  True  <cite>设定为印刷网格线	</cite>@                .PrintPreview                           <cite>#打印预览模式	</cite>@            End  with@        End　Sub', '设定为印刷单元格的网格线。之后进入打印预览模式。', '/images/zhiku/TipsNO458-001.png', '/images/zhiku/TipsNO458-002.png', '印刷行号和列号', '使用PrintHeadings属性，可以印刷行号\n            和列号。PrintHeadings属性为True时，印刷行\n            号和列号。', '', '(印刷单元格的网格线（网线还没有被设定）)', '(印刷单元格的网格线)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('462', '463', '确认文件/文件夹的存在', 'Dir函数', 'Dir函数，在引数pathname里搜索指定的文件和文件夹，指定文件和文件夹的路径，路径省略的时候\n        现在的文件夹作为对象，找不到对象的时候，返回文件和文件夹的名字。没找到的时候返回长度为0的字符串\n        在引数attributes里指定的值，请参照解说。', 'Sub Sample463()@		Dim temp1 AS String ,temp2 AS String@		Dim msg1 AS String ,msg2 AS String@        temp1 = Dir (ThisWorkbook.path &amp; \"\\ExcelSample.xlsx\")	 <cite>#取得文件名</cite>@        temp2 = Dir (ThisWorkbook.path &amp; \"\\ExcelSample.xlsx,vbdirectory\")		<cite>#取得文件夹名</cite>@        If　Len(Temp1) &lt;&gt; 0 Then      					<cite>#判定文件存在</cite>@            msg1 = \"ExcelSample.xlsx存在\"				<cite>#文件存在的时候的信息</cite>@        Else@            msg1 = \"ExcelSample.xlsx不存在\"					<cite>#文件不存在的时候的信息</cite>@        End If@        If Len(temp2) &lt;&gt; 0 Then     					<cite>#判定文件夹存在</cite>@            msg2 = \"ExcelSample.xlsx文件夹存在\"			<cite>#文件夹存在时候的信息</cite>@        Else@            msg2 = \"ExcelSample.xlsx文件夹不存在\"				<cite>#文件夹不存在时候的信息	</cite>@        End If@        MsgBox msg1 &amp; Vblf &amp; msg2     						<cite>#结果在信息箱里显示		</cite>@    End Sub', '在这里，使用Dir関数进行「ExcelSample.xlsx」文件和「ExcelSample」文件夹的存在进行检查，\n            检索文件夹的时候，在Dir函数的引数attribute里指定vbDirectory，实际上文件和文件夹是否存在，\n            用Len函数进行判断，如果返回的文字列的长度为0则表示文件/文件夹没有被发现\n            引数attributes，指定检索对象的属性，引数attributes里指定的值，是下面的那样\n            再者，这些的值能复数指定，其他的时候，像【vbNormal + vbHidden】一样地指定', '/images/zhiku/TipsNO463-001.png', '/images/zhiku/TipsNO463-002.png', '', '', '', '(搜索文件和文件夹)', '(显示搜索结果)', '2017-11-30 14:05:08', null, null, '[{\"title\":\"引数attribute里指定的值\",\"heads\":[\"值\",\"说明\"],\"rows\":[[\"vbNormal\",\"标准文件\"],[\"vbHidden\",\"隐藏文件\"],[\"vbSystem\",\"系统文件\"],[\"vbVolume\",\"无视与poryumuraberu指定全部的属性\"],[\"vbDirectory\",\"文件夹\"]]}]');
INSERT INTO `t_tips` VALUES ('463', '464', '取得文件的大小', 'FileLen函数', 'FileLen函数，取得文件大小（字节）。把引数作为对象取得指定的文件的路径，路径省略就以现在的文件夹作为对象', 'Sub Sample464()@                Dim temp AS String@            temp = ThisWorkbook.path &amp; \"￥ExcelSample.xlsx\"	 <cite>#检查文件的路径作为变数代入		</cite>@            MsgBox\"选择文件的文件大小 :\" &amp; Round(FileLen(Temp)/1024,2)&amp; \"KB\"	<cite>#指定文件的大小以KB为单位显示出来</cite>@        End Sub', '指定文件的文件大小，在信息箱里显示，FileLen函数返回指定文件的字节数。\n            因此，需要除以1024换算为Kb单位。同时，为了保留小数点的前两位\n            进行处理的函数。与所谓四舍五入有差异。', '/images/zhiku/TipsNO464-001.png', '/images/zhiku/TipsNO464-002.png', '', '', '', '(求出文件的大小)', '(表示文件的大小)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('464', '465', '取得/设定 文件的属性', 'GetAttr函数/SetAttr函数', 'GetAttr函数，取得被磁盘保存了的文件属性。表示属性的返回值，表示各属性值的合计值。\n        例如，有「只读(1)」和「隐含文件(2)」的属性的文件的返回值，像「1+2=3」表示出来。\n        可以利用SetAttr函数，设定文件的属性。指定引数attributes，设定文件名和属性值的合计值。\n        所有的，在引数pataname里指定对象的全路径，同时，省略路径 指定现在的文件夹是不能被找到的', 'Sub Sample465()@            Dim FileName AS String@            Dim FileAttr AS Long@            Dim msg AS String@            FileName = ThisWorkBook.Path &amp; \"\\ExcelSample.xlsx\"	<cite>#对象的文件名作为变数代入</cite>@            SetAttr FileName, vbHidden + vbReadOnly			<cite>#指定了的文件设定「隐含文件」「只读」的属性</cite>@            FileAttr = GetAttr(FileName)					<cite>#取得文件的属性	</cite>@            If FileAttr And vbReadOnly Then					<cite>#是不是只读的判断</cite>@                msg = msg &amp; \"读取专用\" &amp; vbCrLf				<cite>#只读的情况的信息</cite>@            End If@            If FileAttr And vbHidden Then						<cite>#是不是隐藏文件的判断</cite>@                msg = msg &amp; \"隐藏文件\" &amp; vbCrLf				<cite>#隐藏文件的信息</cite>@            End If@            If FileAttr And vbSystem Then					<cite>#是不是系统文件的判断</cite>@                msg = msg &amp; \"系统文件\" &amp; vbCrLf				<cite>#系统文件的信息</cite>@            End If@            If FileAttr And vbDirectory Then				<cite>#是不是文件夹的判断</cite>@                msg = msg &amp; \"文件夹\" &amp; vbCrLf				<cite>#文件夹的信息</cite>@            End If@            If FileAttr And vbArchive Then					<cite>#是不是存档属性的判断</cite>@                msg = msg &amp; \"存档属性\"					    <cite>#存档属性的信息</cite>@            End If@            MsgBox\"ExcelSample.xlsx文件的属性\"　&amp; vblf &amp; msg	<cite>#表示处理结果</cite>@        End Sub', '在这里,对「ExcelSample.xlsx」文件进行处理。首先，对SetAttr函数设定「隐含文件」「只读」的属性。\n            然后，使用GetAttr函数，判定有没有设定正确的属性。\n            GetAttr函数，以数值的形式返回了指定的文件的属性。如果设定了复数个属性，返回它的合计值。\n            要判定这个，使用And运算符，如果取得了的价值和运算符的结果是True，\n            那个属性会被设定，再者，SetAttr函数，GetAttr函数使用的属性的定数，是下面的那样', '/images/zhiku/TipsNO465-001.png', '/images/zhiku/TipsNO465-002.png', '关于And运算符的运算', '得到的属性的这个定数的合计值实际上是二进制的，用这个方式设定会有下面的情况，\n            vbReadOnly「1」(二进制数值「0001」)，vbHidden「2」(二进制数值「0010」)，共计「3」(二进制数值「0011」)。\n            这个值里，「0011」中包含着vbHidden要判定，「0011」和vbHidden 表示 「0010」和 And 运算符进行计算。\n            And运算符是进行比特演算的运算符。同样的位数的值在同一个时候返回true（1）。「0011」和「0010」，\n            处理结果成为「0010」。这个值因为与vbHidden的值是同样的，就知道vbHidden的值被设定了', '', '(设定文件的属性)', '(表示设定的属性)', '2017-11-30 14:05:08', null, null, '[{\"title\":\"引数attribute里指定的值\",\"heads\":[\"常量\",\"值\",\"说明\"],\"rows\":[[\"vbReadOnly\",\"1\",\"读取专用\"],[\"vbHidden\",\"2\",\"不表示\"],[\"vbSystem\",\"4\",\"系统文件\"],[\"vbDirectory\",\"16\",\"目录或者文件夹\"],[\"vbArchive\",\"32\",\"上次的备份以后被变更的文件\"]]}]');
INSERT INTO `t_tips` VALUES ('465', '466', '取得文件的作成时间', 'FileDateTime函数', 'FileDateTime函数，取得文件的作成时间。通过全路径把文件名指定为参数。首先，省略路径的话，就以现在文件夹作为对象', 'Sub Sample466()@            MsgBox \"文件的作成时间 : \" &amp; _@                FileDateTime (ThisWorkbook.path &amp; \"\\ExcelSample.xlsx\")	<cite>#表示指定的文件的作成时间</cite>@        End Sub', '使用FileDateTime函数取得在信息箱里表示「ExcelSample.xlsx」文件的作成日期和时间。\n            被取得的日期和时间，成为被Windows的系统设定设定的形式。', '/images/zhiku/TipsNO466-001.png', '/images/zhiku/TipsNO466-002.png', '文件的属性', '可以用windows的操作来确定文件的做成时间，\n            选择文件后，右键单击->属性，便可以确认文件的属性', '', '(取得文件的作成时间)', '(表示文件的作成时间)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('466', '467', '复制文件', 'FileCopy声明', 'FileCopy声明，是复制文件的声明。在FileCopy声明里，引数source是原文件的名，引数destination\n                    是复制后的名，并且是指定全路径之后的名字，路径省略的时候，以现在的文件夹作为对象，复制后\n                    的文件名和原来的文件名不同也是可以的了', 'Sub Sample467()@                FileCopy ThisWorkbook.Path &amp; \"\\ExcelSample.xlsx\" _@            ,ThisWorkbook.Path &amp; \"\\SampleData\\ExcelSampleCopy.xlsx\"@            <cite>#把ExcelSample.xlsx放在SampleData文件夹里，	</cite>@            <cite>#复制之后叫做ExcelSampleCopy.xlsx	</cite>@        End Sub', '复制指定的文件，在这里，在另外的文件夹里用另外的名字复制文件。这样FileCopy声明，\n            就可以不复制文件只变更文件名了', '/images/zhiku/TipsNO467-001.png', '/images/zhiku/TipsNO467-002.png', '如果在复制之前文件已经存在了', '如果在复制前文件已经存在了，FileCopy声明不会表示特别信息，实行复制，因此，当存在同名的文件时，要注意文件会被覆盖掉。\n            实际上如果用到这个处理的时候，在事前进行下文件的检查就好了，文件的存在检查用Dir函数，详细，请参照Tips463', '', '(复制文件)', '(文件被复制了)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('467', '468', '文件的移动', 'Name声明', 'Name声明，文件名是变更的声明,参数oldname是原来的文件名，指定带有全路径的参数newname为\n                    变更后的文件名，如果省略了路径，就以现在文件夹作为对象。这个时候，指定原来的文件另外的\n                    文件夹为参数newname，文件向结果文件夹移动。', 'Sub Sample468()@            Name ThisWorkbook.Path &amp; \"\\ExcelSample2.xlsx\" _@            As ThisWorkbook.Path &amp; \"\\SampleData\\ExcelSample2.xlsx\"@            <cite>#ExcelSample2.xlsx向SampleData里移动	</cite>@        End Sub', '[ExcelSample2.xlsx]文件向[SampleData]文件夹移动', '/images/zhiku/TipsNO468-001.png', '/images/zhiku/TipsNO468-002.png', '移动文件后变更为另外的名字', '使用了Name声明的文件的移动，也能把移动处的文件名做为另外的名字，而且，不移动文件，也能同时变更文件名。', '', '(移动文件)', '(文件移动了)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('468', '469', '删除文件', 'Kill声明', 'Kill声明，删掉文件夹内的文件。指定文件的全路径作为对象，路径省略的话，就以现在的文件夹作为\n对象，同时，可以在文件名里用「*」「?」这些通配符。', 'Sub Sample469()@                Kill ThisWorkbook.Path &amp; \"\\SampleData\\*.*\"@            <cite>#SampleData文件夹里的所有文件全都消除	</cite>@        End Sub', '删掉指定的文件。在这里，删除了「SampleData」文件夹内的所有文件。这样使用「*」，\n                可以删除复数个文件，哦哦，如果想删除特定种类的文件，像「.txt」这样指定扩展名。', '/images/zhiku/TipsNO469-001.png', '/images/zhiku/TipsNO469-002.png', '对象文件不存在的时候', 'Kill声明没找到对象文件的时候会发生错误。为了应对错误处理，请在对对象文件操作前检查\n            同时，使用Kill声明删掉了的文件，是不会进入回收站的，请注意这是完全被删除掉了。', '', '(删除文件)', '(文件被删除了)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('469', '470', '文件名或者文件夹名的变更', 'Name声明', 'Name声明，变更文件名和文件夹名。与As关键字组合使用.指定文件名全路径,省略路径的话，\n就以现在文件夹作为对象。', 'Sub Sample470()@                Name ThisWorkbook.Path &amp; \"\\ExcelSample3.xlsx\" _@            As ThisWorkbook.Path &amp;  \"\\ExcelSample3_bk.xlsx\"@            <cite>#向指定了的文件名加上「bk」		</cite>@        End Sub', '删掉指定的文件。在这里，删除了「SampleData」文件夹内的所有文件。这样使用「*」，\n                可以删除复数个文件，哦哦，如果想删除特定种类的文件，像「.txt」这样指定扩展名。', '/images/zhiku/TipsNO470-001.png', '/images/zhiku/TipsNO470-002.png', '指定的文件不存在的情况', 'Name声明变更前的文件不存在的情况，会发生错误。同时，如果有变更后的文件名和同名的文件，也会发生错误，\n            事前请检查文件存在。关于文件的存在检查，详细请参照Tips463。', '', '(变更文件名)', '(文件被变更了)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('470', '471', '从全路径取出文件名', 'FileCopy声明', 'InStrRev函数，从参数String1指定的文字列开始检索参数String2指定的文字，返回文字的位置。\nRight函数只从指定了为参数str的字符串，从字符串右侧取得指定了参数为length的文字', 'Sub Sample471()@            Dim temp As String						<cite>#取得现在的book的全路径	</cite>@            Dim Pos  As String						<cite>#取得分隔符的位置	</cite>@            temp = ThisWorkbook.FullName@            pos = InStrRev（temp,\"\\\")@            MsgBox \"文件名 : \"　&amp; Right (temp,Len(temp)-pos)@            <cite>#从全路径右侧，取得分隔符的位置		</cite>@            <cite>#表示在消息箱		</cite>@        End Sub', '从文件的全路径取得文件名。文件的路径，文件夹名和文件名用[￥]分隔开。文件名是最后的[￥]\n                    以后的字符串。InStrRev函数，取得最后的「￥」位置。文件名的文字数，从全路径全体的文字数，到\n                    这个「￥」的位置中间的文字成为参数,因此，从全路径的字符串右侧，Right函数能取得文件名的文字数\n                    分和文件名', '/images/zhiku/TipsNO471-001.png', '/images/zhiku/TipsNO471-002.png', '', '', '', '(取得文件)', '(文件被取得)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('471', '472', '检索各种各样的条件文件', 'Dir函数', 'Dir函数，在引数pathname里搜索指定的文件和文件夹，指定文件和文件夹的路径，路径省略的时候\n                   参数attributes，如果通过检索找到的时候则返回文件◍文件夹名。没找到的情况，返回\n                   长度0字符串，参数attributes指定的的值，请参照Tip463。', 'Sub Sample472()@            Dim path AS String@            path = ThisWorkbook.path &amp; \"\\\"							<cite>#对象文件夹作为变数代入		</cite>@            If Len(Dir (Path &amp; \"*Excel*.xl*\")) &lt;&gt; 0 Then@            <cite>#检索含[Excel]的Excel文件</cite>@                MsgBox\"文件夹发现了\"     							<cite>#发现了的时候的消息	</cite>@            Else@                MsgBox\"文件夹未发现\"     							<cite>#没发现了时候的消息		</cite>@            End If@            If Len(Dir(Path &amp; \"*.*\", vbHidden)) &lt;&gt; 0 Then@            <cite>#检索隐含文件</cite>@                MsgBox\"有隐藏的文件\"     							<cite>#发现了的时候的消息	</cite>@            Else@                MsgBox\"没有隐藏文件\"     							<cite>#没发现了时候的消息	</cite>@            End If@            If Len(Dir(Path &amp; \"*.*\", vbSystem)) &lt;&gt; 0 Then@            <cite>#检索系统文件</cite>@                MsgBox\"有系统文件\"     							<cite>#发现了的时候的消息	</cite>@            Else@                MsgBox\"没有系统文件\"@                <cite>#没发现了时候的消息</cite>@            End If@        End Sub', '在这儿，介绍通过各种各样的条件检索文件的方法。\n                    首先，使用通配符在文件里搜索包含指定文字的文件。在这里，文件名包含「Excel」\n                检索着在扩展名里包含「xl」的文件。\n                    然后，进行隐含文件，系统文件的检索。文件的种类，在指定的引数attribute里可以进行限定\n                    哦哦，Dir函数可以返回发现的文件的文件名，可以通过Len函数取得Dir函数的返回值的长度来\n                判定文件的有无', '/images/zhiku/TipsNO472-001.png', '/images/zhiku/TipsNO472-002.png', '', '', '', '(检索各种各样的文件)', '(文件被检索了)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('472', '473', '取得最近使用了的文件', 'RecentFiles属性', 'RecentFiles属性，表示最近使用了的文件。取得Maximum属性的最大数。把Item属性\n和Name属性组合在一起，能从最近使用了的文件的一览中取得指定的文件名。', 'Sub Sample473()@                MsgBox \"文件履历的最大数　:　\" _@            &amp; Application.RecentFiles.Maximum &amp; vblf _@            &amp; \"履历的第1号的文件名　:　\"　_@            &amp; Application.RecentFiles.item(1).Name@            <cite>#最近使用的文件的最大数、最近使用的文件的	</cite>@            <cite>#表示文件名	</cite>@        End Sub', '取得最近使用的文件。在这里，取得最大数和最近使用的文件名，表示在消息箱里\nItem属性，能指定index号码然后取得文件。index号从新排列，并不从新开始', '/images/zhiku/TipsNO473-001.png', '/images/zhiku/TipsNO473-002.png', '', '', '', '(求得最近使用了的文件的最大数和文件名)', '(信息被表示)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('473', '474', '作成新规文件夹', 'MkDir声明', 'MkDir声明，作成新规文件夹。引数path，通过全路径指定作成文件夹名，\n                    省略的时候以现在的文件夹作为对象', 'Sub Sample474()@                MkDir ThisWorkbook.Path &amp; \"\\DataBackUp\"@            <cite>#作成新规文件夹		</cite>@        End Sub', '在这里，对与包含这个样品的book同样的文件夹，新建「DataBackUp」文件夹', '/images/zhiku/TipsNO474-001.png', '/images/zhiku/TipsNO474-002.png', '如果已经有同名的文件夹', '如果已经有同名的文件夹存在的时候，这个例子实行时会有错误发生，关于事前文件夹的存在，\n            请使用Dir函数，详细请参照Tip463', '', '(作成文件夹)', '(文件夹被作成了)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('474', '475', '删除文件夹', 'RmDir声明/Kill声明', 'RmDir声明，删除文件夹。同时，会删除掉文件夹内所有的东西。在引数pathname里\n指定全路径，如果省略的话，就以现在的文件夹作为对象。', 'Sub Sample475()@            Dim Target As String@            Target = ThisWorkbook.Path &amp; \"\\DeleteSample\"@            <cite>#全路径作为变数代入进来	</cite>@            Kill Target &amp; \"\\*.*\"				<cite>#文件夹内的文件全部删除	</cite>@            RmDir Target				<cite>#删除文件夹	</cite>@        End Sub', '在这里，删掉与这个宏包含的book同样的文件夹内的「DeleteSample」文件夹\n在这个文件夹里，有文件存在。因为在文件夹内有文件存在的话会发生错误，\n用Kill声明删除文件夹内的文件之后再删除文件夹。', '/images/zhiku/TipsNO475-001.png', '/images/zhiku/TipsNO475-002.png', '删除的文件夹和垃圾箱', '用Kill声明被删掉了的文件和用RmDir声明被删掉了的文件夹\n            是不会进入垃圾箱而是完全删除的，请注意。', '', '(删除文件夹内包含的文件)', '(文件被删除了)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('475', '476', '变更current drive', 'ChDrive属性', 'ChDrive声明，变更current drive，在引数drive里指定变更的盘', 'Sub Sample476()@            ChDrive \"C\"			<cite>#current drive 变更为C盘</cite>@            MsgBox \"current drive　:　\"&amp; CurDir@            <cite>#把current drive 表示在信息箱里</cite>@        End Sub', '变更current drive。变更后，\n使用CurDir函数来确认current drive\n是不是变更着。CurDir的引数省略的时候\n返回current drive的现在的文件夹\n关于CurDir函数，请参照Tips477', '/images/zhiku/TipsNO476-001.png', '', '指定的文件不存在的情况', 'Name声明变更前的文件不存在的情况，会发生错误。同时，如果有变更后的文件名和同名的文件，也会发生错误，\n            事前请检查文件存在。关于文件的存在检查，详细请参照Tips463。', '', '', '', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('476', '477', '取得现在的文件夹', 'CurDir函数', '使用CurDir函数的话，能够取得现在Excle作业的文件夹的当前文件夹。\n指定的CurDir的引数作为对象驱动器，省略的时候，以现在的的驱动器作为对象', 'Sub	Sample447()@            MsgBox \"当前文件夹 :\" &amp; CurDir(\"C\")@            <cite># 表示当前文件夹	</cite>@        End  Sub', '使用CurDir函数，取得C驱动器现在\n文件夹，在消息箱里(上)表示。', '/images/zhiku/TipsNO477-001.png', '', '当前文件夹', '所谓现在文件夹的「现在」，是「现在工作中的」的意义。Excle现在要工作对象的文件夹就是现在文件夹。因此，例如打开文件时，给文件加上名字保存的话，那个时间段，当前文件夹发生变化。\n            那么，Excel启动的时候能设定当前文件夹是哪个文件夹。这个文件夹，是默认的当前文件夹。当然，用此后的工作当前文件夹的变化。\n            再者，默认的当前文件夹，DefaultFilePath属性是能够取得/设定的。', '', '', '', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('477', '478', '变更现在文件夹为另外的文件夹', 'FileCopy声明', 'ChDir声明，变更现在文件夹。参数pathname，指定变更后的全路径文件夹。', 'Sub Sample478()@            Dim temp As String@            temp = CurDir						<cite>#现在的文件夹作为变数代入</cite>@            CurDir\"C:\\\"						<cite>#变更现在的文件夹</cite>@            MsgBox \"现在的文件夹 : &amp; \"CurDir								<cite>#表示变更后的文件夹名</cite>@            chDir temp								<cite>#现在的文件夹返回到原来的文件夹</cite>@        End Sub', '变更current drive。现在的文件夹，是现在的\n                    作业对象。是打开book的时候和保存的时候，\n                    最初被表示的文件夹。\n                      在这里，一旦，现在文件夹作为变量代入，\n                    此后变更现在文件夹表示的消息。在最后时，\n                    返回现在文件夹。', '/images/zhiku/TipsNO478-001.png', '', '指定的文件不存在的情况', '能变更为任意的地方现在文件夹，例如用户打开文件的操作的时候\n            因为能指定在程序方面最初表示的文件夹，能减少用户负担。\n            是细小的事,不过，进行这样的处理的事，\n            对用户来说这事更容易使用的程序', '', '', '', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('478', '479', 'File System Object对象的使用', 'FileSystemObject对象/CreateObject函数', '利用FileSystemObject[FSO]，能够进行文件和文件夹之类的操作。\n	利用FSO时，参照设定「Microsoft Scripting Runtime」或者利用CreateObject函数。利用\nCreateObject函数的时候，参数指定为「ScriptingFileSystemObject」。', 'Sub Sample479()@            Dim fso As FileSystemObject    <cite>#已经使用参照设定场合的变量的声明	</cite>@            Set fso = New FileSystemObject@            <cite>#将创建的FileSystemObject赋值给变量	</cite>@            fso.CreateTextFile ThisWorkbook.Path &amp; \"\\FSO.text\"@            <cite>#使用CreateTextFile方法创建text文件	</cite>@        End Sub@        Sub Sample479_2()@            Dim fso As Object    <cite>#没有使用参照设定场合的变量的声明</cite>@            Set fso = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#将创建的FileSystemObject赋值给变量		</cite>@            fso.CreateTextFile ThisWorkbook.Path &amp; \"\\FSO.text\"@            <cite>#使用CreateTextFile方法创建text文件	</cite>@        End Sub', '在这里，介绍了2种创建FileSystemObject对象后使用method（CreateTextFile()）的方式。\n	第一个Sample是进行参照设定的场合、第二个是没有进行参照设定场合的Sample。两者都\n能进行创建text文件的处理。\n	已经进行了参照设定的场合，声明一个FileSystemObject类型的变量，使用New关键字创建\n对象。\n	没有进行参照设定的场合，声明一个Object类型的变量，使用CreateObject函数创建对象。\n	另外，CreateTextFile方法是根据指定文件名创建text文件的方法。', '/images/zhiku/TipsNO479-001.png', '/images/zhiku/TipsNO479-002.png', '关于FileSystemObject对象', 'FileSystemObject对象是由Scrrun.ｄｌｌ文件内的ScriptingLibrary提供的。所以，它不是ExcelVBA专用的命令。其他的VBA(Access和Word等)、VBS等当然也是可以使用的。', '', '(使用FSO后创建text文件)', '(使用FSO后text文件被创建)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('479', '480', '调查文件的存在', 'FileExists方法', 'FileExists方法返回文件是否存在。将想要调查的文件名以FullPath的形式指定为参数filespec。\n文件存在的时候返回True，不存在的时候返回False。', 'Sub Sample480()@            Dim FSO As Object@            Dim Target As String@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象</cite>@            Target = ThisWorkbook.Path &amp; \"\\Sample.txt\"@            <cite>#将检查的文件名赋值给变量</cite>@            If FSO.FileExists(Target) Then@                MsgBox Target &amp; \"存在\"    <cite>#文件存在的时候的消息</cite>@            Else@                MsgBox Target &amp; \"不存在\"  <cite>#文件不存在的时候的消息</cite>@            End If@        End Sub', '检查指定的文件是否存在。FileExists方法是指定的文件存在的时候返回True。在与包含这个宏的\n工作簿相同文件夹内，检查[Sample.txt]是否存在。', '/images/zhiku/TipsNO480-001.png', '/images/zhiku/TipsNO480-002.png', '', '', '', '(检查文件是否存在)', '(显示结果)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('480', '481', '复制文件', 'CopyFile方法', 'CopyFile方法是复印指定的文件。参数source是设定复印的文件、参数destination是设定复制的\n                    目标位置。\n                        参数source中可以使用通配符。如果使用了通配符，但并没有匹配的文件时就会出现error。另外，\n                    只有path的最终要素是使用通配符的。再者与参数destination相同名字的文件已经存在的时候，如果\n                    参数overwrite设定为True则是覆盖文件，设定为False时会发生error。规定值是True。', 'Sub Sample481()@            Dim FSO As Object@            Dim Path As String@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象后赋值给变量</cite>@            Path = ThisWorkbook.Path &amp; \"\\\"    <cite>#Path赋值给变量</cite>@            FSO.CopyFile Path &amp; \"CopySample1.xlsx\", Path &amp; \"CopySample1_bk.xlsx\"@            <cite>#复制CopySample1.xlsx文件作为CopySample1_bk.xlsx文件</cite>@            FSO.CopyFile Path &amp; \"CopySample1.xlsx\", Path &amp; \"Work\\\"@            <cite>#复制CopySample1.xlsx文件到Work文件夹中</cite>@        End Sub', '复制文件。最初的复制是在相同文件夹内以「CopySample1_bk.xlsx」作为文件名保存\n                    「CopySample1.xlsx」的复制。\n                        第2个处理中是复制「CopySample1.xlsx」文件到Work文件夹中。\n                        指定复制的目标位置的文字列的结尾是「￥」的时候，对象看上去不是文件夹，在那个文件夹中\n                    文件被复制。', '/images/zhiku/TipsNO481-001.png', '/images/zhiku/TipsNO481-002.png', '', '', '', '(复制文件)', '(文件被复制了)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('481', '482', '移动文件', 'Move方法/GetFile方法', 'Move方法，移动object(指定的文件)到参数destination（指定的文件夹）中。\n                    GetFile方法，返回与指定的文件相应的File对象。\n                    关于FileSystemObject，文件是作为File对象使用的。', 'Sub Sample482()@            Dim FSO As Object@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象赋值给变量</cite>@            FSO.GetFile(ThisWorkbook.Path &amp; \"\\MoveSample1.xlsx\").Move ThisWorkbook.Path &amp; \"\\Work\\\"@            <cite>#移动MoveSample1.xlsx到Work文件夹中</cite>@        End Sub', '移动文件。关于FileSystemObject，文件是作为File对象使用的。因此，通过GetFile方法\n                    把源文件作为File对象获取。\n                    通过Move方法移动那个文件。', '/images/zhiku/TipsNO482-001.png', '/images/zhiku/TipsNO482-002.png', '在目标位置存在同名文件的时候', '在目标位置存在同名文件的时候，Move方法会出现错误。同名文件有可能存在的时候，在Move方法的前面确认文件的存在应该更好吧。\n            确认文件的存在请参照Tips463。', '', '(复制文件)', '(文件被复制了)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('482', '483', '删除文件', 'Delete方法', 'Delete方法，删除指定给object的File对象。参数force如果设定为True那么读取专用的文件也\n                   可以删除。规定值是False。省略参数force后，如果要删除读取专用的文件那么就会发生error。', 'Sub Sample483()@            Dim FSO As Object@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象赋值给变量	</cite>@            FSO.GetFile(ThisWorkbook.Path &amp; \"\\DeleteSample1.xlsx\").Delete@            <cite>#删除DeleteSample1.xlsx	</cite>@        End Sub', '删除指定的文件。Delete方法是面对File对象使用的方法。因此，使用GetFile方法把指定的\n                  文件作为File对象获取。', '/images/zhiku/TipsNO483-001.png', '/images/zhiku/TipsNO483-002.png', '删除的文件和回收站', '使用Delete方法删除的文件没有进入到回收站中，因为完全被删除了所以请注意。', '', '(复制文件)', '(文件被复制了)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('483', '484', '调查文件的属性', 'Attributes Property', 'Attributes Property，取得/设定object（指定的File对象）的属性。\n                    设定属性是通过数值进行指定。详细请参照【详解】。另外，设定复数个属性的时候，使用\n                    +运算符把数值加到一起算。', 'Sub Sample484()@            Dim FSO As Object@            Dim FileObject As Object@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象赋值给变量</cite>@            Set FileObject = FSO.GetFile(ThisWorkbook.Path &amp; \"\\ExcelSample4.xlsx\")@            <cite>#对象的文件作为File对象赋值给变量</cite>@            If FileObject.Attributes And 1 then@            <cite>#Check对象文件是读取专用</cite>@                Fileobject.Attributes = 0@                <cite>#读取专用的时候解除读取专用</cite>@            End If@        End Sub', '取得/设定文件的属性。在这里，检查「ExcelSample4.xlsx」是否添加了读取专用的属性，\n            在读取专用的情况下解除属性。\n                是否设定了属性使用And运算符进行判定。像「已经取得的属性　And 想要确认的属性」这样\n            的记述后，如果是True那么就会知道这个属性被设定了。\n                Attributes Property中指定的值参照下面的内容。', '/images/zhiku/TipsNO484-001.png', '/images/zhiku/TipsNO484-002.png', '', '', '', '(解除读取专用的属性)', '(读取专用的属性被解除了)', '2017-11-30 14:05:08', null, null, '[{\"title\":\"在Attributes Property中使用的数值\",\"heads\":[\"值\",\"属性\"],\"rows\":[[\"0\",\"普通文件。未设置任何属性。\"],[\"1\",\"可读文件。属性是可读/写的。\"],[\"2\",\"隐藏文件。属性是可读/写的。\"],[\"4\",\"系统文件。属性是可读/写的。\"],[\"8\",\"磁盘驱动器卷标。属性是只读的。\"],[\"16\",\"文件夹或目录。属性是只读的。\"],[\"32\",\"文件自上次备份以来已发生更改。属性是可读/写的。\"],[\"64\",\"链接或快捷方式。属性是只读的。\"],[\"128\",\"压缩文件。属性是只读的。\"]]}]');
INSERT INTO `t_tips` VALUES ('484', '485', '取得文件名', 'GetFileName方法', 'GetFileName方法，只返回参数pathspec（指定的路径）字符串中的文件名。尽管实际文件不存在，\n                    也返回指定路径中的文件名。', 'Sub Sample485()@            Dim FSO As Object@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象赋值给变量	</cite>@            MsgBox \"文件名：\" &amp; FSO.GetFileName(ThisWorkbook.Path &amp; \"\\ExcelSample5.xlsx\")@            <cite>#在MessageBox中只表示指定路径中的文件名	</cite>@        End Sub', '从指定的路径中取得文件名后，并在MessageBox中表示。一使用GetFileName方法就可以\n                    取得文件名。', '/images/zhiku/TipsNO485-001.png', '/images/zhiku/TipsNO485-002.png', '文件名和扩展名', 'GetFileName方法，从指定的路径中取得文件名。这时，在指定路径中如果包含扩展名，那么返回包含扩展名的文件名。如果没有包含扩展名，那么返回除掉扩展名以外的文件名。与OS的设定是没有关系的。', '', '(设定文件的属性)', '(表示设定的属性)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('485', '486', '取得文件的路径', 'Path属性/ParentFolder属性', 'Path属性是返回在object中指定的File对象的路径。路径中也包含文件名。\n                    ParentFolder属性是在object', 'Sub Sample486()@            Dim FSO As Object@            Dim File As Object@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象赋值给变量</cite>@            Set File= FSO.GetFile(ThisWorkbook.Path &amp; \"\\ExcelSample5.xlsx\")@            <cite>#创建File对象赋值给变量</cite>@            MsgBox \"Path：\" &amp; File.Path &amp; vblf &amp; \"文件夹名：\" &amp; File.ParentFolder@            <cite>#在MessageBox中表示指定文件的路径和文件夹名</cite>@        End Sub', '在这里，取得文件的路径和被保存的文件的文件夹名，并在MessageBox中表示。\n                    取得文件名。', '/images/zhiku/TipsNO486-001.png', '/images/zhiku/TipsNO486-002.png', '', '', '', '(设定文件的属性)', '(表示设定的属性)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('486', '487', '取得文件的扩展名', 'GetExtensionName方法', 'GetExtensionName方法，从参数path（指定的路径）中取得文件的扩展名。', 'Sub Sample487()@            Dim FSO As Object@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象赋值给变量</cite>@            MsgBox \"扩展名：\" &amp; FSO.GetExtensionName(ThisWorkbook.Path &amp; \"\\ExcelSample5.xlsx\")@            <cite>#取得扩展名后在MessageBox中表示</cite>@        End Sub', '使用GetExtensionName方法取得指定文件的扩展名。从Excel2007开始，Excel薄的扩展名\n也正在增加「.xlsx」（没有宏）和「.xlsm」（有宏）。如果使用GetExtensionName方法，通过\n扩展名可以检查文件是否包含宏。', '/images/zhiku/TipsNO487-001.png', '/images/zhiku/TipsNO487-002.png', 'OS设定和GetExtensionName方法', 'GetExtensionName方法，尽管实际中参数Path中指定的文件不存在，也返回扩展名。另外，参数Path中指定的值如果没有扩展名，那么返回空。\n            因此，通过OS设定是否表示扩展名与GetExtensionName方法的操作没有关系。', '', '(设定文件的属性)', '(表示设定的属性)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('487', '488', '调查文件夹的存在', 'FolderExists方法', 'FolderExists方法是取得文件夹是否存在。存在的时候返回True，不存在的时候返回False。在参\n                    数folderspec中指定对象文件夹。对象文件夹中也可以指定相对路径。相对路径中「.」代表当前文件\n                    夹，「..」代表当前文件夹的父文件夹。', 'Sub Sample488()@            Dim FSO As Object@            Dim temp As String@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象赋值给变量</cite>@            temp = CurDir    <cite>#当前文件夹复制给变量</cite>@            ChDir ThisWorkbook.Path    <cite>#当前文件夹变更为这个Book的保存地址	</cite>@            If　FSO.FolderExists(\".\\Work\") Then@            <cite>#Work文件夹是否存在的Check</cite>@                MsgBox \"Work文件夹存在\"@                <cite>#文件夹存在的时候的Message</cite>@            Else@                MsgBox \"Work文件夹不存在\"@                <cite>#文件夹不存在的时候的Message</cite>@            End If@            ChDir temp    <cite>#当前文件夹复原为变更前</cite>@        End Sub', '在这里，检查与包含这个宏的Book相同文件夹内是否存在「Work」文件夹，然后在\nMessageBox中表示结果。\n	这时，FolderExists方法的参数以相对路径的形式指定「Work」文件夹。因此，通过ChDir函\n数把房前文件夹变更为这个Book被保存的文件夹。\n	另外，处理结束后，当前文件夹复原为变更前。', '', '', '', '', '', '', '', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('488', '489', '创建文件夹', 'CreateFolder方法', 'CreateFolder方法是创建在参数中指定的文件夹。同名的文件夹已经存在的时候发生Error。\n创建成功就返回已经创建的文件夹的路径。', 'Sub Sample489()@            Dim FSO As Object@            Dim temp As String@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象赋值给变量</cite>@            On Error Resume Next    <cite>#开始Error处理</cite>@            temp = FSO.createfolder(ThisWorkbook.Path &amp; \"\\Data4\")@            <cite>#创建文件夹</cite>@            If　Err.Number = 0 Then    <cite>#判定是否发生Error</cite>@                MsgBox temp &amp; \"文件夹创建完了\"@                <cite>#没有发生Error，文件夹被创建时的信息</cite>@            Else@                MsgBox temp &amp; \"文件夹不能创建\" &amp; vbLf _@                    &amp; Err.Description    <cite>#发生Error时的处理	</cite>@            End If@        End Sub', '使用CreateFolder方法创建文件夹。CreateFolder方法，文件夹创建成功就返回文件夹的路\n径，失败就发生Error。使用这个方法对文件夹是否被创建进行判定。因此，在On Error Resume\nNext声明中，即使发生Error处理不会中断仍会进行。另外，发生Error的时候，使用Description\n属性，在MessageBox中表示Error的内容。', '', '', '', '', '', '', '', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('489', '490', '复制文件夹', 'CopyFolder方法', 'CopyFolder方法是复制指定的文件夹。在参数source中指定复制的文件夹，在参数destination\n                    中指定复制的目标位置。\n                        参数source中可以使用通配符。但是使用通配符但匹配文件一个也没有时就会出现Error。而且，\n                    只有在路径的最后一个组成部分中使用通配符。再者，与参数destination相同名字的文件夹已经存在\n                    的时候，在参数overwrite中指定True，就会复制该文件覆盖现有文件，指定False时则会发生Error。\n                    规定值是True。', 'Sub Sample490()@            Dim FSO As Object@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象赋值给变量</cite>@            FSO.CopyFolder ThisWorkbook.Path &amp; \"\\Data\", _@                ThisWorkbook.Path &amp; \"\\Work\\\"@            <cite>#把Date文件夹复制到Work文件夹中</cite>@        End Sub', '使用CopyFolder方法把「Data」文件夹复制到「Work」文件夹内。这个时候，在复制目标位置\n文件夹名的末尾连接上「\\」。', '/images/zhiku/TipsNO490-001.png', '/images/zhiku/TipsNO490-002.png', '', '', '', '(复制文件夹)', '(文件夹被复制了)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('490', '491', '移动文件夹', 'MoveFolder方法', 'MoveFolder方法是复制指定的文件夹。在参数source中指定要移动的文件夹，在参数\n                    destination中指定要移动到的路径。参数source中可以使用通配符，但是，只有在指定要素的最后\n                    一个组成部分使用通配符。', 'Sub Sample491()@            Dim FSO As Object@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象赋值给变量</cite>@            FSO.MoveFolder ThisWorkbook.Path &amp; \"\\Data\", _@                ThisWorkbook.Path &amp; \"\\Work\\\"@            <cite>#把Date文件夹移动到Work文件夹中</cite>@        End Sub', '使用MoveFolder方法移动文件夹。在这里，把与包含这个宏的Book相同文件夹的Data文件\n夹移动到相同阶层的Work文件夹内。另外，在移动的目标位置已经存在同名的文件夹的时候会出\n现Error。', '/images/zhiku/TipsNO491-001.png', '/images/zhiku/TipsNO491-002.png', '', '', '', '(移动文件夹)', '(文件夹被移动了)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('491', '492', '删除文件夹', 'DeleteFolder方法', 'DeleteFolder方法，删除在参数Folderspec中指定的文件夹。文件夹内的文件也全部删除。\n参数force可以省略。指定True那么读取专用的文件也会被删除。规定值是False。', 'Sub Sample492()@            Dim FSO As Object@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象赋值给变量</cite>@            FSO.deletefolder ThisWorkbook.Path &amp; \"\\Data2\"@            <cite>#删除Date2文件夹</cite>@        End Sub', '使用DeleteFolder方法删除「Data2」文件夹。这时，「Data2」文件夹不存在会发生Error。\n另外，DeleteFolder方法省略参数force的时候删除文件夹内有读取专用的文件会发生Error。', '/images/zhiku/TipsNO492-001.png', '/images/zhiku/TipsNO492-002.png', '', '', '', '(移动文件夹)', '(文件夹被移动了)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('492', '493', '调查文件夹的属性', 'Attributes Property', 'Attributes，取得/设定object（指定的Folder对象）的属性。\n	设定属性是通过数值进行指定。详细请参照【详解】。另外，设定复数个属性的时候，使用\n+运算符把数值加到一起算。', 'Sub Sample493()@            Dim FSO As Object@            Dim FolderObject As Object@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象赋值给变量</cite>@            Set FolderObject = FSO.GetFolder(ThisWorkbook.Path _@                &amp; \"\\Data3\")@            <cite>#对象的文件夹作为File对象赋值给变量</cite>@            If FolderObject.Attributes And 1 Then@            <cite>#Check对象文件夹是读取专用</cite>@                Folderbject.Attributes = 0@                <cite>#读取专用的时候解除读取专用</cite>@            End If@        End Sub', '取得/设定文件的属性。在这里，检查「Data3」是否添加了读取专用的属性，\n在读取专用的情况下解除属性。\n	是否设定了属性使用And运算符进行判定。像「已经取得的属性　And 想要确认的属性」这样\n的记述后，如果是True那么就会知道这个属性被设定了。\n	Attributes 中指定的值参照下面的内容。', '/images/zhiku/TipsNO493-001.png', '/images/zhiku/TipsNO493-002.png', '', '', '', '(解除读取专用的属性)', '(读取专用的属性被解除了)', '2017-11-30 14:05:08', null, null, '[{\"title\":\"在Attributes Property中使用的数值\",\"heads\":[\"值\",\"属性\"],\"rows\":[[\"0\",\"普通文件夹。未设置任何属性。\"],[\"1\",\"可读文件夹。属性是可读/写的。\"],[\"2\",\"隐藏文件夹。属性是可读/写的。\"],[\"4\",\"系统文件夹。属性是可读/写的。\"],[\"8\",\"磁盘驱动器卷标。属性是只读的。\"],[\"16\",\"文件夹夹或目录。属性是只读的。\"],[\"32\",\"文件自上次备份以来已发生更改。属性是可读/写的。\"],[\"64\",\"链接或快捷方式。属性是只读的。\"],[\"128\",\"压缩文件。属性是只读的。\"]]}]');
INSERT INTO `t_tips` VALUES ('493', '494', '取得所有文件', 'SubFolders属性', 'SubFolders属性是取得指定文件夹的子文件夹。', 'Private vFoundFiles As Collection    <cite>#保存取得文件名的Collection</cite>@        Sub Sample494()@            Set vFoundFiles = New Collection    <cite>#创建Collection</cite>@            GetFileList ThisWorkbook.Path@            <cite>#这个Book所在的文件夹内的文件名取得</cite>@            MsgBox \"文件数:\" &amp; vFoundFiles.Count &amp; vbLf _@            &amp; \"最先找到的文件：\" &amp; vFoundFiles.Item(1)@            <cite>#表示找到的文件数和最初找到的文件名</cite>@        End Sub@        Sub GetFileList(ByVal vPath As String)@            Dim FSO As Object@            Dim TargetFolder As Object@            Dim SubFolder As Object@            Dim vFile As Object@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象赋值给变量</cite>@            Set TargetFolder = FSO.GetFolder(vPath)@            <cite>#指定的文件夹作为Folder对象赋值给变量</cite>@            For Each SubFolder In TargetFolder.SubFolders@            <cite>#进行对所有文件夹的处理</cite>@                GetFileList SubFolder.Path@                <cite>#对于取得的文件夹再次实行GetFileList</cite>@            Next@            <cite>#文件名的取得</cite>@            For Each vFile In TargetFolder.Files@            <cite>#对于所有文件的处理</cite>@                vFoundFiles.Add Item:=vFile.Path@                <cite>#把文件名追加到Collection中</cite>@            Next@            Set FSO = Nothing@        End Sub', '在这里，取得指定文件夹内的所有文件名。子文件夹内的文件也取得。子文件夹通过\nSubFolders属性也能够取得。在这里，对于所有的子文件夹顺序实行GetFileList方法，取得所有文件名。\n像这样的GetFileList方法内，再次调用GetFileList方法的处理被称作递归处理。', '/images/zhiku/TipsNO494-001.png', '/images/zhiku/TipsNO494-002.png', '', '', '', '(取得文件名)', '(文件数和文件名被取得了)', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('494', '495', '调查盘符的总容量和空闲容量来计算使用容量', 'TotalSize属性/FreeSpace属性', 'TotalSize属性是取得盘符的总容量。FreeSpace属性是取得空闲容量。单位都是以byte为单位。\n再者，object中指定FileSystemObject对象的Drives对象。盘符对象通过GetDrive方法取得。', 'Sub Sample495()@            Dim FSO As Object@            Dim Total As Long, Free As Long@            Set FSO = CreateObject(\"Scripting.FileSystemObject\")@            <cite>#创建FileSystemObject对象赋值给变量</cite>@            With FSO.GetDrive(\"C\")@            <cite>#把C盘作为Drive对象取得，变为处理对象</cite>@                Total = Format(.TotalSize / 1024 / 1024 / 1024, \"#,###\")@                <cite>#以GB单位取得总容量</cite>@                Free = .FreeSpace / 1024 / 1024 / 1024@                <cite>#以GB单位取得空闲容量</cite>@            End With@            MsgBox \"总容量：\" &amp; Total &amp; \"GB\" &amp; vbCrLf _@                &amp; \"空闲容量：\" &amp; Free &amp; \"GB\"@            <cite>#在MessageBox中表示取得的值</cite>@        End Sub', '在这里，取得C盘的总容量和空闲容量，然后在MessageBox中表示。\n通过GetDrive方法，把C盘作为Drive对象取得。\n通过TotalSize属性取得总容量，通过FreeSpace属性取得空闲容量。\n因为分别以byte为单位被取得，所以循环除以1024，取得GB单位的值。', '', '', '', '', '', '', '', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('495', '496', '全部驱动文件的查找', 'DriveType的属性', 'DriveType属性，获取指定驱动文件的Object。', 'Sub Sample496( )@            Dim FSO As Object@            Dim DriveObject As Object@            Dim msg As String@            Set FSD = CreateObject(\"Scripting.FileSyatemObject\")@            <cite>使用FileSyatemObject对象做成代入的变量</cite>@            For  Each DirveObject in FSO.Drives　　　　　 <cite>#进行全部驱动文件的处理</cite>@                msg = msg &amp; DirveObject.DriveLetter &amp; \":\"　　　　　<cite>#获取驱动信息</cite>@                Select Case DriveObject.DriveType@                 <cite>#获取驱动文件响应信息</cite>@                    Case 0: msg = msg &amp; \"不明\"　&amp;　vbLf@                    Case 1: msg = msg &amp; \"可移动磁盘\"　&amp;　vbLf@                    Case 2: msg = msg &amp;　\"硬盘\"　&amp;　vbLf@                    Case 3: msg = msg &amp;　\"networkweb\"　&amp;　vbLf@                    Case 4: msg = msg &amp;　\"CD-ROM驱动\"　&amp;　vbLf@                    Case 5: msg = msg &amp;　\"ram盘\"　&amp;　vbLf@                End Select@            Next@            MsgBox msg, vbInformation@        End Sub', '全部驱动文件的获取，显示在消息栏。对Drives搜索进行--处理、获取全部关于Drive对象的驱动\n器号DriveType驱动文件。\n    并且、使用DriveLetter特性获取驱动器号.并且、Drive特性が返回值和驱动文件是，样例内Sele\nct Case声明指定的值。', '', '', '', '', '', '', '', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('496', '497', '驱动文件系统的种类查找', 'FilSystem属性', 'FileSyatem的属性是返回object指定的Dive客观的文件系统。返回的值是「FAT」「NTFS」「CDFS」\n３种类型。', 'Sub Sample497( )@            Dim FSD As Object@            Dim DriveObject As Object@            Dim msg As String@            Set FSD = CreateObject(\"Scripting.FileSyateObjectm\")@            <cite>使用FileSyatemObject对象做成代入的变量</cite>@            For Each DriveObject In FEO.Drives@            <cite>处理全部的系统文件</cite>@                If DriveObject.IsReady Then@                <cite>确认驱动是否准备就绪</cite>@                    msg = msg &amp; DriveObject.DriveLetter &amp; \":\"@                    <cite>获取驱动文件</cite>@                    msg = msg &amp; DriveObject.FileSyatem &amp; vblf@                    <cite>驱动文件系统的获取</cite>@                End If@                    Case 5: msg = msg &amp;　\"ramディスク\"　&amp;　vbLf@            Next@            MsgBox msg,vbInformation@            <cite>显示取得的信息</cite>@        End Sub', '在全部驱动对象中获取文件系统，显示在信息箱。但是，像DVD盘符那样，使用可移动磁盘的时\n候，光盘不放到驱动器里（没有准备）就会出现错误。\n	这里，通过IsReady属性，判断好驱动器是否准备好，然后取得已准备好的驱动器中的文件系统。', '', '', '', '', '', '', '', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('497', '498', '原文文件的打开', 'OpenText方法的使用', 'OpenText方法是总计读的原文文件。总计读的原文文件的一个工作表、打开新的工作表。详细的\n变量、变量的值的设定请参照【解说】。', 'Sub Sample498()@            Workbooks.OpenText Filename:=ThisWorkbookPath\"￥销售数据.txt\" _@            ,DataType:=xlDelimited _@            ,TextQualifier:=xlTextQualifierNone _@            ,Comma:=Ture@            <cite>逗号区域限制数据输入为销售数据.txt读入的</cite>@        End Sub', '原文文件的读入。OpenText方法变量值的设定与下一个是通用的。', '/images/zhiku/TipsNO498-001.png', '/images/zhiku/TipsNO498-002.png', '', '', '', '', '', '2017-11-30 14:05:08', null, null, '[{\"title\":\"OpenText方法的变量\",\"heads\":[\"值\",\"说明\"],\"rows\":[[\"Filename\",\"指定读入原文文件名\"],[\"Origin\",\"原文文件的数的平台是指定的。能够使用的常量有\\n                        XlPlatform等级xlMacintosh、xlWindows、xlMSDOS，哪一个\\n                        都可以。但是，表示目标的准则页的准则页号是指定的。例如，\\n                        “1256”的场合，源文件的代码是“阿拉伯语（Windows）“\\n                        这样的示范。省略这个变量，使用原文输入向导的（数的文件）\\n                        现在的设定值。\"],[\"StartRow\",\"收获指定开始行\"],[\"DataType\",\"原文含有指定数据形式。可以使用的常量有，XlTextParsingType\\n                        等级的xlDelinited（区域限制文字）还有xlFixedWidth（固定\\n                        长度）。\"],[\"TextQualifier\",\"指定文字列的单引号\"],[\"ConsecutiveDelimiter\",\"连续区域限制为一个文字，操作的时候指定为True\"],[\"Tab\",\"区域限制文字使用Tab时指定为True\"],[\"Semicolon\",\"区域限制文字使用分好时指定为True\"],[\"Comma\",\"区域限制文字使用逗号时指定为True\"],[\"Soace\",\"区域限制文字使用空格时指定为True\"],[\"Other\",\"区域限制文字使用指定型OtherChar变量时指定为True\"],[\"OtherChar\",\"Other型变量为True时，指定区域限制文字\"],[\"Fieldinfo\",\"用指定的排列来表示各列的数据形式。数据是用区域限制符号\\n                        区域限制场所，使用这个变量的排列，指定特定列的变换选择\\n                        数据是在固定长度的场合Array（开始位置，数据形式），不是\\n                        固定长度的场合Array（列号，数据形式）的情况下来指定。\\n                        数据类型是指定XlColumnDataType等级的变量。\"],[\"TextVisualLayout\",\"指定原文的视觉的配置\"],[\"DecimalSeparator\",\"确认用Excel数值的场合使用小数点的符号\"],[\"ThousandsSeparator\",\"确认用Excel数值的场合使用限制位数的符号\"],[\"TrailingMinusNumbers\",\"末尾负符号是操作负数值附带数值的场合，指定为True\"],[\"Local\",\"区域限制符号、数值和数据形式是使用电脑地域设定的场合\\n                        指定为True\"]]},{\"title\":\"变量指定常量\",\"heads\":[\"名字\",\"说明\"],\"rows\":[[\"xlTextQualifierDoubleQuote\",\"双重引用\"],[\"xlTextQualifierDoubleNon\",\"无单引号\"],[\"xlTextQualifierDoubleSingQuo\",\"单重引用\"]]},{\"title\":\"指定FieldInfo变量，XlColumnDataType限制的常量\",\"heads\":[\"名字\",\"说明\",\"名字\",\"说明\"],\"rows\":[[\"xlDMYFormat\",\"DMY日期形式\",\"xlMYDFormat\",\"MYD日期形式\"],[\"xlDMYFormat\",\"DYM日期形式\",\"xlSkipFormat\",\"解析列，没有读入\"],[\"xlEMDYFormat\",\"EMD日期形式\",\"xlTextFormat\",\"原文形式\"],[\"xlGeneralFormat\",\"一般形式\",\"xlYDMFormat\",\"YDM日期形式\"],[\"xlMDYFormat\",\"MDY日期形式\",\"xlYMDFormat\",\"YDM日期形式\"]]}]');
INSERT INTO `t_tips` VALUES ('498', '499', '固定长文件形式的原文文件的打开', 'OpenText方法', 'OpenText方法是原文文件的读入。固定长文件形式是各列的文字列长度是一定的、每一个数据开始的\n位置都是以这里的文件形式设定的。变量DataType指定为xlFixedEidth，可以读入固定长数据。\n关于OpenText方法的其他的变量请参照498页。', 'Sub	Sample499()@            workbooks.OpenText Filename:=ThisWorkbook.Path &amp; \"\\老客户.txt\" _@            , DataType:=xlFixedWidth _@            , FieldInfo:=Array(Array(0, xlGeneralFormat), Array(2, xlTextFormat) _@            , Array(17, xlTextFormat),Array(25, xlTextFormat), Array(55, xlTextFormat))@            <cite>打开固定长原文文件的「老客户.txt」</cite>@            ActiveSheet.Columns(\"A:E\").AutoFit@            <cite>自动调整A-E列的列幅	</cite>@        End Sub', '固定长原文文件的打开。固定长原文文件的打开是变量DataType指定为xlFixedEidth、变量\n                    FieldInfo是用Array函数排列来指定各列的开始位置的信息的。Array函数指定值随Array（开始位置、\n                    数据形式）变化。这是通过Array函数来排列变量FieldInfo的。在这里，第一个文件是通过一般形式\n                    剩下的文件是通过原文形式来读入的。另外，固定长文件形式的数据的第一列的开始位置指定为【0】\n                    还有，2字节数据是按照2个文字计算的。', '/images/zhiku/TipsNO499-001.png', '/images/zhiku/TipsNO499-002.png', '', '', '', '', '', '2017-11-30 14:05:08', null, null, '');
INSERT INTO `t_tips` VALUES ('499', '500', '数值数据与文字数据的变换以及原文文件的打开', 'OpenText方法', 'OpenText方法是读入原文文件。变量FieldInfo是XlColumnDataType使用阶级常量、特定的数据\n形式变换与打开文件才可能。\n关于OpenText方法的其他变量请参照498页。', 'Sub	Sample500()@            workbooks.OpenText Filename:=ThisWorkbook.Path &amp; \"\\老客户名单.txt\" _@                , DataType:=xlDelimited, Comma:=True _@                , FieldInfo:=Array(Array(1, xlTextFormat) _@                , Array(2, xlTextFormat), Array(3, xlSkipColumn) _@                , Array(4, xlTextFormat), Array(5, xlTextFormat))@             <cite>「老客户名单リスト.txt」用指定格式打开</cite>@            ActiveSheet.Columns(\"A:E\").AutoFit@             <cite>自动调整A-E列的列幅</cite>@        End	Sub', '使用OpenText方法，原文文件打开的一端可以设定各列的格式。还有，也可以指定没有读入\n                    的列。变量FieldInfo每一列的读入方法是指定的。在这里、变量DataType指定为xlFixedEidth，\n                    变量FieldInfo指定Array函数，随着Array（列号、数据形式）变化。\n                    于是，第一列的数值以原文形式变换读入、第三列跳着走。', '/images/zhiku/TipsNO500-001.png', '/images/zhiku/TipsNO500-002.png', '', '', '', '', '', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('500', '501', '读入文本文件的数据', 'Open声明/Input声明/Close声明', 'Open声明是，打开指定文本文件。Input 声明是读入数据。Close声明是指关闭指定的文件。\n如果读入文本文件，这个数据流就成为基本。Open声明的指定值，请参照「解说」。', 'Sub	Sample501()@            Dim temp(5) As String@            Dim i As Long, j As Long@            Open ThisWorkbook.Path &amp; \"\\得意先リスト.txt\" For Input As #1@            <cite>用顺序存取输入方式打开「客户名单.txt」</cite>@            Do Until EOF(1)				<cite>到文件的最后反复处理</cite>@                Input #1, temp(0), temp(1), temp(2), temp(3), temp(4), temp(5)@                读入1行6列分的数据@                i = i + 1@                For j = 0 To 5				 <cite>工作表输入各列的数据</cite>@                    Range(\"A1\").Item(i, j + 1).Value = temp(j)@                Next@            Loop@            Close #1			<cite>关闭文件</cite>@            ActiveSheet.Columns(\"A:F\").AutoFit							<cite>A-F列の列幅自动调整</cite>@        End	Sub', '读入「客户名单.txt」文件的数据。用Open声明打开数据，到文件的最后每1行进行处理\n                    EOF函数，用指定了的文件号码的数据到末尾处理前进的话，返回True。用Input声明向排列\n                    读入1行6列分的数据，使用那个排列，输入数据到单元格。\n                        还有，Input声明，被逗号中断了的单位读入用顺序读取输入(Input)方式开了的文件。数据\n                    内的（双重引用）可以无视。', '/images/zhiku/TipsNO501-001.png', '/images/zhiku/TipsNO501-002.png', '关于文件号码', '文件号码，指定已经被使用的号码的话就会发生错误。在那里，使用FreeFile函数取得的是一般值。FreeFile函数，是现在还末使用的文件号码的返回函数。', '', '', '', '2017-11-30 14:05:09', null, null, '[{\"title\":\"Open声明设定的项目\",\"heads\":[\"值\",\"内容\"],\"rows\":[[\"pathname\",\"指定文件名。文件名，也包含盘符的指定。指定表示文件方式和下面的哪个关键\\n                        字Append（追加）\"],[\"mode\",\"Binary(二进制)，Input(顺序存取输入)，Output(随机存取输出)，Random(随机\\n                        存取)。省略的话，文件用随机存取方式被打开。\"],[\"Access\",\"表示对打开的文件进行的处理，指定下面的哪个的关键字\\n                        Read(只读)，Write(写入专用)，或Read Write(读写)\"],[\"lock\",\"对于打开了的文件，其他的流程的访问限制，指定下面的哪个的关键字\\n                        Shared(读写可)，包含Lock Read(念不可)，Lock Write(写入不可)，\\n                        或Lock Read Write(读写不可)\"],[\"filenumber\",\"在1-511范围指定任意的文件号码\"],[\"reclength\",\"指定32.767字节以下的数值。是随机存取文件的情况，表示最大长\\n                        是顺序存取文件的情况，表示paffa的容量\"]]}]');
INSERT INTO `t_tips` VALUES ('501', '502', '每一行文本文件的读入', '每一行文本文件的读入', '每一行文本文件的读入是，使用LineInput声明。LineInput声明是，每1行读入sequential输入方式\n打开了的文本文件，指定了为参数varname的变量代入。', 'Sub	Sample502()@            Dim num As Integer, temp As String@            Dim DataArray As Variant@            Dim I As Long, j As Long@            num = FreeFile				<cite>取得文件号码</cite>@            Open ThisWorkbook.Path &amp; \"\\得意先リスト.txt\" For Input As #num@            <cite>打开「客户名单.txt」</cite>@            Do Until EOF(num)				<cite>文件的末尾反复处理</cite>@                Line Input #num, temp					<cite>读入1行分的数据</cite>@                DataArray = Split(temp, \",\")						<cite>用逗号分割有序的容纳</cite>@                I = I + 1@                For j = 0 To Ubound(DataArray) - 1							<cite>排列的数据数反复处理</cite>@                    Range(\"A1\").Item(I, j + 1).Value = DataArray(j)@                    <cite>在单元格里写入排列好的数据</cite>@                Next@            Loop@            Close #num			<cite>关闭文件</cite>@            ActiveSheet.Columns(\"A:F\").AutoFit							<cite>A-F列的列幅</cite>@        End	Sub', '「客户名单.txt」是用逗号断开了数据的文本文件。这个文件的读入。\n                    使用以FreeFile函数取得了的文件号码，用Open声明打开数据，到文件的最后每1行进行处理。\n                    EOF函数是，指定了的文件号码的数据的末尾处理为True后作为返回值。Line Input声明，向变\n                    量temp读入1行分的数据。把读入了的数据以Split函数形式，用逗号分成了的排列。\n                    这个排列（变量DataArray）值经过圈处理后，分单元格输入。', '', '', '', '', '', '', '', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('502', '503', '用逗号区分工作表的内容写入文本文件', 'Write声明', '工作表的内容每个单元格用逗号区分文本文件的输出，利用Write声明。Write声明，用顺序存取\n输出方式（Outputh和Append）在打开了的文本文件里写入数据。参数filenumber\n参数outputlist，用逗号被断开了文件输出的数据的指定文件号码。', 'Sub	Sample503()@            Dim num As Integer, temp As Range@            Dim I As Long@            Set temp = Range(\"A1\").CurrentRegion								<cite>取得包含单元格A1的范围</cite>@            num = FreeFile					<cite>取得文件号码</cite>@            Open ThisWorkbook.Path &amp; \"\\会員データ.txt\"For Output As #num@            <cite>用输出方式打开会员数据.txt</cite>@            For I = 1 To temp.Row.Count						<cite>处理表的全部的行</cite>@                With temp@                    Write #num, .Cells(I, 1), .Cells(I, 2), .Cells(I, 4) _@                        , .Cells(I, 4, .Cells(I,5)					<cite>写入5队列分的数据</cite>@                End With@            Next@            Close #num			<cite>关闭文件</cite>', '在工作表里，A-E列为止的5分的被数据输入。这个数据从「会员数据.txt」文件输出。Open\n                    声明用输出方式打开文件的时候，没有符合的文件，自动的制作那个文件。\n                     取得CurrentRegion包含单元格A1的输出的范围的属性，圈处理，使用write声明在文件里\n                    写入全部的行的数据再者，使用Write声明写入了的值，自动的「\"(dapurukwoteshon)」\n                    围着(但是，日期数据是在【#】范围内的）。', '', '', '', '', '', '', '', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('503', '504', '以行为单位在文本文件里写入工作表的内容', 'Print声明', '利用Print声明在文本文件里要写入工作表的内容，Print#声明，用顺序存取的输入方式\n在(OutPut又Append)开了的文件里写入数据。', 'Sub Sample504()@            Dim num As Integer@            Dim temp As Variant@            Dim I As Long@            temp = Range(\"A1\").CurrentRegion.Value@            <cite>把包含单元格A1在内范围的值做为变量temp排列代入</cite>@            num = FreeFile				<cite>取得文件号码</cite>@            Open ThisWorkbook.Path &amp; \"\\報告.txt\" For Output As #num@            　<cite>用顺序存取的输出方式打开「￥报告.txt」文件</cite>@            For I = 1 To Ubound(temp)@                Print #num,Join(Application.WorksheetFunction.Index(temp, i), \",\")@                　<cite>用逗号分割段落的数据作成各行的值，从文本文件输入</cite>@            Next@            Close #num			　<cite>关闭文件</cite>@        End Sub', '文本文件输出工作表内容。用逗号分隔段落输出全部的行的数据。在这里，一旦变量temp\n                    有序，就代入包含单元格A1的单元范围。以FreeFile函数取得文件号码，用Open声明打\n                    开「报告.txt]文件。\n                     使用圈处理，顺序处理全部的行。Print声明1行的数据写入。在那里，使用Index函数从\n                    排列1行里抽出排列，也要使用Join函数，逗号断开作成1行分的数据.', '', '', '', '', '', '', '', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('504', '505', '从指定的文件文本里读出数据', 'Seek 声明', 'Seek的声明是、 在Open声明后添加需要打开的文本、根据注释说明的位置上添加需要读出\n的文本的位置。在变量position添加开始的位置。指定内容的值可以是1～2147483647之间的数。值\n是、打开文本的Random方式以外场合的字节的位置、Random方式的场合则变成记录的位置在变量\nposition的位置添加指定写入的文本的结尾后面的行号，这样就可以向文本的结尾添加数据。', 'Sub Sample505()@            Dim buf As String@            Dim num As lnteger@            num = Freefile				<cite>#取得文本的编号</cite>@            Open ThisWorkbook.Path &amp; \"\\Data.txt\" For lnput As # num@            <cite>#Data.txt 使用输入方式打开文本</cite>@            Seek #num,    5 				<cite>#从第5个字节位置开始</cite>@            lnput #num,   buf				<cite>#读出参数buf的数据</cite>@            Close #num			<cite>#打开文本</cite>@            MsgBox \"读出的值: \" &amp; buf@        End Sub', '从指定的位置开始读出数据。Seek声明是、指定数据的读出和写入的位置的字节数。在这里、\n指定开始文本「Data.txt」的5字节数的位置。再这之后、读出在lnput声明的参数buf的数据。最后、弹\n出读出数据的消息框。', '/images/zhiku/TipsNO505-001.png', '/images/zhiku/TipsNO505-002.png', '', '', '', '(指定的位置开始读出文件)', '(读出指定位置以后的数据)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('505', '506', '从指定的文件文本里写入数据', 'Put 声明', 'Put的声明是、向文本中写入指定的值。变量filenumber、可以指定任意的文本编号。打开的文本\n是Random方式，还是Binary方式。变量recnumber可能省略。指定写入开始记录的编号(Random方式时)\n或者字节位置(Binarｙ方式)。用变量varname指定写入的需要保存的变量的名字。', 'Sub Sample506()@            Dim num As lnteger@            num = Freefile					<cite>#取得文本编号</cite>@            Open ThisWorkbook.Path &amp; \"\\Data.bat\" For Binary As # num@            <cite>#Data.dat 文本以字节方式打开</cite>@            Put #num,5,\"abc\"					<cite>#在第5个字节以后添加[abc]</cite>@            Close #num				<cite>#关闭文本</cite>@        End Sub', '在这里，向文件[Data.dat]写入文字列[abc]。指定写入的位置是第五个字节。使用Put声明写入\n数据的时候，指定必须位置有数据。', '/images/zhiku/TipsNO506-001.png', '/images/zhiku/TipsNO506-002.png', '', '', '', '(向文件里写入数据)', '(数据已经写入文件里了)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('506', '507', '快速读出文本文件', 'Get 声明/Split函数', 'Get 声明的作用是读出文件的数据。使用变量filenumber指定任意的文件编号。使用Random\n方式或者Binary方式是打开文件必要的方式。变量recnumber可能是省略的。指定读出是以记录编\n号的方式(Random方式时)或者字节位置的方式(Binary方式时)读出。指定变量varname接收读出\n                的数据。\n	Split函数，用参数expression指定字符串变量delimiter指定分割符分割成若干字符串，组成数\n组并返回数组。 详细内容请参照Tips091。', 'Sub Sample507()@            Dim num As lnteger@            Dim buf() As Byte@            Dim DataList As Variant, temp As Variant , Data() As Variant@            Dim RowNum As Long@            Dim i As Long , j As Long@            num = FreeFile@            Open ThisWorkbook.Path &amp; \"\\Data.csv\" For Binary As # num@            <cite>#使用二进制方式打开文件Data.csv</cite>@            Redim buf(1 To LOF(num))@            <cite>#取得文件的长度，用于确保变量buf的长度足够大		</cite>@            Get #num, , buf				<cite>#从文件中读出变量buf 的值</cite>@            Close #num			<cite>#关闭文件</cite>@            DataList = Split(StrConv(buf , vbUnicode), vbCrLf)@            <cite>#读出数据并换行，根据法则分隔，放入数组里。</cite>@            <cite>#数组每行有数据	</cite>@            RowNum = UBound(DataList)						<cite>#取得数据的行数</cite>@            For i = 1 To RowNum					<cite>#根据数据的行数反复进行处理</cite>@                temp = Split(DataList(i - 1), \", \")@                <cite>#对1行的数据使用逗号分割后放入数组</cite>@                ReDim Preserve Data(1 To RowNum, 1 To UBound(temp) + 1)@                <cite># 变更数组Data的因子数</cite>@                For j = 1 To Ubound(temp) + 1							<cite>#处理每1行数据</cite>@                    Data(i , j ) = temp(j - 1)					<cite>#将数据放入数组</cite>@                Next@            Next@            Range(\"A1\").Resize(Ubound(Data), UBound(Data, 2)).Value = Data@            <cite>#将数据写入单元格</cite>@        End Sub', '在这里，快速读出文件「Data.csv」、展现工作表。\n                    对于VBA的处理，单元格访问次数少比较好。在那里使用数组对工作表.csv文件进行转记\n                储存，仅仅使用1次处理数据就能完成转记。\n                    首先，使用Get声明将文件「Data.csｖ读出数据存储到变量buf中。Get声明指定读出数据存\n                储到变量buf中。这时，事先使用LOF函数确定文件的数据的大小。使用Get声明不能求出数据的\n                大小。因此这个处理是必要的。\n                    接下来，使用Split函数，将读出数据分割放入数组中。\n                    接下来，对应取得各行的数据，这次是以逗号为分割符进行分割。1行的1个单元格存储一\n                个分割后的数据。使用数组变量Data存储。\n                    最后，数组变量Data的值在单元格A1之后粘贴。这时，在单元格范围内使用属性Resize粘\n                贴之前获得的数组变量Data的值。', '/images/zhiku/TipsNO507-001.png', '/images/zhiku/TipsNO507-002.png', '', '', '', '(快速读出.csv文件里的数据)', '(.csv文件中的数据已经读出来了)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('507', '508', '启动其他应用软件', 'Shell 函数', '利用VBA执行外部程序，利用Shell函数。Shell函数是返回执行程序的程序的任务lD(内部处理\n                形式Douｂle的Variant型)的值。 执行时发生问题的场合返回 [0] 。关于Shell函数指定的值请参照\n                [说明] 。', 'Sub Sample508()@            Shell pathname:=\"Notepad.exe\",windowstyle:=vbMaximizedFocus@            <cite>#启动记事本</cite>@        End Sub', '在这里、使用Shell函数启动最大化表示的记事本。记事本的执行整理是「Notepad.exe」。 指定\n                    Shell函数值和指定变量windowstyle值是下面的样子。', '', '', '', '', '', '', '', '2017-11-30 14:05:09', null, null, '[{\"title\":\"设置Shell函数的值、\",\"heads\":[\"值\",\"内容\"],\"rows\":[[\"pathname\",\"指定不同类型的值。执行程序的必要的参数、也是指定命令列的开关。\"],[\"windowstyle\",\"执行对应程序的窗口的形式指定 不同类型的值。\\n                        如果省略的话，程序是保持最小化的焦点状态执行。\"]]},{\"title\":\"设置参数windowstyle\",\"heads\":[\"定数\",\"内容\"],\"rows\":[[\"vbHide\",\"保持焦点，窗口非表示\"],[\"vbNormalFocus\",\"保持焦点，复原窗口大小和位置\"],[\"vbMinimizeFocus\",\"保持焦点，窗口最小化表示\"],[\"vbMaximizeFocus\",\"保持焦点，窗口最大化表示\"],[\"vbNormalNoFocus\",\"最后关闭窗口的时候，复原窗口大小和位置不保持焦点\\n                        现在活跃的窗口变成从前活跃的窗口。\"],[\"vbMinimizedNoFcous\",\"不保持窗口最小化表示。\\n                        现在活跃的窗口变成从前活跃的窗口。\"]]}]');
INSERT INTO `t_tips` VALUES ('508', '509', '操作其他应用程序按键编码', 'SendKeys 方法', 'SendKeys方法是、转发积极的应用程序的按键编码。引数Keysに Alt 键和 Ctrl 键、 Shift 键\n  可能组合在一起。 比如， 指定文字「a」的表面记载方式是「\"a\"」。 再比如说， Enter 键的表面记\n  载是「｛ENTER｝」。', 'Sub Sample509()@            Range(\"A1\").CurrentRegion.Copy								<cite>#复制单元格A1的包含范围</cite>@            shell pathname:=\"mspaint.exe\",windowstyle:=vbNormalFocus@            <cite>#启动画图</cite>@            Application.Wait Now + TimeValue(\"00:00:05\")@            <cite>#等待5秒钟</cite>@            SendKeys \"^v\", True						<cite>#使用[Ctrl]键+[v]粘贴</cite>@        End Sub', '在这里复制单元格A1的包含范围、启动画图进行粘贴。使用Shell函数启动画图后，使用Wait\n方法，等待5秒后进行中断。这是启动画图前躲避键盘因发送的消息造成的影响。\n	再那之后，使用Ctrl 键+ v 键 将数据粘贴。\n	指定为SendKeys方法的值，指定的按键表示的编如下。', '/images/zhiku/TipsNO509-001.png', '/images/zhiku/TipsNO509-002.png', '', '', '', '(启动画图软件，将数据粘贴)', '(启动画图软件，数据粘贴完成)', '2017-11-30 14:05:09', null, null, '[{\"title\":\"指定SendKeys方法的值\",\"heads\":[\"String\",\"转发表示按键编码的指定文字列\"],\"rows\":[[\"pathname\",\"指定不同类型的值。执行程序的必要的参数、也是指定命令列的开关。\"],[\"wait\",\"到处理结束为止，指定一段时间后中断执行。指定值是FaIse，等待按键操作的结束\\n                        后，释放键盘的控制权。\"]]},{\"title\":\"表示按键的编码\",\"heads\":[\"按键\",\"编码\"],\"rows\":[[\"BackSpace\",\"{BACKSPACE}、{BS}、或者{BKSP}\"],[\"Ctrl+Break\",\"{BREAK}\"],[\"CapsLock\",\"{CAPSLOCK}\"],[\"Del或者Delete\",\"{DELETE}或者{DEL}\"],[\"↓\",\"{DOWN}\"],[\"End\",\"{END}\"],[\"Enter\",\"{ENTER}或者｛¯｝\"],[\"Esc\",\"｛ESC}\"],[\"Help\",\"{HELP}\"],[\"Home\",\"{HOME}\"],[\"ins 或者lnsert\",\"{lNSERT}或者｛lNS}\"],[\"←\",\"{LEFT}\"],[\"NumLock\",\"{NUMLOCK}\"],[\"PageDown\",\"{PGDN}\"],[\"PageUp\",\"{PGUP}\"],[\"PrintScreen\",\"{PRTSC}\"],[\"→\",\"{RlGHT}\"],[\"ScrollLock\",\"{SCROLLLOCK}\"],[\"Tab\",\"{TAB}\"],[\"↑\",\"{UP}\"],[\"F1～F16\",\"{F1}～{F16}\"],[\"Shift\",\"+\"],[\"Ctrl\",\"^\"],[\"Alt\",\"%\"]]}]');
INSERT INTO `t_tips` VALUES ('509', '510', '使用其他应用软件', 'CreateOｂject 関数', 'CreateOｂject函数能自动启动其他的对应应用软件。', 'Sub Sample510()@            With  CreateObject(\"Word.Application\")@            <cite>#作成Word </cite>@                .Visible = True				<cite>#表示Word	</cite>@                .Documents.Add				<cite>#作成新的文件夹	</cite>@            End With@        End Sub', '使用CreateObject函数启动Word。利用CreateObject函数对Word那个应用软件的ActiveX对\n                    象进行参照设定。  参照设定是从VBE的[工具]菜单开始在[参照设定]里利用程序库进行确认 。\n                    Word2013的场合变成「Microsoｆt Word 15.0 Object Library」。', '/images/zhiku/TipsNO510-001.png', '/images/zhiku/TipsNO510-002.png', '', '', '', '(启动Word软件)', '(Word的启动完成了)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('510', '511', '查参正在启动的应用程序', 'GetObject 函数', '利用GetObject函数，能够查看到正在启动的应用程序。指定GetObject函数的值，关于变量\nClass的指定方法请参照「解説」。', 'Sub Sample511()@            With CreateObject(\"Word.Application\")@             <cite>#启动Word</cite>@                .Visible = True					 <cite>#表示Word启动了</cite>@                .Documents.Add					 <cite>#制作新的文件</cite>@            End With@            With GetObject(, \"Word.Application\")@             <cite>#查参正在启动的应用程序	</cite>@                .Selection.Font.Size = 15						 <cite>#设定字体大小为15个百分点</cite>@                .Selection.typetext Text : = \"Microsoft Word\"@                 <cite>#输入Microsoft Word</cite>@            End With@        End Sub', '在这里，使用CreateObject函数启动了Word，使用ＧetOｂject函数改变取得的字符串「Mi\n                        crosofft Word」为15百分点的大小的文字，然后进行输入。\n                            指定GetObject函数的值是下面的样子', '/images/zhiku/TipsNO511-001.png', '/images/zhiku/TipsNO511-002.png', '', '', '', '(启动Word，输入字符串)', '(字符串输入完成)', '2017-11-30 14:05:09', null, null, '[{\"title\":\"指定GetObject函数的值\",\"heads\":[\"值\",\"说明\"],\"rows\":[[\"PathName\",\"可能省略。全路径指定需要取得的文件名。\\n                        如果省略了PathName，Class不能省略。\"],[\"Class\",\"如果PathName被省略，必定指定该属性。\\n                        指定表示客观的类的字符串。\"]]}]');
INSERT INTO `t_tips` VALUES ('511', '512', '新建Word文件', 'CreateObject 函数', 'CreateObject函数能启动对应自动化以外的应用程序。', 'Sub	Sample512()@            With  CreateObject(\"Word.Application\")								<cite># 启动Word</cite>@                .Documents.Add				<cite># 追加文档</cite>@                .Visible = True				<cite># 表示启动了的Word</cite>@                .Activate			<cite># 激活Word</cite>@            End  With@        End  Sub', '启动Word，追加新文档。使用Add方法追加文档。然后，为了把用CreateObject函数启动\n了的应用软件变成非表示，把Visible属性设为True,表示Word。最后，激活用Activate方法启动\n了的Word。', '/images/zhiku/TipsNO512-001.png', '/images/zhiku/TipsNO512-002.png', '进行参照设定启动Word', '进行参照设定要启动Word，在【Microsoft Word xx Object Library】里参照设定(「xx」的部分根据版本不同)，像下记那样。', 'Sub  Sample512_2()@                        With New Word.Application@                            .Documents.Add@                            .Visible = True@                            .Activate@                        End  With@                    End  Sub', '(启动Word作成新文件)', '(文件被作成了)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('512', '513', '在Word中追加字符串', 'CreateObject 函数', 'CreateObject函数能启动对应自动化以外的应用程序。', 'Sub	Sample513()@            Dim WordApp As Object@            Set WordApp = CreateObject(\"Word.Application\")									<cite># 启动Word</cite>@            WordApp.Documents.Open(ThisWorkBook.Path &amp; \"\\WordSample.docx\") _@                .Content.InsertAfter \"end of doc\"@            <cite># 打开WordSample.docx、在文档的最后追加字符串</cite>@            WordApp.Visible = True					<cite># 显示Word文档</cite>@        End  Sub', '这里，打开【WordSample.docx】，在文档末尾追加字符串【end of doc】。使用\n                    CreateObject函数启动Word，用Open方法打开已经存在的文档。用InsertAfter方法在末\n                尾追加指定的字符串\n                    最后显示Word文档', '/images/zhiku/TipsNO513-001.png', '/images/zhiku/TipsNO513-002.png', 'Set声明', '这里，启动了的Word应用程序使用Set声明给object变量赋值。应用程序启动后，进行别的处理的场合，像这样变量代入一次的话后面的记述变得轻松。', '', '(打开存在的文档，追加字符串)', '(字符串被追加)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('513', '514', 'Excel中的表粘贴到Word', 'Paste 方法', '利用Paste方法，把Excel中的表粘贴到Word。利用Paste方法的场合，Excel中的表\n作为Word中的表粘贴。', 'Sub	Sample514()@            Dim WordApp As Object@            Dim WordDoc As Object@            Range(\"A1\").CurrentRegion.Copy							<cite># 复制包含单元格A1的范围</cite>@            Set WordApp = CreateObject(\"Word.Application\")									<cite># 启动Word</cite>@            WordApp.Visible = True					<cite># 表示Word</cite>@            Set WordDoc = WordApp.Documents.Open _@                (ThisWorkBook.Path &amp; \"\\WordSample.docx\")									<cite># 打开WordSample.docx</cite>@            With WordDoc@                .Range(.Range.End-1).Paste							<cite># 粘贴到文档的末尾</cite>@            End  With@        End  Sub', 'Excel中的表粘贴到Word文件中。这里，打开包含单元格A1的表粘贴到【WordSample.docx】\n文档的末尾，使用CreateObject函数启动Word应用程序，用Open方法打开文档。使用Range对象\n和End属性取得文件的末尾位置，用Paste方法粘贴。', '/images/zhiku/TipsNO514-001.png', '/images/zhiku/TipsNO514-002.png', '', '', '', '(打开Word文件，在末尾粘贴表)', '(Excel中的表被粘贴)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('514', '515', '把Excel图表粘贴到Word中', 'CopyPicture方法', '使用CopyPicture方法，把Excel表格作为图片进行复制。\n因为和Word的Paste方法组合使用，Excel中图表能够作为图片粘贴到Word中。', 'Sub Sample515()@            Dim WordApp As Object@            Dim wordDoc As Object@            Worksheets(1).ChartObjects(1).CopyPicture@            <cite>#复制Excel的中图表作为图片</cite>@            Set WordApp = CreateObject(\"Word.Application\")@            <cite>#启动Word</cite>@            WordApp.Visible = True         <cite>#表示Word</cite>@            Set WordDoc = WordApp.Documents.Open@                (ThisWorkbook.Path &amp; \"\\WordSample.docx\")@            <cite>#打开WordSample.docx</cite>@            With WordDoc@                .Range(.Range.End - 1).Paste@                <cite>#在文件的末尾粘贴图片</cite>@            End  with@        End　Sub', '把Excel中的图表作为图片粘贴到Word文件中。打开【WordSample.docx】文件，将图片粘贴到文本的\n末尾。先将【Sheet1】中的图表作为图片复制。以CreateObject函数启动Word，用Open方法打开文件。使用\nRange对象和End属性取得文件的末尾，之后用Paste方法粘贴。', '', '', '', '', '', '', '', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('515', '516', '作成新幻灯片', 'CreateObjet函数', 'CreateObject函数，能自动控制并启动除了对应了以外的应用软件。', 'Sub Sample516()@                With  CreateObject(\"PowerPoint.Application\")@                    <cite>启动PowerPoint</cite>@                    .Presentations.Add          <cite>#新规</cite>@                    .Visible = True               <cite>#表示PowerPoint</cite>@                End  with@            End Sub', '启动PowerPoint，用Add方法新规PowePoint。之后，用Visible属性表示PowerPoint。', '/images/zhiku/TipsNO516-001.png', '/images/zhiku/TipsNO516-002.png', '设定参照', '进行设定参照要启动PowePoint，在\n            「Microsoft PowerPoint xx Object Library」\n            中进行设定(根据「xx」的部分幅度不同)，\n            下面是例子。', 'Sub Sample516 2()@                            With New PowerPoint.Application@                                .Presentations.Add@                                .Visible = True@                            End With@                        End Sub', '(作成新PowerPoint)', '(PowerPoint新建完成)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('516', '517', '开始PowerPoint的幻灯放映', 'Run方法', 'Run方法是object指定SlideShowSettings目标物对象，才能开始PowerPoint的幻灯放映。', 'Sub Sample517()@            With CreateObject(\"PowerPoint.Application\")@            　<cite>启动PowerPoint</cite>@                .Visible = True				　<cite>PowerPoint的表示</cite>@                .Presentations.Open _@                    (ThisWorkbook.Path &amp; \"\\PowerPointSample.pptx\") _@                        .SlideShowSettings.Run@                　<cite>打开PowerPointSample.pptx，开始幻灯放映</cite>@            End With@        End Sub', '运行PowerPoint的幻灯放映。用CreateObject函数启动PowerPoint。表示了PowerPoint之后，\n用Open方法打开「PowerPointSample.pptx」，用Run方法运行幻灯放映。', '/images/zhiku/TipsNO517-001.png', '/images/zhiku/TipsNO517-002.png', '', '', '', '(PowerPoint幻灯放映运行前)', '(开始幻灯放映)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('517', '518', '把Excel的图表粘贴到PowerPoint里', 'Paste方法', '在Excel里作成的图片，是能够粘贴到PowerPoint里的，图片粘贴，\n应该是用Paste方法', 'Sub Sample518()@            Dim pptApp As Object@            Worksheets(\"Sheet1\").ChartObjects(1).CopyPicture@            <cite>#图表作为图片复制</cite>@            Set pptApp = CreateObject(\"PowerPoint.Application\")@            <cite>#PowerPoint启动</cite>@            With pptApp@                With.Presentations.Add							<cite>#追加ppt</cite>@                    .Slides.Add(Index:=1,Layout:=12) _@                        .Shapes.Paste					<cite>#追加空的ppt，粘贴图表</cite>@                End With@                .Visible = True							<cite>#表示PowerPoint</cite>@            End With@        End Sub', '在PowerPoint里粘贴Excel的图表。CopyPicture方法复制了作为图的指定的对象。\n在这里，「Sheet」当前运行页的图表作为图片粘贴。然后，以CreateObject\n函数启动PowerPoint，追加演示，更加追加幻灯片。在追加的幻灯片里，\n使用Paste方法粘贴', '/images/zhiku/TipsNO518-001.png', '/images/zhiku/TipsNO518-002.png', '', '', '', '', '', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('518', '519', 'Outlook原来发送Excel的住址名簿邮件', 'Createltem方法', '制作Outlook的条款。指定「O」为参数的话，制作邮件条款。', 'Sub Sample519()@        　　Dim olApp As Object@            Dim MailItem As Object@            Set olApp = CreateObject(\"Outlook.Application\")@                <cite>#启动outlook</cite>@            Set MailItem = olApp.CreateItem(0)        <cite>#制作邮件条款</cite>@            With MailItem@               .Recipients.Add(Range(\"B2\").Value).Type=1@               <cite>#「To」指定行B2的值</cite>@        　　　　.Subject = ”报告”　　　　　　　 <cite>#指定标题	</cite>@        　　　　.Body = Range(\"A2\").Value &amp;  \"先生\" &amp; vbCrLf _@                     &amp; ”多谢关照。请让我做前几天的报告”@                <cite>#与行A2的值(姓名)指定为本文文章</cite>@               .Send          <cite>#发送邮件</cite>@        　　　End　with@        End  Sub', 'Outlook发送邮件。这个时候、利用被Excel输入的邮件地址和姓名。\n　以CreateObject函数启动Outlook，用Createltem方法作成邮件条款。\n　Recipients属性对邮件的「To」，指定行B2价值。\n        同时，指定Body属性邮件的本文Subject属性邮件的标题。\n        在最后时，用Send方法发送邮件。再者，实行结果的图，表示着代替\nSend方法使用Display方法，制作了的邮件', '/images/zhiku/TipsNO519-001.png', '/images/zhiku/TipsNO519-002.png', '添加文件', '要添加文件，Attachments属性指定文件,请把下面的样品做为参考。', 'Sub Samle519_2()@                      Dim olApp As Object@                      Dim MailItem As Object@                        Set olApp = CreateObject _@                              (\"Outlook.Application\")@                        Set MailItem = _@                              olApp.CreateItem(0)@                        With MailItem@                              .Recipients.Add@                                  (Range(\"B2\").Value) _@                              .Type = 1@                              .Subject = \"报告\"@                              .Body = Range(\"A2\").Value _@                                &amp;  \"方法\" &amp; vbCrLf _@                                &amp;  \"关照\" &amp; vbCrLf _@                                &amp;  \"前几天的报告\" &amp; vbCrLf _@                                &amp;  \"请让我做\" &amp; vbCrLf _@                           .Attachments.Add _@                           ThisWorkbook.Path _@                                &amp;  \"VSamｐle5119\" &amp; vbCrLf _@                           .Send@                        End With@                    End Sub', '', '', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('519', '520', 'WorkSheet上作成接收邮件预览', 'GetNamespace方法', 'GetNameSpace方法，取得指定了的名字空间。为了取得接收邮件指定「MAPI」。', 'Sub Sample520()@        　　　Ｄim vOurlook As Object, vNamespase As Object, vFolder As Object@             Dim I As Long@             Set vOutlook = Createobject(\"Outlook.Application\")@             <cite>#启动Outlook</cite>@             Set vNamespase = vOutlook.GetNamespace(\"MAPI\")　　　　　<cite>#取得名字空间</cite>@             Set vFolder = vNamespase.PickFolder　　　　　<cite>#选择对象文件夹</cite>@                  For i = 1 To vFolder.Items.Count@             <cite>#对对象文件夹内的全部的条款进行处理</cite>@                  If vFolder.Items(i).class = 43 Then　　　　　　　<cite>#是邮件条款的情况的处理</cite>@                      Cells(i+1,1).Value = vFolder.Items(i).SenderName@                      <cite>#转记发送的人的名字</cite>@                      Cells(i+1,2).Value = vFolder.Items(i).Subject@                      <cite>#转记邮件的标题</cite>@                      Cells(i+1,3).Value = vFolder.Items(i).ReceivedTime@                      <cite>#转记接收日期和时间</cite>@                      Cells(i+1,4).Value = vFolder.Items(i).Body@                      <cite>#转记本文</cite>@                  End If@              Next@        End  Sub', '在这里，工作单转记Outlook指定了的文件夹内的邮件的内容。\n                        表示用 PickFolder方法选择对象文件夹的对话框。把如果文件夹选择了，\n                    　那个文件夹内的「发送社名」「标题」「接收日期和时间」「本文」做为\n                    　工作单输入。', '', '', '', '', '', '', '', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('520', '521', '印刷Access的报告', 'OpenReport方法', '由于利用Access的OpenReport方法，从Excel能印刷预览Access的报告。参数reportname参数veiw指定对象的报告对象的名字', 'Sub Sample521()@        　　　With CreateObject(\"Access.Application\")@              <cite>#启动Access</cite>@                    .OpenCurrentDatabase ThisWorkbook.Path &amp; \"\\顾客数据.accdb\"@                    <cite>#打开顾客数据.accdb</cite>@                    .Visible = True           <cite>#表示Access</cite>@                    .DoCmd.OpenReport \"R_顾客名单\",　 2           <cite>#预览报告</cite>@             End With@        End  Sub', '由于印刷预览表示Access的报告。以CreateObject函数启动Access，\n    用OpaneCurrentDatbase方法打开对象的Access文件。把Visible属性\n　做为True用表示后OpenReport方法打开Access「R_顾客名单」报告。', '/images/zhiku/TipsNO521-001.png', '/images/zhiku/TipsNO521-002.png', '印刷报告', '实际要1印刷报告，省略方法的第2号的参数。', '', '(印刷preview-做Access的报告)', '(印刷preview-画面被表示了)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('521', '522', '启动浏览器，表示home页', 'Navigate方法', '能表示使用Internet Explorer的Navigate方法的话，指定的URL。', 'Sub Sample522()@        　　　With CreateObject(\"InternetExplorer.Application\")@              <cite>#启动Internet Explorer</cite>@                    .Navigate \"http://www.asp.net/\"@                    <cite>#指定的URL调动</cite>@                    .Visible = True           <cite>#表示Internet Explorer</cite>@             End With@        End  Sub', '启动Internet Explorer，表示「http://www.asp.net」', '/images/zhiku/TipsNO522-001.png', '/images/zhiku/TipsNO522-002.png', '参照设定操作', '参照设定操作的地方，使用「Microsoft internetControls」', '', '(启动Internet Explorer)', '(Internet Explorer启动指定的网站被表示了)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('522', '523', '取得实行中的主页的链接', 'Document属性', '利用Internet Explorer对象的Document属性的话， 能取得主页的HTML要素访问信息。链接的信息，Link对象的herf属性取得。', 'Sub Sample523()@             Dim objIE　As Object@             Dim temp　As Object@             Dim i　As Long@             i = 1@             Set objIE = CreateObject(\"InternetExplorer.Application\")@            <cite>#启动Internet Explorer</cite>@             With objIE@                   .Navigate \"http://www.shuwasystem.co.jp/\"@                   <cite>#指定了的URL移动</cite>@                    .Visible = True　　　　　　　<cite>#表示Internet Explorer</cite>@                    Do While .Busy Or .ReadyState &lt;&gt; 4    　　<cite>#到读入结束等候</cite>@                    Loop@                    If  TypeName(.Document) = \"HTMLDocument\" Then@                      <cite>#表示了的URL的内容是不是HTMLDocument的检查</cite>@                           Range(\"A\" &amp; i).Value = .Document.Title@                           <cite>#输入标题</cite>@                           i = i + 1@                           For Each temp In .Document.Links@                           <cite>#对全部的链接进行处理</cite>@                                If temp.innerText &lt;&gt; \"\" Then@                                      Range(\"B\" &amp; i).Value = temp.innerText@        　　　　　　　　　　　　　　　　<cite>#B列输入被链接设定的字符串</cite>@                                      Range(\"C\" &amp; i).Value = temp.href@              　　　　　　　　　　　　　<cite>#C列输入链接的URL</cite>@                                      i = i + 1@                                End If@                           Next@                      End If@             End With@        End  Sub', '使用CreateObject函数启动Internet Explorer，表示用Navigate方法指定的URL。在这里，\n　到为了这个以后的处理的，读取完成进行着圈处理。Internet Explorer对象的Busy属性， Internet\n    Explorer是busy状态的时候返回「True」。同时，ReadyState属性的读入完成的话，返回4。利用\n                这个、 进行读取完成判定。\n　     此后，URLinnerText属性被链接设定的字符串，取得href属性被链接设定的，输入到各自单元格。', '/images/zhiku/TipsNO523-001.png', '/images/zhiku/TipsNO523-002.png', '', '', '', '(取得指定了的URL的链接)', '(链接取得之后)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('523', '524', '与XMLspread sheet 做保存', 'SaveAs方法', '使用SaveAs方法的话，能安上名字保存书。这个时候，参数FileFormat能指定xlXMLSpreadsheet的话\n            ，以XMLspread sheet形式保存', 'Sub Sample524()@        　　　Worksheets(\"Sheet1\").SaveAs Filename:=ThisWorkbook.Path _@                    &amp; \"\\Spreadsheet.xml\", FileFormat:=xlXMLSpreadsheet@             <cite>#把sheet1作为XMLspread sheet保存</cite>@        End  Sub', '使用SaveAs方法，作为spread sheet保存「Sheet1」工作单', '/images/zhiku/TipsNO524-001.png', '/images/zhiku/TipsNO524-002.png', 'XMLspread sheet形式', '文本编辑器打开，编辑内容以XMLspread\n            sheet形式保存，但那个情况，得需要XML\n            标记的知识，再者，XMLspreadsheet形式，\n            图表和图形等不被保存。', '', '', '', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('524', '525', '打开XML Spread的sheet', 'OpenXML方法', '利用OpenXML方法，能打开XML数据文件。', 'Sub Sample525()@            Workbooks.OpenXML Filename:=ThisWorkbook.Path &amp;\"\\Spreadsheet.xml\"@            <cite>#打开SpreadsheetSample.xml</cite>@        End Sub', '打开文件[SpreadsheetSample.xml]', '', '', '在Excel编辑XML文件的限制', '在Excel编辑XML文件的时候、有几个限制\n            \n                \n                    功能\n                    说明\n                \n                \n                    分析功能的箭形符号\n                    不被保持\n                \n                \n                    图表和其他的客观图解\n                    不被保持\n                \n                \n                    用户设计视图\n                    不被保持\n                \n                \n                    数据的合并\n                    不被保持\n                \n                \n                    绘画客观的重叠顺序\n                    参照不被保持\n                \n                \n                    list\n                    参照不被保持\n                \n                \n                    概要\n                    List功能丢失、数据被保持\n                \n                \n                    密码的设置\n                    密码保护工作单的数据不能保存\n                \n                \n                    脚本\n                    不被保持\n                \n                \n                    共有的情报\n                    不被保持\n                \n                \n                    用户定义的函数\n                    不被保持\n                \n                \n                    小计\n                    数值和计算被保持，功能不被保持\n                \n                \n                    Visual Basic for Applications object\n                    不被保持', '', '', '', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('525', '526', '从Excel中连接/解除数据库', 'Open方法/Close方法', 'Open方法，object指定Connection客观的事，能连接为数据库。解除跟Close指定了的Connection客观的连接。', 'Sub Sample526()@               Dim cn As Object@               Set cn = CreateObject(\"ADODB.Connection\")@               <cite>#制作ConnectionOB年度</cite>@            　cn.Open _@                         \"Provider=Microsoft.ACE.OLEDB.12.0;\" &amp; _@                         \"Data Source= \" &amp; ThisWorkbook.Path &amp; \"￥顾客数据.accdb;\"@               <cite>#打开「顾客数据.accdb」数据库	</cite>@        　　　MsgBox \"「顾客数据.accdb」的连接。\"　＆　vbCrLf  &amp; _@                        \"单击[OK]按钮的话，切断连接\"@        　　　　<cite>#显示消息</cite>@        　　　　cn.Close　　<cite>#关闭连接</cite>@        End Sub', '在这里连接到「顾客数据.accdb」文件。因为只是连接，画面上特别没有变化。请理解为对待数据库的基础理解。', '/images/zhiku/TipsNO526-001.png', '/images/zhiku/TipsNO526-002.png', 'Access2003和那个以后的版本', 'Access2003和那个以后的版本，连接的字符串是变化着的。从Access2003，ACE数据库引擎重新采用了。\n            为此，连接的字符串是变化着的。是Access2003的情况时，Provider指定的文字 列是「Microsoft.Jet.OLEDB.4.0;」。\n            来自Access2003的转移的时候需要注意。', '', '(连接到数据库)', '(连接了到数据库)', '2017-11-30 14:05:09', null, null, '[{\"title\":\"指定为Open方法的价值\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"ConnectionString\",\"省略可能。连接指定信息\"],[\"UserID\",\"省略可能。确立连接的时候指定使用的用户注册名\"],[\"UserID\",\"省略可能。确立连接的时候指定使用的用户注册名\"],[\"Password\",\"省略可能。确立连接的时候指定使用的口令\"],[\"Option\",\"省略可能。这个方法，指定连接确立之后(同期)和被确立之前(异步)的哪个决定结束的ConnectOptionEnum值\"]]},{\"title\":\"指定为参数ConnectionString的价值\",\"heads\":[\"参数\",\"说明\"],\"rows\":[[\"Provider\",\"\"],[\"File Name\",\"\"],[\"Remote Provider\",\"只指定打开客户方面的连接的时候使用的服务提供商名(RDS )\"],[\"Remote Server\",\"只指定打开客户方面的连接的时候使用，服务器的传递(RDS )\"],[\"URL\",\"作为文件和目录等模板来识别绝对作为URL指定连接字符串\"]]}]');
INSERT INTO `t_tips` VALUES ('526', '527', '取得数据库的数据', 'Open方法', '利用 Open方法，能取得数据库的数据。数据库连接，获取记录组，能够读入每个字段的数据。再者，关于Open方法指定的值，请参照Tip526。', 'Sub Sample527()@               Dim cn As Object@               Dim rs As Object@               Set cn = CreateObject(\"ADODB.Connection\")@               <cite>#制作Connection对象</cite>@               Set rs = CreateObject(\"ADODB.Recordset\")@        　　　<cite>#制作Recordset对象</cite>@               cn.Open _@                      \"Provider=Microsoft.ACE.OLEDB.12.0;\" &amp; _@                      \"Data Source=\" &amp; ThisWorkbook.Path &amp; \"\\顧客データ.accdb;\"@        　　　<cite>#连接到「顾客数据.accdb」数据库</cite>@               rs.Open \"T\",cn@               <cite>#取得「T顾客目录」表的数据</cite>@               MsgBox \"[第1件的数据]\" &amp; vbcCrLf &amp; _@                       rs.Fields(0).Name &amp; \":\" &amp; rs(0).Value &amp; vbCrLf _@                      &amp; rs.Fields(1).Name &amp; \":\" &amp; rs(1).Value &amp; vbCrLf _@                      &amp; rs.Fields(2).Name &amp; \":\" &amp; rs(2).Value &amp; vbCrLf _@                      &amp; rs.Fields(3).Name &amp; \":\" &amp; rs(3).Value &amp; vbCrLf _@                      &amp; rs.Fields(4).Name &amp; \":\" &amp; rs(4).Value@        　　　　<cite>#第1件的数据</cite>@                      cn.Close　<cite>#断开数据库的连接		</cite>@        End Sub', '取得「顾客数据.accdb」的「T顾客目录」表的数据，在MessageBox中显示最初的数据。使用Open 方法，显示「T顾客目录」的数据。用Field对象的Name属性获取字段名，用Value属性获取数值。', '', '', '', '', '', '', '', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('527', '528', '复制表的数据到工作单里', 'CopyFromRecordset方法', '使用CopyFromRecordset方法，Recordset对象的内容在工作单里复制，并能黏贴。CopyFromRecordset方法里指定的值请参照解说。', 'Sub Sample528()@               Dim cn As Object@               Dim rs As Object@               Dim i As Long@               Set cn = CreateObject(\"ADODB.Connection\")@               <cite>#完成Connection对象	</cite>@               Set rs = CreateObject(\"ADODB.Recordset\")@               <cite>#完成Recordset对象 </cite>@               cn.Open _@                     \"Provider=Microsoft.ACE.OLEDB.12.0 ; \" &amp; _@                     \"Data Source=\" &amp; ThisWorkbook.Path &amp; \"\\顾客数据.accdb\"@                <cite>#连接「顾客数据.accdb」	</cite>@                rs.Open \"T顾客名单\", cn  <cite>#获取「T顾客名单」表中的数据</cite>@                For i = 0 To rs.Fields.Count - 1@                      Cells(1,i+1).Value=rs.Fields(i).Name@                Next@                <cite>#输入表单中的字段名	</cite>@                Rang(A2).CopyFromRecordset rs@                <cite>#从数据库取得了的数据转记在单元格A2之后</cite>@                cn.Close　<cite>#解除数据库的连接</cite>@                Columns(\"A:K\").AutoFit      <cite>#自动调整A~K列的列幅</cite>@        End Sub', '连接数据库，获取【顾客名单】的全部数据，转记在工作单中。CopyFromRecordset方法是，获取指定的记录集的数据。\n                这里，Field对象的Name在属性第一行输入字段名后，在第2行之后黏贴数据。', '/images/zhiku/TipsNO528-001.png', '/images/zhiku/TipsNO528-002.png', '复制大量数据的时候', '从Excel2007起，工作单的列数是已经超过了１００万行。为此，尽量不操作相当大量的数据，不能粘贴从数据库取得了的数据以避免丢失。同时，也暂时对1个工作单即使收纳，也有想硬要分割为多片复制的情况。那样的情况，使用循环处理。', 'Sub Sample528_2()@                        Dim cn As Object , Dim rs As Object@                        Dim temp As Variant@                        Dim i As Long , j As Long@                        Set cn = CreateObject _@                            (\"ADODB.Connection\")@                        Set rs = CreateObject _@                            (\"ADODB.Recordset\")@                        cn.Open _@                        \"Provider=Microsoft.ACE.OLEDB.12.0 ; \" _@                        &amp; \"Data Source=\" &amp; ThisWorkbook.Path@                        &amp; \"\\顾客数据.accdb\"@                         rs.Open \"T顾客名单\", cn@                        For i = 1 To 2@                            With ThisWorkbook _@                                .Worksheets(i)@                                For j = 0 To rs._@                                    Fields.Count -1@                                    .Cells( 1, j + 1) _@                                    .Value _@                                    = rs.Fields(j).Name@                                Next@                                temp = .Range(\"A2\") _@                                .CopyFromRecordset(rs,25)@                                rs.MoveFirst@                                rs.Move 25@                            End With@                        Next@                        cn.Close@                    End Sub', '(取得「T顾客名单」表的数据)', '(取得了的数据被粘贴)', '2017-11-30 14:05:09', null, null, '[{\"title\":\"在CopyFromRecordset方法中指定的值\",\"heads\":[\"值\",\"说明\"],\"rows\":[[\"Data\",\"在单元格范围内复制指定的Recordset对象样式\"],[\"MaxRows\",\"省略可能。工作单中复制指定记录的最大数。省略这个函数，并复制Recordset对象的全\\n                        部的记录\"],[\"MaxColumns\",\"省略可能。工作单中复制指定记录的最大数。省略这个函数，并复制Recordset对象的全\\n                        部的字段\"]]}]');
INSERT INTO `t_tips` VALUES ('528', '529', '获取表的记录件数', 'RecordCount属性', '利用RecordCount属性，可以获取Recordｓet对象的记录数。但是，光标类型没支持RecordCount属性的情况，还原到-1。通常，键集光标，在静态光标时利用RecordSet打开。', 'Sub Sample529()@               Dim cn As Object@               Dim rs As Object@               Set cn = CreateObject(\"ADODB.Connection\")@                <cite>#完成Connection对象</cite>@               Set rs = CreateObject(\"ADODB.Recordset\")@                <cite>#完成Recordset对象 </cite>@                cn.Open _@                     \"Provider=Microsoft.ACE.OLEDB.12.0 ; \" &amp; _@                     \"Data Source=\" &amp; ThisWorkbook.Path &amp; \"\\顾客数据.accdb\"@                 <cite>#连接「\\顾客数据.accdb」</cite>@                  rs.Open \"T顾客名单\", cn、３　　　　　　　　  <cite>#打开在静态下得「T顾客名单」表</cite>@        　　　　MsgBox \"「T顾客名单」表的数据件数 : \" _@                         &amp; rs.RecordCount        <cite>#获取记录数，在消息箱中显示</cite>@                 cn.Close             <cite>#关闭连接的数据库</cite>@        End Sub', '「顾客数据.accdb」的，需要得到「T顾客名单」表的数据件数。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　\n用Open方法打开「T顾客名单」表，在RecordCount属性下获取记录件数。', '/images/zhiku/TipsNO529-001.png', '/images/zhiku/TipsNO529-002.png', '', '', '', '(寻求「T顾客名单」的数据件数)', '(「T顾客名单」的数据件数被表示了)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('529', '530', '利用SQL文抽出数据', 'Source属性', '利用Source属性能抽出使用指定条件记录的SQL文', 'Sub 	Sample530()@            Dim   cn  As   Object@            Dim   rs   As   Object@            Dim   i  As   Long@            Set  cn  =  CreateObject(\"ADODB.Connection\")@            <cite>#作成Connection Object</cite>@            Set  rs  =  CreateObject(\"ADODB.Recordset\")			<cite>#作成RecordSet Object</cite>@            cn.Open _@                \"Provider=Microsoft.ACE.OLEDB.12.0;\" &amp; _@                \"Data Source=\" &amp; ThisWorkbook.Path &amp; \"\\顾客数据.accdb\"@            <cite>#连接顾客数据</cite>@            With rs@                .ActiveConnection = cn@                Source = \"SELECT * FROM T顾客list　WHERE 年龄&gt;35\"@                <cite>取得35岁以上的数据设定SQL文</cite>@                .Open		<cite>#打开一组记录</cite>@            End With@            For i = 0 To rs.Fields.Count - 1@                Cells(1, i + 1).Value = rs.Fields(i).Name@            Next@            <cite>#输入字段名</cite>@            Range(\"A2\").CopyFromRecordset rs@            <cite>#单元格A2以后粘贴取得了的数据</cite>@            cn.Close@            Columns(\"A:K\").AutoFit 					<cite>#自动调整A～K列的列幅</cite>@        End Sub', '从「顾客数据.Accdb」的「T顾客名单」取得自35岁上面的年龄的数据，转记工作表\n这里、指定Source属性SELECT文（ＳＱＬ文），取得有条件的数据', '/images/zhiku/TipsNO530-001.png', '/images/zhiku/TipsNO530-002.png', '所谓SQL', '所谓SQL，是relational数据库管理系统(RDBMS)，是为了进行数据的操作和定义的数据库语言(查询\n            语言)使用SQL，尽可能灵活的从数据库柔软取出数据，数据的更新和删除，表的制成这种操作中也能\n            实现。\n            使用结束SQL文的数据操作的例子\n            \n                \n                    命令\n                    说明\n                    使用的例子\n                    意思\n                \n                \n                    SELECT文\n                    抽出数据\n                    SELECT * FROM T顾客must\n                    \"抽出Ｔ顾客must的全部数据\"\n                \n                \n                    INSERT文\n                    插入数据\n                    \"INSERT INTO T顾客must\n                        （Name）VALUES(\"\"中村\"\")\"\n                    \"Ｔ顾客must的「Ｎａｍｅ」\n                        字段中输入新建的「中村」\"\n                \n                \n                    UPDATE文\n                    更新数据\n                    \"UPDATE T顾客must SET\n                        Age = 42 WHERE Name = \'\n                        中村\'\"\n                    \"更新Ｔ顾客must的「Ｎａｍｅ」\n                        栏是「中村」の数据的\n                        「Ａｇｅ」栏到「４２」中\"\n                \n                \n                    DELETE文\n                    删除数据\n                    \"DELETE FROM T顾客must\n                        WHERE Name = \'中村\'\"\n                    \"Ｔ顾客must的「Ｎａｍｅ」\n                        栏是删除「中村」的数据\n                        \"', '', '(使用SQL文取得数据)', '(35岁以上的数据被工作单转记了)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('530', '531', '利用SQL文抽出数据(2)', 'Execute方法', '利用Execute方法，实行query和SQL声明。', 'Sub Sample531()@        　　　Dim cn As Object@        　　　Dim rs As Object@        　　　Dim cmd As Object@        　　　Dim i As Long@               Set cn = CreateObject(\"ADODB.Connection\")@               <cite>#完成Connection对象		</cite>@               Set rs = CreateObject(\"ADODB.Recordset\")@               <cite>#完成RecordＳet对象	</cite>@        　　　Set ｃｍｄ = CreateObject(\"ADODB.Command\")@               <cite>#完成Command对象</cite>@               cn.Open _@               \"Provider=Microsoft.ACE.OLEDB.12.0 ; \" &amp; _@               \"Data Source=\" &amp; ThisWorkbook.Path &amp; \"\\顧客データ.accdb\"@                <cite>#连接「顾客数据.accdb」	</cite>@                Set ｃｍｄ.ActiveConnection = cn@              　<cite>#设定实时联系的Command对象</cite>@                cmd.CommandText = _@                        \"SELECT * FROM T顧客リスト　WHERE　年齢　＞35\"@                <cite>#在「T顾客名单」表中，年龄是35岁以上的	</cite>@                <cite>#设定满足抽出条件的SQL文</cite>@             　Set rs = cmd.Execute       <cite>#执行设定好的SQL文</cite>@               For i = 0 To rs.Fields.Count - 1@                     Cells(1,i+1).Value = rs.Fields(i).Name@               Next        <cite>#在工作单的第一行输入字段名	</cite>@               Rang(\"A2\").CopyFromRecordset rs            <cite>#抽出第二行以后的数据黏贴</cite>@               cn.Close       <cite>#断开数据库的连接	</cite>@               Columns(\"A:K\").AutoFit         <cite>#自动调整A~K列和列宽</cite>@        End Sub', '从「顾客数据.accdb」数据库的「T顾客名单」表中，使用SQL文抽出35岁以上的数据，转记在工作单中。', '/images/zhiku/TipsNO531-001.png', '/images/zhiku/TipsNO531-002.png', '使用了SQL的数据定义', '使用SQL，删除已完成的表，能进行这样的数据定义。请参考下面的例子\n            \n                ▼\n                使用了SQL文的数据定义的例子\n                \n                    \n                        命令\n                        说明\n                        使用实例\n                        意义\n                    \n                    \n                        CREATE文\n                        制成新数据库和表等\n                        CREATE TABLE T顾客must\n                            (ID INTEGER PRIMARY\n                            KEY ,Name CHAR(20) NOT\n                            NULL)\n                        \n                        制作「T顾客must」表。用「ID」字段\n                            是数值类型，作为主Key。Name字\n                            段是用字符串类型字符大小是20，\n                            输入是必须的\n                        \n                    \n                    \n                        DROP文\n                        删除原有的数据库和表等\n                        DROP TABLE T顾客must\n                        删除T顾客must表\n                    \n                    \n                        ALTER文\n                        更新原有的数据库和表等\n                        ALTER TABLE　T顾客must\n                            ADD Age INTEGER\n                        在T顾客must表中追加数值类型的\n                            「Age」字段', '', '(使用SQL文抽出数据)', '(数据被抽出了)', '2017-11-30 14:05:09', null, null, '[{\"title\":\"使用了SQL文的数据定义的例子\",\"heads\":[\"命令\",\"说明\",\"使用实例\",\"意义\"],\"rows\":[[\"CREATE文\",\"制成新数据库和表等\",\"CREATE TABLE T顾客must\\n                            (ID INTEGER PRIMARY\\n                            KEY ,Name CHAR(20) NOT\\n                            NULL)\",\"制作「T顾客must」表。用「ID」字段\\n                            是数值类型，作为主Key。Name字\\n                            段是用字符串类型字符大小是20，\\n                            输入是必须的\"],[\"DROP文\",\"删除原有的数据库和表等\",\"DROP TABLE T顾客must\",\"删除T顾客must表\"],[\"ALTER文\",\"更新原有的数据库和表等\",\"ALTER TABLE　T顾客must\\n                            ADD Age INTEGER\",\"在T顾客must表中追加数值类型的\\n                            「Age」字段\"]]}]');
INSERT INTO `t_tips` VALUES ('531', '532', '取得数据库文件的表格名单', 'Execute方法', '利用ActiveConnection属性的话，能取得表格的名单。', 'Sub Sample532()@               Dim cn As Object@               Dim catData As Objedt@               Dim temp As Objedt@               Dim I As long@               Set cn = CreateObjedt(\"ADODB.Connection\")@               <cite>#作成Connection对象	</cite>@               Set catData = CreateObject(\"ADOX.Catalog\")@               <cite>#作成RescordSet对象	</cite>@               cn.Open _@                     \"Provider = Microsoft.ACE.OLEDB.12.0;\" &amp; _@                     \"Data Source = \" &amp; ThisWorkbook.Path &amp; \"\\顾客数据.accdb\"@                     <cite>#连接[顾客数据.accdb]	</cite>@                     I = 1@                     For Each temp In catData.Tables@                    <cite>#对全部的表格进行处理</cite>@                             I = I + 1@                             Cells(I,1).Resize(,3).Value _@                                 =Array(I - 1,temp.Name,temp.Type)@                     <cite>#输入表格名种类到单元格	</cite>@                     Next@                     cn.Close      <cite>#解除数据库的连接</cite>@        End Sub', '连接到【顾客名单.accdb】数据库，获得表格名单。', '', '', '', '', '', '', '', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('532', '533', '用指定的名字制作database文件', 'Create方法', 'Create方法是新建的database。设定参数ConnectionString连接字符串。\n这时，指定作成连接字符串batabase的一个循环。', 'Sub Sample533()@            Dim  catData  As   Object@            Set   catData  =  CreateObject(\"ADOX.Catalog\")@             ;Catalog		<cite>#作成Object</cite>@            catData.Create _@                \"Provider=Microsoft.ACE.OLEDB.12.0;\" &amp; _@                \"Data Source=\" &amp; ThisWorkbook.path &amp; \"\\顾客数据bk.accdb\"@            <cite>#作成「顾客数据bk.accdb」</cite>@        End   Sub', '作成database文件。在这里，设定这个宏示例文件，作成「顾客数据bk.accdb」。', '/images/zhiku/TipsNO533-001.png', '/images/zhiku/TipsNO533-002.png', '', '', '', '(作成database文件)', '(database文件被作成)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('533', '534', '检索表的数据', 'Find方法', '检索表的数据，用Find方法\n检索满足指定条件的行，指定检索方向和开始的行等。条件符合\n现在记录的位置，找到记录移动的方向。', 'Sub 	Sample534()@            Dim   cn  As   Object@            Dim   rs   As   Object@            Dim   str  As   String@            Set  cn  =  CreateObject(\"ADODB.Connection\")@            <cite>#作成Connection Object</cite>@            Set  rs  =  CreateObject(\"ADODB.Recordset\")@            <cite>#作成RecordSet Object</cite>@            cn.Open _@                \"Provider=Microsoft.ACE.OLEDB.12.0;\" &amp; _@                \"Data Source=\" &amp; ThisWorkbook.Path &amp; \"\\顾客数据.accdb\"@            <cite>#连接顾客数据</cite>@            rs.Open \"T顾客list\",  cn, 2						<cite>#打开顾客数据表</cite>@            str = \"A002\"			<cite>#检索指定的顾客ID</cite>@            rs.Find \"顾客ID　= #\" &amp; str &amp; \"#\"@            <cite>#检索顾客ID</cite>@            If rs.EOF then@                MsgBox \"顾客ID\" &amp; str &amp; _@                    \"没有符合的记录。\"@                <cite>#没找到指定值的信息	</cite>@            Else@                MsgBox \"&lt;检索结果&gt;\" &amp; vbCr &amp; str &amp; _@                    \":\" &amp; rs.Fields(1).Value@                <cite>#找到指定值得信息</cite>@            End If@            cn.Close			<cite>#关闭数据库的连接</cite>@        End Sub', '在连接「顾客数据.Accdb」「Ｔ顾客list」表中检索「顾客ＩＤ」「Ａ002」。\n检索不能使用Fnd方法时，打开顾客list表的Open方法，取得RecordSet的光标指示器。', '/images/zhiku/TipsNO534-001.png', '/images/zhiku/TipsNO534-002.png', '抽出满足条件的全部数据', '抽出满足条件的全部数据Find方法的参数SkipRec\n            ords和循环处理配合。请参照一下例子', 'Sub Sample534_2()@                        Dim cn As Object, rs As Object@                        Dim str As String@                        Set cn = _@                        CreateObject _@                        (\"ADODB.Connection\")@                        Set rs = _@                        CreateObject _@                        (\"ADODB.Recordset\")@                        cn.Open _@                        \"Provider=Microsoft\" &amp; _@                        \".ACE.OLEDB.12.0;\" _@                        &amp; \"Data Source=\" _@                        &amp; ThisWorkbook.Path _@                                            &amp; \"\\顾客数据.accdb\"@                        rs.Open \"T顾客list\",  cn, 2@                        Str = \"顾客名 Like # 田中*#\"@                        rs.Find str@                        If Not rs.EOF Then@                            Do While Not rs.EOF@                            Debug.Print _@                            rs.Fields(\"顾客名\").value@                            rs.Find _@                            Criteria:=str, SkipRecords:=1@                            Loop@                        Else@                            MsgBox _@                            \"没有记录\"@                            End If@                            cn.Close@                    End Sub', '(作成database文件)', '(database文件被作成)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('534', '535', '更新指定的记录', 'Update方法', 'Update方法是更新指定记录单元格内的数据。', 'Sub 	Sample535()@            Dim   cn  As   Object@            Dim   rs   As   Object@            Dim   str  As   String@            Set  cn  =  CreateObject(\"ADODB.Connection\")@            <cite>#作成Connection Object	</cite>@            Set  rs  =  CreateObject(\"ADODB.Recordset\")@            作成RecordSet Object@            cn.Open _@                \"Provider=Microsoft.ACE.OLEDB.12.0;\" &amp; _@                \"Data Source=\" &amp; ThisWorkbook.Path &amp; \"\\顾客数据.accdb\"@            <cite>#连接「顾客数据.accdb」</cite>@            With rs@                .Open \"SELECT * FROM T顾客list　WHERE 顾客ID = #A001#\" _@                    , cn, , 2@                    <cite>#取得「顾客ID」中「A001」的数据</cite>@                    .Fields(\"年齢\").value = 20@                    Update		<cite>#更新数据</cite>@                End With@                cn.Close			<cite>#关闭连接的数据库</cite>@        End Sub', '更新「顾客数据.Accdb」数据库的「Ｔ顾客list」表的数据。这里\n取得使用的SQL文「顾客ID」中「A001」的数据，那里改变数据的年龄栏的值为20。', '', '', '', '', '', '', '', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('535', '536', '删除指定的记录', 'Delete方法', '利用Delete方法删除指定的固定单元格。', 'Sub 	Sample536()@            Dim   cn  As   Object@            Dim   rs   As   Object@            Dim   str  As   String@            Set  cn  =  CreateObject(\"ADODB.Connection\")@            <cite>#作成Connection Object	</cite>@            Set  rs  =  CreateObject(\"ADODB.Recordset\")@            作成RecordSet Object@            cn.Open _@                \"Provider=Microsoft.ACE.OLEDB.12.0;\" &amp; _@                \"Data Source=\" &amp; ThisWorkbook.Path &amp; \"\\顾客数据2.accdb\"@            <cite>#连接「顾客数据.accdb」	</cite>@            With rs@                .Open \"SELECT * FROM T顾客list　WHERE 顾客ID = #A001#\" _@                    , cn, , 2				<cite>#取得「顾客ID」中「A001」的数据	</cite>@                    Update		<cite>#更新数据	</cite>@                End With@                cn.Close			<cite>#关闭连接的数据库	</cite>@        End Sub', '更新「顾客数据.Accdb」数据库的「Ｔ顾客list」表的数据。这里\n取得使用的SQL文「顾客ID」中「A001」的数据，删除那条数据。', '/images/zhiku/TipsNO536-001.png', '/images/zhiku/TipsNO536-002.png', '', '', '', '(设定文件的属性)', '(表示设定的属性)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('536', '537', '进行事件处理', 'BeginTrance方法', '进行事件处理使用BeginTrance方法。BeginTrance方法是把对源数据的一连串的处理作为整理\n	可以保存（CommitTrans方法）或取消(回滚-RollbackTrans方法)。', 'Sub 	Sample537()@            Dim   cn  As   Object@            Dim   rs   As   Object@            Dim   str  As   String@            Set  cn  =  CreateObject(\"ADODB.Connection\")@            <cite>#作成Connection Object	</cite>@            Set  rs  =  CreateObject(\"ADODB.Recordset\")@            <cite>#作成RecordSet Object</cite>@            Set cmd = CreateObject(\"ADODB.Command\")@            <cite>#作成Command　Object</cite>@            cn.Open _@                \"Provider=Microsoft.ACE.OLEDB.12.0;\" &amp; _@                \"Data Source=\" &amp; ThisWorkbook.Path &amp; \"\\顾客数据2.accdb\"@            <cite>连接到「顾客数据.accdb」</cite>@            Set cmd.ActiveConnection = cn@            <cite>#设定Command Object的联系	</cite>@            cn.BeginTrans				<cite>#开始处理transaction</cite>@            cmd.CommandText = \"DELETE FROM T顾客list WHERE　顾客ＩＤ　= #A001#\"@            If MsgBox(\"继续执行处理吗\",vbYesNo) = vbYes Then@            <cite>#确认信息	</cite>@                cn.CommitTrans				<cite>#回滚</cite>@            End If@                cn.Close			<cite>#关闭数据库的连接</cite>@        End Sub', '这里是，删除[顾客数据4.Accdb]数据库的[T.顾客List]表开始的[A001]的数据。但是，处理事务的\n行为，删除后弹出确认的MsgBox点击情况是，点击rollback返回被删掉的数据。', '/images/zhiku/TipsNO537-001.png', '/images/zhiku/TipsNO537-002.png', '事务处理的必须的实例', '事务处理重要的是，rollback的方面。\n            比如，试着考虑银行的汇款处理。\n            　　银行的汇款处理是，首先从自己的\n            户头中扣减指定了的金额。此后，指定\n            户头那个金额入款。\n            在这里暂时，从自己的位置的处理结\n            束的时刻，某种错误发生了的时候作为\n            汇款的处理不被进行。如果有Rollback\n            结构、到这个时刻进行从户头回滚dao处理之前，\n            为了能返还处理，能保持数据的调整性。\n            这样，如果一连串的处理的途中错误发生了\n            rollback能返还为原来的状态。在处理数据库上，\n            成为非常重要的想法。', '', '(设定文件的属性)', '(表示设定的属性)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('537', '538', '事件程序的理解', '', '事件程序是，指出做某些操作时处理的行为。\n                     [打开book][选择sheet页]等，用户作出操作[事件]的行为。这个事件发生的时机是执行调用\n                [事件程序]。\n                     事件程序是，记述目标sheet页的sheet模块的book模块，意思是形成[目的对象名_事件名]。\n                比如，打开book执行Open事件，记述[Workbook_Open]。\n                     而且，主要的事件和内容，对象是指向下一次的。', '', '', '', '', '', '', '', '', '', '2017-11-30 14:05:09', null, null, '[{\"title\":\"主要的事件和对象\",\"heads\":[\"事件\",\"内容\",\"对象\"],\"rows\":[[\"Activate\",\"对象变主动时\",\"工作簿/worksheet/图表\"],[\"Addinlnstall\",\"软件安装时\",\"工作簿\"],[\"AddinUnlnstall\",\"软件卸载时\",\"工作簿\"],[\"AfterCalculate\",\"query和重计算的数据的更新完成时\",\"表单\"],[\"AfterUpdate\",\"更新控制的数据时\",\"表单\"],[\"AfterXmlExport\",\"Excel是不是保存数据，从被指定了的workboook任务做了XML数据时\",\"工作簿\"],[\"AfterXmllmport\",\"更新了既存的XML数据连接的时候，或为被指定了的工作簿做了XML数据输入\",\"工作簿\"],[\"BeforeClose\",\"关闭工作簿前\",\"工作簿\"],[\"BeforeDoubleClick\",\"做了双击的时候被进行的既定的动作前\",\"worksheet/图表\"],[\"BeforeDragOver\",\"托放的操作中\",\"表单\"],[\"BeforePrint\",\"打印工作簿前\",\"工作簿\"],[\"BeforeRefresh\",\"更新query表之前\",\"表单\"],[\"BeforeRightClock\",\"做了单击右键的时候被进行的既定的动作前\",\"worksheet/图表\"],[\"BeforeSave\",\"保存工作簿前\",\"工作簿\"],[\"BeforeUpdate\",\"更新控制的数据之前\",\"表单\"],[\"BeforeXmlExport\",\"是不是保存数据，从被指定了的练习问题簿输出XML数据之前\",\"工作簿\"],[\"BeforeXmllmport\",\"更新既存的XML数据连接之前，或把新的XML数据做为书进口做之前\",\"工作簿\"],[\"Calculate\",\"重计算的实行时\",\"worksheet/图表\"],[\"Change\",\"变更了成为对象的Object的价值时\",\"worksheet\"],[\"Click\",\"单击了成为对象的Object时\",\"表单\"],[\"DbClick\",\"双击成为对象的Object的时\",\"表单\"],[\"Deactivate\",\"工作簿从活动状态转为非活动状态时\",\"\"],[\"Enter\",\"即将从另外的控制接收焦点的之前\",\"表单\"],[\"Exit\",\"即将从另外的控制焦点移动的之前\",\"表单\"],[\"FollowHyperlink\",\"单击了超链接时\",\"worksheet\"],[\"KeyDown\",\"按了主键的时候\",\"表单\"],[\"KeyPress\",\"按了文字主键时\",\"表单\"],[\"KeyUp\",\"离开了主键时\",\"表单\"],[\"MouseDown\",\"按了鼠标键时\",\"图表/表单\"],[\"MouseUp\",\"离开了鼠标键时\",\"图表/表单\"],[\"NewSheet\",\"在工作簿中新建工作表时\",\"工作簿\"],[\"OnUpdate\",\"成为对象的Object有任意变更时\",\"表单\"],[\"Open\",\"打开工作簿时\",\"工作簿\"],[\"PivotTableClose Connection\",\"在数据透视表关闭与其数据源的连接之后\",\"工作簿\"],[\"PivotTableOpen Connection\",\"在数据透视表打开与其数据源的连接之后\",\"工作簿\"],[\"PivotTableUpdate\",\"更新了数据透视表时\",\"worksheet\"],[\"Resize\",\"改变了窗体的大小时\",\"グラフ\"],[\"RowsetComplete\",\"启动一组OLAP数据透视表动作，详细表示一组记录时\",\"工作簿\"],[\"Select\",\"选择了成为对象的Object时\",\"图表\"],[\"SelectionChange\",\"改变选择时\",\"worksheet\"],[\"SeriesChange\",\"变更了图表的数据要素时\",\"图表\"],[\"SheetActivate\",\"激活任何工作表时\",\"工作簿\"],[\"SheetBefore DoubleClick\",\"双击任何工作表时\",\"工作簿\"],[\"SheetChange\",\"更改工作表中的单元格时\",\"工作簿\"],[\"SheetDeactivate\",\"任一工作表由活动状态转为非活动状态时\",\"工作簿\"],[\"SheetFollow Hyperlink\",\"单击Microsoft Excel中的任意超链接时\",\"工作簿\"],[\"SheetPivotTable Update\",\"数据透视表的工作表更新之后\",\"工作簿\"],[\"SheetSelection Change\",\"工作薄中的数据透视表更新之后\",\"工作簿\"],[\"SpinDown\",\"单击了向下，或向左的旋转按钮的时候\",\"表单\"],[\"SpinUp\",\"单击了向上，或向右的旋转按钮的时候\",\"表单\"],[\"WindowwActivate\",\"工作簿的窗口激活时\",\"工作簿\"],[\"WindowDeactivate\",\"工作簿的窗口变为非活动状态时\",\"工作簿\"],[\"WindowResize\",\"工作簿窗口调整大小时\",\"工作簿\"]]}]');
INSERT INTO `t_tips` VALUES ('538', '539', '作成事件程序', '使用项目资源管理器', '事件程序是，记述对象和目的对象模块。Sheet的（对象变为活动时等）记述sheet模块。', 'Private  Sub  Worksheet_SelectionChange(Byval Target As Range)', '在VBE的［项目资源管理器］，对象和目的对象模块双击后，code窗口被打开。用［目的对象box］\n选择对象。［程序box］开始，记述选择的事件，因为自动作成事件程序，之后记述想要处理的行为。\n这是，作成作为模板worksheet对象的[SelectionChange]事件。[SelectionChange]事件是，在[对象\nbox]上选择自动插入[Worksheet]。其他的作成事件的情况是，[对象box]事件选择后，删除[Select\nChange]事件。', '/images/zhiku/TipsNO539-001.png', '/images/zhiku/TipsNO539-002.png', '', '', '', '(设定文件的属性)', '(表示设定的属性)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('539', '540', '工作簿打开时的处理', 'Open事件', 'Open事件是工作簿打开时的处理事件，有时表示工作簿打开时的消息，能够有效地操作特定的Sheet页。Open事件，记述book参数。', 'Private Sub Workbook_Open()     <cite>#打开工作簿的处理</cite>@                MsgBox \"今天的日期是\"&amp;Date    <cite>#表示今日的日期</cite>@            End Sub', '使用Open事件，打开工作簿时表示工作簿的消息。如果这样，使用Date函数，表示\n工作簿打开的日期。', '/images/zhiku/TipsNO540-001.png', '/images/zhiku/TipsNO540-002.png', 'Open　事件的使用启发', 'Open事件，是为了工作簿打开时进行处理，\n            考虑各种各样的方法，例如，工作簿打开时,一定\n            有特定的Sheet页的特定的有效的单元格。这样\n            的处理也可能。\n            保存最后记忆状态的工作簿。因此，下次打\n            开时，使用当前工作表不限制。如果预先\n            记述那样的处理，打开工作簿时，因为一\n            定特定的工作表进入活动，工作效率能够\n            提升。', '', '(设定文件的属性)', '(表示设定的属性)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('540', '541', '关闭工作簿之前的处理', 'BeforeClose事件', '利用BeforeClose事件，能够对工作簿关闭之前进行处理，指定参数Cancel为True，\n 能够取消关闭工作簿的操作，BeforeClose事件，记述工作簿的模块。', 'Private Sub Workbook_BeforeClose(Cancel As Boolean)@            <cite>#BOOK关闭是的处理	</cite>@                If MsgBox(\"确定关闭吗？\",vbYesNo)=vbNo Then@                <cite>#确认的消息弹出	</cite>@                    Cancel = True				<cite>#单击NO的时候，取消处理。</cite>@                End If@            End Sub', '这里，关闭工作簿时会有提示消息，消息框有【是】和【否】2个按钮，如果单击【否】\n 把参数Cancel做为True取消处理。', '/images/zhiku/TipsNO541-001.png', '/images/zhiku/TipsNO541-002.png', '使用BeforeClose事件的启发', 'BeforeClose事件，关闭工作簿时进行处理\n            这个事件的使用，例如未入力的单元格没有被检\n            查。', '', '(关闭工作簿时的确认消息)', '(显示确认消息)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('541', '542', '工作簿启用时进行处理', 'Activate事件', 'Activate事件是为了工作簿进入启用时进行处理的事件，利用几个工作簿，为了特定的工作簿\n进入启用时显示消息，可能这样的处理。Activate事件是为了记述工作簿模块。', 'Private Sub Workbook_Activate()@        <cite>#工作簿进入启用时的处理</cite>@            MsgBox\"活动工作簿:\" &amp; ThisWorkbook.Name@             <cite>#显示工作簿名的消息框</cite>@        End Sub', '这里，包含这个宏的工作簿进入启用的时候，使用Name属性在工作簿里显示工作簿名。', '/images/zhiku/TipsNO542-001.png', '/images/zhiku/TipsNO542-002.png', 'Activate事件发生的时机', 'Activate事件，从其他工作簿设定工作簿\n            事件活动改换时发生。如果从Word等其他程序\n            中转换的场合，事件不发生。', '', '(工作簿启动时的处理)', '(消息被显示)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('542', '543', '工作簿停用时进行的处理', 'Deactivate事件', 'Deactivate事件，是工作簿停用时发生的事件。Deactivate事件，是记述工作\n簿的模块。', 'Private Sub Workbook_Deactivate()@        <cite>#工作簿停用时</cite>@            MsgBox　\"使用的工作簿：\"&amp;ThisWorkbook.Name@             <cite>#显示工作簿名</cite>@        End Sub', '这里，包含这个宏的工作簿停用时，使用Name属性显示工作簿名。', '/images/zhiku/TipsNO543-001.png', '/images/zhiku/TipsNO543-002.png', '', '', '', '(停用时显示消息)', '(消息被显示了)', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('543', '544', '作为插件编入工作簿时进行的处理', 'Addinlnstall事件', 'Addinlnstall事件，是插件被安装的时候发生的事件。插件文件记述。Addinlnstall事件，\n又记述工作簿模块。', '<cite>#Sample544.xlam(插件工作簿)的编码</cite>@        Private Sub Workbook_Addinlnstall()							<cite>#插件被安装时的处理</cite>@            <cite>MsgBox\"插件已被安装\"</cite>@        End Sub@        <cite>Sample544.xlam的编码</cite>@        Private Sub Workbook_Open()						<cite>#工作簿打开时的处理</cite>@            AddIns.Add Filename:=ThisWorkbook.Path &amp; \"\\Sample544_AddIn.xlam\"@            <cite>#追加Sample544_AddIn.xlam插件安装</cite>@            AddIns(\"Sample544_AddIn\").Installed = True@            <cite>#安装插件</cite>@        End Sub@        Private Sub Workbook_BeforeClose(Cancel As Boolean)@        <cite>#工作簿关闭时的处理</cite>@            AddIns(\"Sample544_AddIn\").Installed = False@            <cite>#卸载插件</cite>@        End Sub', '这里，【Sample544.xlsm】打开的时候，自动安装【Sample544_Addin.xlam】插件，\n【Sample544_Addin.xlam】，在Addinlnstall事件里，表示消息的宏被记述。安装【Sample\n544_Addin.xlam】工作簿的Open事件的时候，Addinlnstall事件发生，消息被显示。\n	再者，插件追加(Add方法)→安装(指定为True的install属性)次序安装。\n	这个样品，关闭工作簿时指定install属性为False，卸载插件。', '', '', '', '', '', '', '', '2017-11-30 14:05:09', null, null, '');
INSERT INTO `t_tips` VALUES ('544', '545', '印刷之前的处理', 'BeforePrint事件', 'BeforePrint事件，是印刷之前处理的事件。指定参数Cancel为True的话，能够取消印刷\n处理，BeforePrint事件，是记述工作簿的模块。', 'Private Sub Workbook_BeforePrint(Cancel As Boolean)@        <cite>#印刷之前的处理</cite>@            If Range(\"A1\").Value = vbNullString Then@            <cite>#检查单元格A1是不是输入了数据</cite>@                MsgBox\"请在A1单元格输入数据\" &amp; vbLf _@                    &amp; \"停止处理\", vbInformation@                <cite>#显示未输入数据栏的消息</cite>@                Cancel = True			<cite>#取消印刷处理</cite>@            End If@        End Sub', '这里，印刷的时候检查单元格A1，是空白栏的话显示消息并取消印刷处理。', '/images/zhiku/TipsNO545-001.png', '/images/zhiku/TipsNO545-002.png', 'BeforePrint事件的利用启发', 'BeforePrint事件，这个样品印刷时的输入\n            检查和计算页数，这个用法能在页数多的时候显\n            示确认消息。', '', '(印刷时进行处理)', '(消息被显示)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('545', '546', '工作簿保存之前的处理', 'BeforeSave事件', 'BeforeSave事件，是工作簿保存之前进行处理的事件。参数SaveAsUl,保存的处理，【另存名\n字为】的情况是True，【保存】的情况是False。同时，把参数Cancel作为True的话能取消\n保存处理。\n	再者，BeforeSave事件是记述工作簿的模块。', 'Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean _@               ,Cancel As Boolean)@         <cite>#保存时进行的处理</cite>@            If SaveAsUI Then				<cite>#检查是否为【另存名字为】</cite>@                MsgBox \"不能另存名字为\"@                <cite>#【另存名字为】的处理的情况，显示消息</cite>@                Cancel = True			 <cite>#取消保存</cite>@            End If@        End Sub', '这里，包含这个宏的工作簿，不能处理【另存名字为】。参数SaveAsUl为True的情况，处理\n【另存名字为】。因此，If声明判定，是True的情况把参数Cancel作为True取消保存处理。', '/images/zhiku/TipsNO546-001.png', '/images/zhiku/TipsNO546-002.png', '', '', '', '(不能处理【另存名字为】)', '(消息被显示，保存处理被取消)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('546', '547', 'Book保存后进行处理', 'AfterSave事件', 'AfterSave事件是工作簿保存后发生的事件。从Excel2010被追加了。如果被正确保存变量Success\n    为True，如果没有保存为False。\n	AfterSave事件是工作簿模块里记述的。', 'Private  Sub  Workbook_AfterSave(ByVal Success As Boolean)@         <cite>#保存处理后进行处理</cite>@            If  Success  Then 				 <cite>#检验是否正常保存</cite>@                Msgbox   \"保存处理正常结束了\"@                　<cite>#被保存的信息</cite>@            Else@                Msgbox    \"没能正确保存。请确认\"@                　<cite>#没有被保存的信息</cite>@            End If@        End  Sub', '在这里，工作簿保存正确与否的信息显示，检查。', '/images/zhiku/TipsNO547-001.png', '/images/zhiku/TipsNO547-002.png', '', '', '', '(工作簿正确保存的确认)', '(信息被显示)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('547', '548', '工作表成为活性的时候进行处理', 'Activate事件', 'Activate事件，工作表活性的收获处理。Activate事件工作表模块记述。还能同时处理事件中存在\n    SheetActivate事件。这是工作簿模块记述的，工作簿内全部的Sheet事件的活动对象。', 'Private  Sub   Worksheet_Activate()@            MsgBox     ”活性对象：”&amp; Me.Name@        End   Sub', '这里[Sheet1]工作表的表模块在Activate事件中记述。\n	[Sheet1]工作表是活性的时候，工作表名信息区中表示。Me关键字在工作表模块记述的场合，\n     那个工作表自身表示。', '/images/zhiku/TipsNO548-001.png', '/images/zhiku/TipsNO548-002.png', 'SheetActivate事件', 'SheetActivate事件，工作簿模块记述，工作簿内的那一个工作表活性的时候进行处理。SheetActivate 事件的变量sh，实际的活性时工作表中表示。这回请参考代码。其次工作表模块的Activate事件和工作簿模块的SheetActivate事件的两个事件被记述，工作簿中的事件的记述先被处理。', 'Private  Sub  Workbook@                    SheetActivate(ByVal Sh As Object )@                        MsgBox   \"活性\"：&amp; _@                        Sh.Name@                    End    Sub', '([Sheet2]工作表切换到[Sheet1]工作表)', '(信息显示)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('548', '549', '单元格的值发生变化的时候进行处理', 'Change事件', 'Change事件在工作表模块中记述，那个工作表的单元格的值变化的时候进行处理。变量Target\n    在变更了单元格范围表示。另外，进行类似的处理活动，SheetChange事件会参与。这里是工作簿\n    记述模块，工作簿在整个单元格的值被变更的时候进行处理。', 'Private  Sub  WorkSheet_Change(ByVal  Target  As  Range)@        　<cite>#单元格的值发生变化的时候进行处理</cite>@            MsgBox  \"发生变化的单元格的值:\" &amp; Target.Address@            <cite>#发生变化的单元格地址信息区表示</cite>@        End   Sub', '这里，[Sheet1]工作表模块在事件中记述。单元格的中发生变化，变化后单元格的地址在信息区\n    表示。实际上[Sheet1]工作表的值发生变化，要进行确认。', '/images/zhiku/TipsNO549-001.png', '/images/zhiku/TipsNO549-002.png', '', '', '', '(单元格的值发生变化)', '(信息显示)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('549', '550', '单元格选择时进行处理', 'SelectionChange事件', 'SelectionChange事件，工作表模块中记述，工作表单元格上被选择后进行处理。变量Target表示\n     单元格的选择范围。另外，进行类似的处理活动，SheetSelectionChange事件也存在。这是工作簿\n    记述的，工作簿中单元格被全选时进行处理。', 'Private  Sub  Worksheet_SelectionChange(ByVal  Target as Range)@        　<cite>#工作表上的选择单元格发生变化是进行处理</cite>@            MsgBox \"被选择单元格的地址:\" &amp; Target.Address@             <cite>#被选择的单元格的地址信息显示</cite>@        End  Sub', '这里，[Sheet1]工作表模块中的代码记述，选择单元格范围发生变化时，变化后的单元格的地址\n信息显示。', '/images/zhiku/TipsNO550-001.png', '/images/zhiku/TipsNO550-002.png', '', '', '', '(选择单元格范围发生变化)', '(信息被显示)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('550', '551', '新工作表做成是进行处理', 'NewSheet事件', 'NewSheet事件在工作簿中记述，追加新工作表时进行处理。变量Sh表示被追加的工作表。\n     NewSheet事件在工作簿中记述。', 'Private  Sub  Workbook_NewSheet(Byval  Sh As  Object)@             <cite>#工作表被追加时进行处理</cite>@                MsgBox  \"被追加的工作表名\" &amp; Sh.Name@            　<cite>#被追加的工作表名信息表示</cite>@            End   Sub', '新工作表被追加是，被追加的工作表名信息显示。事件上工作表追加是要确认。', '/images/zhiku/TipsNO551-001.png', '/images/zhiku/TipsNO551-002.png', 'NewSheet事件的用法的启示', 'NewSheet事件，例如工作表追加的同时，列幅的设定格式与前面处理一致。', '', '(选择单元格范围发生变化)', '(信息被显示)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('551', '552', '双击工作表的单元格的时候进行处理', 'BeforeDoubleClick事件', 'BeforeDoubleClick事件在工作表模块记述。双击工作表的单元格的时候进行处理。变量Target\n    表示被双击的单元格。指定True为参数Cancel的话，双击单元格的时候的规定的取消把动作(单元格\n    做为编辑方式）。再者，与BeforeDoubleClick事件相似的处理，有SheetBeforeDoubleClick事件。\n    这工作簿模块记述，工作表全体成为对象', 'Private  Sub  Worksheet_BeforeDoubleClick(ByVal  Target  As  Range ,Cancel  As Boolean)@            　<cite>#单元格被双击的时候进行处理</cite>@                If  MsgBox(\"编辑单元格吗?\",vbYesNo) = vbNo Then@                　<cite>#表示消息箱	</cite>@                    Cancel = True@                    　<cite>#如果点击[取消]，取消处理	</cite>@                End   If@         End   Sub', '在这里，[Sheet1]工作表模块记述着事件，任意的单元格被双击，信息箱表示。点击[取消]按钮\n    处理被取消，单元格不成为编辑方式。', '/images/zhiku/TipsNO552-001.png', '/images/zhiku/TipsNO552-002.png', '', '', '', '(双击单元格)', '(消息被表示了)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('552', '553', '右键单机工作表上时进行处理', 'BeforeRightClick事件', 'BeforeRightClick事件，工作表模块记述，在工作表上右键单击的时候进行处理，参数Target，表\n            示被右键单击的单元格。指定Ture为参数Cancel的话，能取消右键单击的时候的既定的处理(快捷菜单\n            的表示)。进行一样处理的事件，有SheetBeforeRightClick。这工作簿模块记述，对象成为工作簿全体\n            对象。', 'Private  Sub   WorkSheet_BeforeRightClick(ByVal  Target  As Range, Cancel As Boolean)@         <cite>#右键单击单元格的时候进行处理</cite>@            IF  MsgBox(\"快捷菜单表示吗？\", vbYesNo)  =  vbYesNo   Then@             <cite>#表示消息窗口</cite>@                Cancel = True@                 <cite>#如果点击【取消】按钮，取消处理</cite>@            End  If@        End  Sub', '在这里，[Sheet1]工作表模块记述BeforeRightClick。单元格右键单击，消息窗口显示。点击[取消]\n按钮，快捷菜单取消表示。', '/images/zhiku/TipsNO553-001.png', '/images/zhiku/TipsNO553-002.png', '', '', '', '(双击单元格)', '(消息被表示了)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('553', '554', '点击超级链接时的处理', 'FollowHyperlink 事件', 'FollowHyperlink 事件是处理一个模块点击超级链接的行为。参数Ｔarget表示被点击了的超级链接。\n相似的处理还有SheetFollowHyperlink 事件。工作簿组件记录，工作簿全体成为对象。', 'Private Sub Worksheet__FollowHyperlink(ByVal Target As Hyperlink)@        <cite>#单机超级链接进行的处理</cite>@            MsgBox \"URL : \" &amp; Target.Address &amp; \"已打开\"@            <cite>#表示被点击的超级链接</cite>@        End Sub', '在这里，「Ｓheet」工作表事件被记录。单元格A１设定着可以点击的超级链接。设置的被点击的超级链接\n在消息框中表示URL。', '/images/zhiku/TipsNO554-001.png', '/images/zhiku/TipsNO554-002.png', '', '', '', '(单击超级链接)', '(消息框显示)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('554', '555', '重新计算进行的处理', 'Calculate 事件', 'Calculate 事件在sheet模块中记录。进行重计算时处理。要是把book作为全体对象，要使用\nSheetCalculate事件。', 'Private Sub Worksheet_Calculate()@        <cite>#重计算时的处理</cite>@            MsgBox　”进行了重新计算”@            <cite>#消息的表示</cite>@        End Sub', '在这里，「Sheet1」sheet模块中记录事件。单元格Ｄ２输入求金额的计算式。单价栏变更时，金额栏\n进行重新计算。当这个事件发生时，消息框弹出。', '/images/zhiku/TipsNO555-001.png', '/images/zhiku/TipsNO555-002.png', 'Calculate 事件使用的提示', '例如，像合计金额栏，重新计算的结果因为位数改变了。单元格宽度也可能改变。\n            这样的情况使用Calculate 事件，每次需要把当前列的列宽调整，这样能保持最适合的列宽。', '', '(实行重新计算)', '(消息框 弹出)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('555', '556', '启动窗口时的处理', 'WindowActivate 事件', 'WindowActivate事件是启动窗口时处理。WindowActivate事件在book组件中记录。', 'Private Sub Workbook_WindowActivate(ByVal Wn As Window)@        <cite>#启动窗口时的处理</cite>@            MsgBox　”窗口的显示：”　&amp; Wn.Caption@            <cite>#当前窗口的显示</cite>@        End Sub', '在这里，窗口启动的时候，会在消息框中显示。当我们打开两个窗口时，每次转换窗口，这个信\n息就会提示。', '/images/zhiku/TipsNO556-001.png', '/images/zhiku/TipsNO556-002.png', 'book的启动事件', '像从一个book切换到另一个book时，启动事件会被触发。不同的是，当我们用book打开两个window样品对象时，这个事件也会触发。\n            这对book事件book对象是不能处理的。', '', '(窗口切换)', '(消息框提示)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('556', '557', '窗口大小改变时的处理', 'WindowResize 事件', 'WindowResize 事件是窗口大小改变时的处理，参数Win让窗口改变了。WindowResize事件在book组件中\n记录。', 'Private Sub Workbook_WindowResize(ByVal Wn As Window)@        <cite>#窗口大小改变时的处理</cite>@            Wn.WindowState = xlMaximized@            <cite>#窗口最大化显示</cite>@        End Sub', '在这里，WindowResize事件的使用，让窗口的大小改变了。实行窗口最大化处理。这样做强制的受让窗口\n最大化显示。', '/images/zhiku/TipsNO557-001.png', '/images/zhiku/TipsNO557-002.png', '窗口大小的固定', '要固定窗口的大小，使用EnableResize属性把EnableResize属性指定为False窗口的大小就固定了。', '', '(点击返回原来的窗口大小)', '(保持最大化显示不能变更)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('557', '558', '数据透视表更新时的处理', 'PivotTableUpdate 事件', 'PivotTableUpdate事件是对数据透视表更新时的处理。参数Target表示PivotTable更新的数据表。\nPivotTableUpdate事件在sheet模块中记述。', 'Private Sub Worksheet_PivotTableUpdate(ByVal Target As PivotTable)@        <cite>#数据透视表更新时的处理</cite>@        	If Target.name = \"集計データ\" Then@            <cite>#「总计数据」数据透视表更新的检测</cite>@            MsgBox　”数据透视表已更新”@            <cite>#「总计数据」数据透视表更新时的消息</cite>@            End If@        End Sub', '这里，「Sheet1」在sheet模块记述。「Sheet1」工作表中有两个数据透视表。如果在这个里面，\n左侧（单元格A15）数据透视表更新的时候，显示消息框。哪个数据透视表更新是由参数Target的Name\n属性确定的。\n	实际上，两个数据透视表的变更，请确认动作。', '/images/zhiku/TipsNO558-001.png', '/images/zhiku/TipsNO558-002.png', '', '', '', '(左侧数据透视表更新)', '(消息框提示)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('558', '559', '事件不发生', 'EnableEvents 属性', 'EnableEvents 属性指定为Ｆａｌｓｅ事件就会无效。设定一次直到应用软件关闭都会执行。如果想要进行\n事件处理需要返回Ture。', 'Private Sub Worksheet_Change(ByVal Target As Range)@        <cite>#worksheet值的变更处理</cite>@            If　Target.Value &gt; 100 Then						<cite>#输入值的检测</cite>@            　　　Application.EnableEvents = False@                <cite>#事件无效</cite>@                Target.Value = 100@                <cite>#变更的单元格的值为100</cite>@                Application.EnableEvents = True@                <cite>#事件有效</cite>@            End If@        End Sub', '这里，使用Change事件。【Sheet1】worksheet的单元格的值改变是进行处理。输入的值如果比100大\n的时候。那个单元格的值就是100。不能输入比100大的值。		\n	事件有效，单元格的值是100时，Change事件发生了。（实际上，第二次的Change事件发生，那个时候\n单元格的值是100，处理结束了。但是，进行了多余的处理）。', '/images/zhiku/TipsNO559-001.png', '/images/zhiku/TipsNO559-002.png', '', '', '', '(事件无效)', '(事件无效值被输入)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('559', '560', '事件的绑定', 'WithEvents 关键字', '使用WithEvents的关键字能够处理Type已指定的对象的事件绑定。指定Application对象的话，可以处理\nApplication class的事件。', 'Private WithEvents xlApp As Excel.Application@        <cite>#Application class 的事件的处理</cite>@        Private Sub Workbook_Open()@            Set xlApp = Excel.Application@        End Sub@        Private Sub xlApp_NewWorkbook (ByVal Wb As Workbook)@            Wb.Worksheets(1).Range(\"A1\").Value = \"Excel VBA\"@            <cite>#新建book时输入的字符串</cite>@        End Sub', '这里在booksheet中记述。WithEvents 附加的关键字、Application对象的变量xlApp的声明。\n	因为Open事件，这个变量xlApp代入到了Application的对象。\n	WithEvents 关键字能够声明变量，选择对象的变量名，设置事件的关联。\n	这里，Application class的NewWorkbook事件的使用。NewWorkbook事件是新建book是发生的事件。想\n要使用这个事件的时候，在新建book时，第一个工作表的单元格A1中输入「Excel VBA」。\n	实际上，新建book请确认动作。', '/images/zhiku/TipsNO560-001.png', '/images/zhiku/TipsNO560-002.png', '', '', '', '(新建工作簿时进行的处理)', '(新建工作簿时，自动输入字符串)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('560', '561', '作成单独的事件', 'Event的声明/RaiseEvent的声明', 'Event的声明定义事件。RaiseEvent的声明不发生事件。', '<cite>初始化工作薄</cite>@        Private WithEvents mEventClass As EventClass@        <cite>#声明一个掌控事件的EventClass类的变量</cite>@        Private Sub Workbook_Open()@        <cite>#打开工作薄的时候进行处理</cite>@            Set mEventClass = New EventClass@            <cite>#作成EventClass累的事件</cite>@            mEventClass.Init ThisWorkbook.Worksheets(1)@            <cite>#在参数mEventClass的Init方法中定工作薄的1号工作表</cite>@        End Sub@        Private Sub mEventClass_LengthOver()@        <cite>LengthOver事件</cite>@            MsgBox\"位数超出\"@            <cite>表示信息</cite>@        End Sub@        <cite>初始化EventClass系数</cite>@        Public Event LengthOver()@        Private WithEvents mSh As Worksheet@        <cite>#声明一个掌控工作表事件的mSh参数</cite>@        Public Sub Init(ByVal sh As Worksheet)@        <cite>Init过程</cite>@            Set mSh = sh				<cite>变量sh代入变量mSh</cite>@        End Sub@        Private Sub mSh_Change(ByVal Target As Range)@        <cite>#cell的值改变时进行处理</cite>@            If Not Intersect(Target,Range(\"A1\")) Is Nothing Then@            <cite>做成cellA1对象</cite>@                If Len(Target.Value) &gt; 10 Then@                <cite>#文字列长度的方法</cite>@                    RaiseEvent LengthOver@                    <cite>文字的长度大于10的场合触发LengthOver事件</cite>@                End If@            End If@        End Sub', '在这做成独自的方法、使用book模块和[EventClass]类模块。文字列的数字长度大于10的场合入\n力到Sheet1的book模块的cellA1中。在信息栏中表示。\n    　cell的值发生变化时，发生Change方法。因此，虽然是在Change事件内完成的处理，但是因为\nsample但是因为sample所以需要考虑到这样的事件。\n　　模块系数中使用WithEvent关键字掌握事件，声明WithEvent类的变量．使用Class的Open方法\n初始化变量。同时，使用1Sheet页的EventClass类的Init方法。而且，记述实际的马快系数。做成\nLengthOver方法。单纯的表示信息。\n    　接下来，记述EventClass类的系数。首先，使用Event声明定义LengthOver方法。而且，声明\nmSh变量在工作表的掌握事件中。Init方法是使用Sheet1页的工作表mSh参数。\n	在这里，先做好准备。\n   　 最后，使用工作表的Change方法，获取cellA1的值，cellA1文字的Len大于10 的场合，触发\nRaiseEvent方法。', '/images/zhiku/TipsNO561-001.png', '/images/zhiku/TipsNO561-002.png', '', '', '', '(独自的方法表示留言信息)', '(被表示的信息)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('561', '562', 'Excel版本的取得', 'Version属性', '使用Version属性，获取Excel版本。Excel的版本以文字列的形式返回。怎样取得Excel的版本，\n请参照解说。', 'Sub　Sample562(　)@            MsgBox\"Excel的版本:\" &amp; Application.Version@            <cite>#显示获取到的Excel版本信息</cite>@        End Sub', '使用Version方法取得现在使用的Excel版本的信息，表示在信息框中。在Excel的版本混淆的环境\n下，必须把处理分成每版本独有的情况。在那样的场合下使用。		\n    那么，下面是要获取Excel版本文字列要用的版本号。', '/images/zhiku/TipsNO562-001.png', '/images/zhiku/TipsNO562-002.png', '', '', '', '(获取Excel的版本)', '(Excel的版本信息被表示在留言框中)', '2017-11-30 14:05:10', null, null, '[{\"title\":\"Exce版本和版本No\",\"heads\":[\"版本\",\"版本No\",\"版本\",\"版本No\"],\"rows\":[[\"Excel2013\",\"15.0\",\"Excel2000\",\"9.0\"],[\"Excel2010\",\"14.0\",\"Excel97\",\"8.0\"],[\"Excel2007\",\"12.0\",\"Excel95\",\"7.0\"],[\"Excel2003\",\"11.0\",\"Excel5.0\",\"5.0\"],[\"Excel2002\",\"10.0\",\"\",\"\"]]}]');
INSERT INTO `t_tips` VALUES ('562', '563', 'OS版本的取得', 'OperatingSystem属性', '使用OperatingSystem属性，获取OS版本。怎样取得OSl的版本，请参照解说。', 'Sub　Sample563(　)@            MsgBox\"OS的版本:\" &amp; Application.Version@            <cite>#显示获取到的OS版本信息</cite>@        End Sub', '取得OS的种类在信息框中显示。通过OperatingSystem方法取得值。那么64bit的场合，\n以下表示的是部分64bit的场合。', '/images/zhiku/TipsNO563-001.png', '/images/zhiku/TipsNO563-002.png', '', '', '', '(取得OS的种类)', '(在信息框中显示OS的种类)', '2017-11-30 14:05:10', null, null, '[{\"title\":\"OperatingSystem方法获取的值\",\"heads\":[\"OS\",\"版本\"],\"rows\":[[\"Windows8\",\"Windows (32bit) NT 6.02\"],[\"Windows7\",\"Windows (32bit) NT 6.01\"],[\"WindowsVista\",\"Windows (32bit) NT 6.00\"],[\"WindowsXP\",\"Windows (32bit) NT 5.01\"],[\"Windows2000\",\"Windows (32bit) NT 5.00\"],[\"WindowsMe\",\"Windows (32bit) 4.90\"],[\"Windows98\",\"Windows (32bit) 4.10\"],[\"Windows95\",\"Windows (32bit) 4.00\"]]}]');
INSERT INTO `t_tips` VALUES ('563', '564', '根据VBA的版本处理', 'VBA7带条件编译程序定数/#IF Then #Else命令', 'VBA是从Excel2010与64bit对应的版本开始有了7。VBA带条件编译程序定数。是表示VBA的\n            版本的定数。\n	#If Then #Else命令根据通常的IF函数和条件进行处理。但关于条件不满足的情况的处理，不\n进行编译。为此，由于VBA版本的差异，使用像这样的情况解决编译错误。', '#If VBA7 Then  　　　　<cite>#检查VBA的版本</cite>@            Private Declare PtrSafe Function MessageBox Lib\"User32.dll\" _@                Alias \"MessageBoxA\"(_@                    ByVal hWnd As LongPtr,ByVal lpText As String,_@                    ByVal lpCaption As String, ByVal uType As Long _@                )As Integer@            <cite>#Excel2010以后的情况的处理</cite>@        #Else@            Private Declare Function MessageBox Lib\"User32.dll\" _@                Alias \"MessageBoxA\"(_@                    ByVal hWnd As LongPtr,ByVal lpText As String,_@                    ByVal lpCaption As String, ByVal uType As Long _@                )As Integer@            <cite>#Excel2010以前的情况的处理</cite>@        #End If@        Private Sub Sample564( )@            #If VBA7 Then@                MessageBox 0,\"使用中的Office Office2010以后\"_@                ,\"Office判定\",vbOKOnly@                <cite>#Excel2010以后的场合的消息</cite>@            #Else@                MessageBox 0,\"使用中的Office Office2010以前\"_@                    \"Office判定\",vbOKOnly@                    <cite>Excel2010以前场合的消息</cite>@                #End If@        End Sub', 'Excel2010开始32bit版的Excel被提供。为此，VBA7版本也出现了。64bit版的Excel对API\n声明的时候没有Ptrsafe属性，编译时VBA不能实行。\n		为了抵制那样的编译错误。#If Then #Else命令和VBA7分开声明，最终在组合在一起。\n		在这使用MessageBoxAPI函数根据Excel的版本不同表示信息。', '/images/zhiku/TipsNO564-001.png', '/images/zhiku/TipsNO564-002.png', '', '', '', '(VBA的版本因而分开处理)', '(表示在消息栏中)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('564', '565', '根据OS的种类分别进行处理', 'Win64带条件编译程序分定数/#IF Then #Else命令', 'Windows有32位和64位版本。VBA在使用API的时候必须注意区分。\n	#If Then #Else命令根据通常的IF函数和条件进行处理。但关于条件不满足的情况的处理，不进行\n编译。为此，由于VBA版本的差异，使用像这样的情况解决编译错误。', '#If Win64 Then  　　　　<cite>#检查OS是不是64位操作系统</cite>@            Private Declare PtrSafe Function　GetTickCount64 _@                Lib \"kernel32\" () As LongLong@            <cite>#OS是64位的情况处理</cite>@        #Else@            Private Declare Function MessageBox Lib\"User32.dll\" _@        #Else@            Private Declare Function　GetTickCount Lib \"kernel32\" ( ) As Long@            <cite>#不是64位情况的处理</cite>@        #End If@        Private Sub Sample56５( )@            #If Win64 Then      <cite>#检查OS是不是64位</cite>@                Dim　t As LongLong , t2 As LongLong@                <cite>#是64位的情况下声明</cite>@            #End If@            Dim I As Long@            #If Win64 Then@                t1 = GetTickCount64@            #Else@                t1 = GetTickCount@            #End If@            <cite>在经过的时刻取得</cite>@            Do@                i = i +1@            Loop Until i &gt;1000000@            <cite>#处理计算时间</cite>@            #If Win64 Then@                t2 = GetTickCount64@            #Else@                t2 = GetTickCount@            #End If@            <cite>#再次经过的时刻取得</cite>@            MsgBox t2 - t1 &amp; \"ミり秒\"　　　<cite>#便是经过的事件</cite>@        End Sub', '在这，使用GetTickCountAPI函数，GetTickCountAPI函数是系统启动的时候以毫秒取得时间。\nGetTickCountAPI函数是64位OS使用GetTickCountAPI64函数。因此，API声明时分开使用#If\nThen #Else。64位版本的返回值变成了LongLong型。64位的返回值是LongLong型。分开处理声明的\n参数和GetTickCountAPI函数的返回值。\n	   处理声明的Do Loop ，在这使用特别的测量时间。', '/images/zhiku/TipsNO565-001.png', '/images/zhiku/TipsNO565-002.png', '', '', '', '(计算处理的时间)', '(表示处理的时间)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('565', '566', '避免就算cell数的时候发生错误', 'CountLarge属性', 'CountLarge属性是从Excel2007被追加的属性。Excel从2007版本开始工作表的大小（行数·列数）\n变大了。因此，如果计算全部的cell个数的场合，Count属性会发生溢出错误。CountLarge属性用来处理\n工作表的最大尺寸（17,179,869,184cell）为止的范围。', 'Sub Sample566()@            If Val(Application.Version) &gt;= 12 Then@            <cite>#判定2007以后版本的Excel</cite>@        　		MsgBox\"cell的个数:\" &amp; Cells.CountLarge@                <cite>Excel2007以后的情况信息</cite>@            Else@                MsgBox\"cell的个数:\" &amp; Cells.Count@            End If@        End Sub', '在这里，在消息箱里表示全部的cell个数。因为Excel2007以前的情况，不能使用CountLarge\n属性Version属性根据Excel的版本进行不同的处理。', '/images/zhiku/TipsNO566-001.png', '/images/zhiku/TipsNO566-002.png', 'Count属性和CountLarge属性', '基本的属性和两个属性有相同的机能。但能处理的行数不同。这里，Count属性的返回值是Long型，CountLarge苏醒的返回值是Variant型', '', '(计算cell的数)', '(cell的个数被显示在信息栏中)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('566', '567', '相对变更工作表的尺寸', 'Rows属性/Columns属性/Count属性', 'Rows属性是objext是定了cell行数的范围。Columns的属性是取得各自的列数。如果省略\n                    object会成为活动的sheet页的全体对象。\n                        Count属性是在object里做成指定的客观的数。指定Rows和Columns属性，可以取得行\n                    数·列数。', 'Sub Sample567@            Dim RowsCount As Long, ColumnsCount As Long@            RowsCount = Rows.Count          <cite>#取得行数</cite>@            ColumnsCount = Columns.Count        <cite>#取得列数</cite>@            MsgBox \"行数:\"　&amp; RowsCount &amp; vblf _@                  &amp;  \"列数:\" &amp; ColumsCount@            <cite>#显示行数列数的消息箱中。</cite>@        End Sub', 'Excel2007以前工作表是65.536行，256列。Excel2007以后变成1,048,576行、16,384列。例如，\n工作表最后行是「Cells(65536,1)」的场合做记述。Excel2207以后，不好的操作会出发case。	\n    在这，使用固定值作为最终表示发生的问题（关于队列也一样）。因此取得最终行（列）的场合是\n使用Rows（Columns)属性和Count属性，同样记述「Cells(Rows.Count, 1）」。	\n    如果这样的记述满足，就必须丢失工作单的尺寸，同事，取得将要增加的行和列的数，必须修正丢\n失的编码。', '', '', '', '', '', '', '', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('567', '568', '取得参考程序库的一览表', 'References属性', 'References属性，是返回程序库的搜集的参照设定。Object，指定VBProject对象。再者，这个属\n性由于安全性的设定[信赖对VBA项目客观模型的访问]复选框没成为On不能使用。', 'Sub Sample568()@            Dim msg As String@            Dim ref As Object@            For Each ref In ThisWorkbook.VBProject.References@            <cite>#对全部的参照设定进行处理</cite>@                With ref@                    msg = msg &amp; \"参照設定:\" &amp; .Name &amp; \" : \"&amp; _@                        .Description &amp; vbCrL						<cite>#取得参照设定的名字和说明</cite>@                End With@            Next@            MsgBox msg				<cite>#表示已经取得的参照设定的名字和说明</cite>@        End Sub', '在这里，取得现在被参照设定的程序库的【名字】（Name属性）和【说明】（Description属性），\n在提示框里(上)表示。', '/images/zhiku/TipsNO568-001.png', '/images/zhiku/TipsNO568-002.png', '', '', '', '(引用表示)', '(引用信息表示)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('568', '569', '避免自动筛选日期不能抽出的现象', 'NumberFormatLocal属性', 'NumberFormatLocal属性，取得/设定单元格的表示形式。关于如何指定的值，请参照Tips152。', 'Sub Sample569()@            Dim curFormat As String@            Dim Target As Range@            Dim temp As Range@            Set Target = Range(\"A1\").CurrentRegion@            With Target@                Set Target = .Resize(.Rows.Count - 1, 1).Offset(1)@            End With@            <cite>#只取得A队列的数据变量	</cite>@            curFormat = Target.Cells(1,1).NumberFormatLocal@            <cite>#变量代入数据的最初的单元格的格式	</cite>@            Target.NumberFormatLocal = \"標準\"@            <cite>#把数据的格式设为【标准】</cite>@            Range(\"A1\").AutoFilter Field: = 1, _@                Criteria1:=CDbl(DateValue(\"2013/10/3\"))@            <cite>#自动筛选抽出「2013/10/3」的数据	</cite>@            For Each temp In Target@                temp.NumberFormatLocal = curFormat@            Next@            <cite>#到原来的形式返还数据单元格的表示形式	</cite>@        End Sub', '使用自动筛选抽出日期数据的时候，有Excel的版本和日期的表示形式的根据组合的不同不能抽出\n                的事。同时，这个组合是根据Excel的版本也变为了，是个难题。		\n	因此，由于在这里用序列值表示日期，回避序列值抽出的问题。', '/images/zhiku/TipsNO569-001.png', '/images/zhiku/TipsNO569-002.png', '', '', '', '(日期抽出数据)', '(被抽出的数据)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('569', '570', '避免在大量复制工作表的时候发生的错误', 'Close方法', 'Close方法，指定参数SaveChanges为True的话，保存对之前的更改，并关闭工作表。', 'Sub Sample570()@            Dim TargetBook As Workbook@            Dim Path As String@            Dim I As Long@            Set TargetBook = Application.Workbooks.Add@            <cite>#追加工作表</cite>@            TargetBook.Names.Add Name: = \"tempRange\", _@                RefersTo: = \" = Sheet1!$A$1\"@            <cite>#给单元格加名字</cite>@            Path = ThisWorkbook.Path &amp; \"\\Test.xlsx\"@            <cite>#把保存的文件名做为【Test.xlsx】</cite>@            TargetBook.SaveAs Path						<cite>#保存工作表</cite>@            For i = 1 To 275				<cite>#反复275次处理</cite>@                TargetBook.Worksheets(1).Copy _@                    After : = TargetBook.Worksheets(1)@            <cite>#复制工作单</cite>@                If i Mod 100 = 0 Then					<cite>#每100次进行处理</cite>@                    TargetBook.Close SaveChanges: = True@                    <cite>#写在上面的字保存关闭工作表</cite>@                    Set TargetBook = Nothing@                    Set TargetBook = Application.Workbooks.Open(Path)@                End If@            Next@        End Sub', '连续复制大量的工作单，有错误发生。根据使用的计算机环境，以哪个程度的次数发生错误不相\n同。要避免这个，对进行一定次数对象的工作表进行保存 · 关闭的操作。', '/images/zhiku/TipsNO570-001.png', '/images/zhiku/TipsNO570-002.png', '关于返回表示形式的处理', '要避免在大量复制工作表的时候的错误，也有使用模板文件的方法。\n            所谓模板文件，是扩展名【xltx】(Excel2003【xlt】)的文件。由于只持有1个作成的模板文件，从这个文件追加工作表，能避免错误发生。\n            下面的例子，追加与这个工作表同样的文件「Samle570_T.xltx」文件的kara工作表。', '', '(复制大量Sheet页)', '(复制的Sheet页)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('570', '571', '回避非表示的工作表和Activesheet属性的动作的差异', 'Visible属性', 'Visible属性，object指定工作表的话，能设定工作表的表示/非表示。详细内容请参照Tips214。', 'Sub Sample571()@            Dim temp As Worksheet@            With Worksheets(\"Sheet2\")							<cite>#对Sheet2工作表进行处理</cite>@                .Visible = True					<cite>#表示</cite>@                .Copy After : = Worksheets(\"Sheet2\")									<cite>#复制</cite>@                Set temp = ActiveSheet						<cite>#代入变量ActiveSheet</cite>@                temp.Name = \"Test\"					<cite>#变更工作表名</cite>@                .Visible = False				<cite>#把工作表变为非表示	</cite>@            End With@        End Sub', '使用Copy方法复制工作表，被复制的工作单进入活动。\n                在这里，利用代入变量ActiveSheet，在此后对那个工作表进行处理的情况进行说明。\n                Copy的原工作表是非表示的情况，拷贝后的工作表也成为非表示。在Excel2003，工作表名不管\n            是不是非表示的。用【Set temp = ActiveSheet】的记述，能代入变量拷贝后的工作表。\n                可是，在Excel2007中当然是这样，不过，非表示的工作表因为不表示，这个处理不是很好。\n                作为避免发生的策略，一旦拷贝的原工作表是表示的，进行拷贝后，再次要进行非表示处理。要避\n            免做这样的预期的动作。\n                还有，在这里拷贝后的工作表被表示，不过，那个工作表也想要是非表示的情况，进行重新要非表\n            示的设定。', '/images/zhiku/TipsNO571-001.png', '/images/zhiku/TipsNO571-002.png', '', '', '', '(复制隐藏的sheet页)', '(复制隐藏sheet页)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('571', '572', '避免大量的字符串的排列单元格粘贴的时候的cellar', 'Len函数', 'Len函数是返回指定字符串的长度。', 'Sub Sample572()@            Dim OriginData As Variant@            Dim v() As Variant@            Dim vAddress() As String@            Dim tempAddress() As String@            Dim num As Long@            Dim i As Long, j As Long@            Dim BaseRange As Range@            OriginData = Range(\"A1\").CurrentRegion.Value@            <cite>#取得单元格A1范围的数据排列</cite>@            ReDim v(1 To UBound(OriginData), 1 To UBound(OriginData, 2))@            <cite>#准备同样的大小的排列</cite>@            For i = LBound(OriginData) To UBound(OriginData)@                For j = LBound(OriginData, 2) To UBound(OriginData, 2)@                <cite>#对排列的全部的要素进行处理</cite>@                    If Len(OriginData(i, j)) &gt;= 912 Then@                    <cite>#912个字以上确认</cite>@                        num = num +1@                        ReDim Preserve vAddress(1 To num)@                        vAddress(num) = i &amp; \",\" &amp; j@                        <cite>#是912个字以上的情况，以逗号来分割数组元素号</cite>@                        <cite>#代入变量</cite>@                    Else@                        v(i, j) = OriginData(i , j)@                        <cite>#不满是912个字情况，变量容纳</cite>@                    End If@                Next@            Next@            Set BaseRange = Range(\"A5\")							<cite>#变量代入A5单元格</cite>@            BaseRange.Resize(UBound(v), UBound(v, 2)) .Value = v@            <cite>#粘贴不满912个字的数据</cite>@            For i = LBound(vAddress) To UBound(vAddress)@            <cite>#处理912个字以上的数据</cite>@                tempAddress = Split(vAddress(i), \",\")@                BaseRange.Cells(CLng(tempAddress(0)), _@                    CLng(tempAddress(1))) . Value _@                    = OriginData(tempAddress(0), tempAddress(1))@                <cite>#原来粘贴的数据容纳了变量的要素号码</cite>@                Erase tempAddress@            Next@        End Sub', '进行2次排列容纳了的数据到单元格的处理。如果在多的范围输入数据，能高速处理非常方便。\n	可是，扩展名是「.xls」的文件的情况，排列内有912个字以上的数据的话，发生错误。在这里，介\n绍那个避免发生的方法(如果Excel的版本是2007以后，使用扩展名「.xls」的文件，也会发生这个问题。\n	这个例子，单元格A1和单元格A2被输入数据。因为单元格A2被输入912个字的数据，排列容纳这个\n数据，输入到其他的单元格的话发生错误。在那里，一旦排列取得后，使用数据圈分别处理不是912个字以\n上的数据和是那样的数据。912个字以上的数据，用comma段落联结排列的要素号码，vAddress变量代入。\n	如果结束了，首先不满足912个字的数据先输入（这里指单元格A5以后）。此后，\n将原来的值输入到变量vAddress。每一个输入912个字以上的数据。\n	排列的要素号码，能要了基准的单元格地址和考虑对象单元格范围的左上端。为此，把输入处的单元格\n使用Cells属性做为基准。', '/images/zhiku/TipsNO572-001.png', '/images/zhiku/TipsNO572-002.png', '', '', '', '(912以上的数据输入到其他的单元格)', '(数据输入到单元格A5之后的单元格)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('572', '573', '自动关闭打开文件时表示的【名称冲突】对话框', 'SendKeys声明', 'SendKeys声明，一个活动窗口，就如同在键盘上进行输入一样。String参数是指定要发送的按键\n消息。Wait参数可以省略。如果为True，则中断按键消息在控件返回过程并加以处理。', 'Public Declare Function SetTimer Lib \"user32.dll\" _@            (ByVal hWnd As Long, ByVal nIDEvent As Long, _@            ByVal uElapse As Long, ByVal lpTimerFunc As Long) As Long@        Public Declare Function KillTimer Lib \"user32.dll\" _@            (ByVal hWnd As Long, ByVal nIDEvent As Long)  As Long@        Public Declare Function FindWindow Lib \"user32.dll\" _@            Alias \"FindWindowA\" _@            (ByVal lpClassName As String, ByVal lpWindowName As String)  As Long@        Sub Sample573()@            Dim TimerID As Long@            timerID = SetTimer(0, 0, 100, AddressOf TimerProc)@            <cite>#开始计时器的监视</cite>@            Workbooks.Open ThisWorkbook.Path &amp; \"\\NameConflictSample.xls\"@            <cite>#打开工作表</cite>@            KillTimer 0, timerID					<cite>#终止计时器监视</cite>@        End Sub@        Sub TimerProc()@            Dim hWnd As Long@            hWnd = FindWindow(\"bosa_sdm_XL9\", \"名称冲突\")@            <cite>#监视【名称冲突】对话框</cite>@            If hWnd &gt; 0 Then@            <cite>#确认【名称冲突】对话框是否可见</cite>@                SendKeys GetString, True						<cite>#输入字符串</cite>@                SendKeys \"(ENTER)\"					<cite>#输入【Enter】键</cite>@            End If@        End Sub@        Function GetString() As String@            Dim str As String@            Dim i As Long@            For i = 0 To 4				<cite>#分别处理5个文字</cite>@                Randomize@                str = str &amp; Chr(65 + Int(Rnd * 10))@                <cite>#使用【A】以后的字符串、random制作字符串</cite>@            Next@            GetString = str@        End Function', '打开工作表的时候，【名称冲突】对话框打开。手动操作是好的吗？使用VBA处理打开连续的复数的\nbook的时候，这个对话框打开中断程序，不能真正的实现自动化。		\n	在这里，介绍了处理那样情况的方法。这个例子，使用SetTimerAPI函数，FindWindowAPI函数，检查\n【名称冲突】对话框是否被表示。SetTimerAPI函数，每指定了的时间能调用过程。调用的过程中，使用\nFindWindowAPI函数，送到【名称冲突】对话框。用这样做的事，抵御处理中断的事。	\n	如果【名称冲突】对话框打开，调用GetString函数，用SendKeys声明，到【名称冲突】对话框\n赋给随机的字符串。用这样的事，抵御处理中断的事。', '/images/zhiku/TipsNO573-001.png', '/images/zhiku/TipsNO573-002.png', '', '', '', '', '', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('573', '574', '避免Excel2007以后保存扩展名「.xls」的文件时的故障', 'SaveAs声明', 'SaveAs方法，给工作表添加名字保存。为了与Excel2003环境共存，Excel2007以后保存扩展名\n【.xls】的文件的时候，对参数FileFormat「xlExcel8」指定。', 'Sub Sample574()@            Dim TargetBook As Workbook@            Set TargetBook = Workbooks.Add								<cite>#追加新的工作表</cite>@            If Val(Application.Version) &gt;= 12 Then@            <cite>#检查Excel的版本</cite>@                TargetBook.SaveAs Filename: =ThisWorkbook.Path &amp; \"\\Test.xls\" _@                    , FileFormat: =XlFileFormat.xlExcel8@                <cite>#Excel2007以后的情况，指定参数FileFormat保存</cite>@            Else@                TargetBook.SaveAs Filename: =ThisWorkbook.Path &amp; \"\\Test.xls\"@                <cite>#Excel2007以前的情况，就这样保存</cite>@            End If@        End Sub', '从Excel2007，FileFormat发生大幅度改变。为此，Excel2007以后保存扩展名【.xls】的文件的时\n候，不指定FileFormat保存的话，以Excel2003等打不开那个文件的现象有发生。要避免这个，就要指\n定SaveAs方法的参数FileFormat为【xlExcel8】。	\n	但是，这个定数因为在Excel2007以前不存在，如果那样使用的话，以Excel2003实行程序的时候会\n发生错误。		\n	无论在哪，都要使用Version属性检查Excel的版本，进行分开处理。', '', '', '', '', '', '', '', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('574', '575', '设置·删除附加条件格式', 'Add方法/Delete方法', 'FormatConditions集合的Add方法，设置附加条件格式。FormatConditions集合，是附加\n条件格式的集合。关于各自的参数，请参照「详解」。', 'Sub Sample575()@            With Range(\"F2:F11\")@                .FormatConditions.Add( _@                    Type:=xlCellValue _@                    , Operator:=xlGreater, Formula1:=500000) _@                    .Interior.Color = vbYellow@                <cite>#单元格F2~F11的值在[500000]以上的时候单元格为黄色</cite>@                <cite>#附加条件格式的背景颜色设定</cite>@                MsgBox \"附加条件格式的设定\"									<cite>#信息表示</cite>@                .FormatConditions.Delete							<cite>#删除附加条件格式</cite>@            End With@        End Sub', '在这里，对单元格F2～F11，单元格的价设定是「500000」以上的时候把单元格背景颜色做为\n「黄色」的附加条件格式。设定后用提示框表示，此后，用Delete方法删掉附加条件格式。	\n	Add方法的设定值，请参考下面。', '/images/zhiku/TipsNO575-001.png', '/images/zhiku/TipsNO575-002.png', '只删除一个附加条件格式', '如果附加条件格式不是全部，只删掉指定了的设定，FormatConditions集合指定index号码。', '', '(附加条件格式的设定)', '(附加条件格式的设定)', '2017-11-30 14:05:10', null, null, '[{\"title\":\"Add方法设定的项目\",\"heads\":[\"名称\",\"说明\"],\"rows\":[[\"Type\",\"以单元格对象的附加的条件格式为基础作为指定XlFormatConditionType类的值\"],[\"Operator\",\"指定附加条件格式的运算符。参数Type是xlExpression的情况被省略。\"],[\"Formula1\",\"使之关联的值再指定为附加条件格式对象。常量值，字符串值，指定单元格参照，或算式。\"],[\"\",\"\",\"工作簿\"],[\"Formula2\",\"如果xlBetween又指定了xlNotBetween为参数Operator，使之有关的附加条件格式的\\n                    第2号的部分的值再指定对象。如果指定了那个以外，这个参数被省略。\"]]},{\"title\":\"指定参数为Type的XlFormatConditionType类的值\",\"heads\":[\"名称\",\"说明\"],\"rows\":[[\"xlAboveAverageCondition\",\"平均以上的条件\"],[\"xlBlanksCondition\",\"空白的条件\"],[\"xlCellValue\",\"单元格的值\"],[\"xlColorScale\",\"Color Scale\"],[\"xlDatabar\",\"数据库\"],[\"xlErrorsCondition\",\"错误条件\"],[\"xlExpression\",\"算式\"],[\"XllconSet\",\"图标组套\"],[\"xlNoBlanksCondition\",\"没有空白的条件\"],[\"xlNoErrorsCondition\",\"没有错误的条件\"],[\"xlTextString\",\"text文本\"],[\"xlTimePeriod\",\"期间\"],[\"xlTop10\",\"最上面的10个的值\"],[\"xlUniqueValues\",\"唯一值\"]]},{\"title\":\"指定参数为Operator的XlFormatConditionOperator类的值\",\"heads\":[\"名称\",\"说明\",\"名称\",\"说明\"],\"rows\":[[\"xlBetween\",\"下面的值之间\",\"xlLess\",\"下面的值比较小\"],[\"xlEqual\",\"下面的值相等\",\"xlLessEqual\",\"下面的值以下\"],[\"xlGreater\",\"下面的比较大\",\"xlNotBetween\",\"下面的值之间之外\"],[\"xlGreaterEqual\",\"下面的值以上\",\"xlNotEqual\",\"下面的值不相等\"]]}]');
INSERT INTO `t_tips` VALUES ('575', '576', '变更附加条件格式的设定', 'Modify方法', 'Modify方法，变更附加条件格式的设定。指定FormatCondition对象，Modify方法的参数与Add\n方法同等。请参照Tips575。', 'Sub Sample576()@            Range(\"F2:F11\").FormatConditions(1).Modify _@                Type:=xlCellValue, Operator:=xlLess, Formula1:=300000@            <cite>#设定单元格F2~F11的附加1格条件的格式，值不满足30000</cite>@        End Sub', '在这里，变更事先被单元格范围F2～F11设定的附加条件格式的第1号的设定。\n	不变的条件，是单元格的值是[500000]以上的情况，用[黄色]全面涂抹单元格。变更的条件，单元格\n的值不满足[30000]的数据的设定。', '/images/zhiku/TipsNO576-001.png', '/images/zhiku/TipsNO576-002.png', '变更指定的格式', '用Modify方法能变更的是附加的条件。如果对条件有格式的也要变更，用Delete方法附带一次Add方法一次，再次设定附加条件格式。', '', '(变更附加条件格式的设定)', '(变更设定)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('576', '577', '调查被设定的带条件格式的数', 'Count属性', 'Count属性是Object的FormatCondition收集设定的带条件格式的数。', 'Sub　Sample577(　)@            MsgBox\"设定格式的数:\" &amp;　_@                Range(\"F2:F11\").FormatConditions.Count@            <cite>#cellF2～F11被设定带条件格式的数	</cite>@            <cite>#在消息箱中表示	</cite>@        End Sub', '在这里cellF2～Ｆ11设定的带格式的数，在消息箱中表示。', '/images/zhiku/TipsNO577-001.png', '/images/zhiku/TipsNO577-002.png', '', '', '', '(设定条件格式的数)', '(表示慢速条件格式的数)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('577', '578', '变更带条件格式规则的优先级', 'Priority方法', 'Priority方法是取得被设定条件格式的优先级名次。', 'Sub　Sample577(　)@            Range(\"F2:F11\").FormatConditions（3）.Priority = 1@            <cite>#cellF2～F11被这顶的待条件格式的数		</cite>@        End Sub', '在这里cellF2～Ｆ11被变更的待条件的格式里面，第3号被设定的条件到第一号。', '/images/zhiku/TipsNO578-001.png', '/images/zhiku/TipsNO578-002.png', '把在工作单全体的优先名次作为最优先', '使用SetFirstPriority方法把工作单全体的优先名次作为最优先。如果反过来把优先名次作为最后，使用\n            SetLastPriority方法。关于SetFirstPriority方法，请参考下面的用例。', 'Sub Sample578_2( )@                        Range(\"F2:F11\").@                    FormatConditions（3）.SetFirstPriority@                    End Sub', '(条件格式优先级被变更时)', '(条件格式优先级被变更后)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('578', '579', '数据栏的表示', 'AddDatabar方法/MaxPoint属性/MinPoint属性', 'AddDatabar方法，带条件格式设定数据栏。同时，MaxPoint属性，MinPoint属性，还表示数据\n   栏的最长・最短的位置返回ConditonValue对象。使用这个ConditionValue客观的Modify方法，进行\n   有数据栏的设定。能设定的价值，请参照【详解】。', 'Sub    Sample579()@            With   Range(\"F2:F11\")@                .FormatConditions.AddDatabar						　<cite>#追加数据栏</cite>@                With  .FormatConditions(1)						　<cite>#对数据栏的处理</cite>@                    .ShowValue = True				　<cite>#值的表示</cite>@                    .MinPoint.Modify  _@                        newtype:=xlConditionValueLowestValue@                    　<cite>#最小值在范围内的最小值的比例</cite>@                    .MaxPoint.Modify  _@                        newtype:=xlConditionValueHighestValue@                    　<cite>#最大值在范围内的最大值的比例</cite>@                    .BarColor.Color = RGB(225,0,0)@                    　<cite>#数据栏的颜色指定为红色</cite>@                End  With@            End  With@        End   Sub', '单元格F2~F11里(设定红色的数据栏)。ShowValue属性指定为True的话，显示数据的值。\nMinPoint属性，指定为MaxPoint属性的Modify方法的参数newtype的值，如下显示', '/images/zhiku/TipsNO579-001.png', '/images/zhiku/TipsNO579-002.png', '', '', '', '(设定数据栏)', '(数据栏被设定)', '2017-11-30 14:05:10', null, null, '[{\"title\":\"指定Modify方法的参数newtype的XlCondtionValueTypes class的值\",\"heads\":[\"名称\",\"说明\"],\"rows\":[[\"XlCondtionValueAutomaticMax\",\"最长数据栏，范围最大值的比例\"],[\"XlCondtionValueAutomaticMin\",\"最短数据栏，范围最小值的比例\"],[\"XlCondtionValueFormula\",\"算式的使用\"],[\"XlCondtionValueHighestValue\",\"值一览的最高值\"],[\"XlCondtionValueLowestValue\",\"值一览的最低值\"],[\"XlCondtionValueNone\",\"条件值无效\"],[\"XlCondtionValueNumber\",\"数字的使用\"],[\"XlCondtionValuePercent\",\"百分比的使用\"],[\"XlCondtionValuePercentile\",\"百分位的使用\"]]}]');
INSERT INTO `t_tips` VALUES ('579', '580', '设定颜色比例的带条件的格式', 'AddColorScale方法', 'AddColorScale方法是设定颜色比例的方法。表示颜色比例的色数的2在指定为参数ColorScaleType\n为3。', 'Sub   Sample580()@            With   Range(\"F2:F11\")@                .FormatConditions.AddColorScale   ColorSanleType: =3@                　<cite>#设定3色的颜色比例</cite>@                With . FormatConditions(1)@                    With . ColorScaleCriteria(1)								　<cite>#第1号颜色的设定</cite>@                        .Type=xlConditionValueLowestValue@                        　<cite>#最小值在范围的最小值有的比例</cite>@                        .FormatColor.Color =RGB(255,0,0)@                        　<cite>#颜色为红色</cite>@                    End  With@                    With . ColorScaleCriteria(2)@                        .Type  = XlConditionValuePercentile							　<cite>#第2号颜色的设定</cite>@                        <cite>以百分率指定</cite>@                        .Value  =50				　<cite>#以50%做为基准</cite>@                        .FormatColor.Color  = RGB(0,255,0)@                        　<cite>#颜色为绿色</cite>@                    End  With@                    With  .ColorScaleCriteria(3)								　<cite>#第3号颜色的设定</cite>@                        .Type =  xlConditionValueHigheatValue@                        　<cite>#最大值在范围的最大值有的比例</cite>@                        .FormatColor.Color  = RGB(0 ,0 ,255)@                        　<cite>#颜色为蓝色</cite>@                    End  With@                End With@            End  With@        End  Sub', '设定颜色比例。颜色比例指定范围在2色和3色之间。阶段性地使之变化涂开指定了的单元格的\n   范围。首先用AddColorScale方法设定颜色比例。ColorScaleCriteria属性，设定颜色比例的颜色。\n  Type属性指定的价值，与资料指定的ConditionValue属性的Modify方法的价值同样。详细请参考\n Tips579', '/images/zhiku/TipsNO580-001.png', '/images/zhiku/TipsNO580-002.png', '', '', '', '(设定颜色比例)', '(颜色比例被设定)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('580', '581', '图标组的条件附加格式的设定', 'AddlconSetCondition 方法', 'AddlconSetCondition 方法追加带条件格式的图标组。图标组是按照被输入值，单元格3～5格分类\n表示图标。', 'Sub  Sample581()@                With Range(\"F2:F11\").FormatConditions.AddIconSetCondition@               <cite>#单元格F2～F11的图标设定</cite>@                    .ShowIconOnly = False   <cite>#显示图标值</cite>@                    .IconSet = _@                               ThisWorkbook.IconSets(x13Arrows)@                          <cite>#3个箭形符号图标的设置</cite>@            　　With .IconCriteria(2)@                   .Type = x1ConditionValuePercentile@                   .Value = 30@                   .Operator = xlGreater@                  <cite>#第二个图标要全体值在30％以上</cite>@                 End With@            　　With .IconCriteria(2)@                   .Type = x1ConditionValuePercentile@                   .Value = 60@                 　.Operator = xlGreater@                  <cite>#第三个图标要全体值在30％以上</cite>@                  End With@             End With@        End Sub', '单元格F2～F11设置为图标组。在这里设定为「三个箭形符号（用彩色加以区别）」。Showlcon-\n                Only的属性设置成False，显示图标和单元格两者的值，当指定为True时，只有图标显示。	\n	关于lconCriteria对象的图标设置。Type属性设定值的设置方法。显示的值，与数据栏指定的\nConditionValue属性的Modify方法的值相同。详情请参照Tips579。		\n         	指定Value属性阈值的值、指定Operator属性的值、与FormatConditions收集的Add方法相同。\n详情请参照Tips575。		\n　	表示图标组lconSets属性的指定值如下', '/images/zhiku/TipsNO581-001.png', '/images/zhiku/TipsNO581-002.png', '', '', '', '(设置图标组)', '(图标组已设置)', '2017-11-30 14:05:10', null, null, '[{\"title\":\"指定Modify方法的参数newtype的XlCondtionValueTypes class的值\",\"heads\":[\"名称\",\"说明\"],\"rows\":[[\"xl3Arrows1\",\"3个箭形符号\"],[\"xl3ArrowsGray\",\"3个灰色的箭形符号\"],[\"xl3Flags\",\"3个标志\"],[\"xl3Signs\",\"3个签字\"],[\"xl3Stars\",\"3个星\"],[\"xl3Symbols\",\"3个记号\"],[\"xl3TrafficLights1\",\"3个交通信号（无框）\"],[\"xl3TrafficLights2\",\"3个交通信号（有框）\"],[\"xl3Triangles\",\"3种三角形\"],[\"xl4Arrows\",\"4个箭形符号\"],[\"xl4ArrowsGray\",\"4个灰色的箭形符号\"],[\"xl4CRV\",\"4个评价\"],[\"xl4RedToBlack\",\"红色和黑色的圈\"],[\"xl4TrafficLights\",\"4个交通信号\"],[\"xl5Arrows\",\"5个箭形符号\"],[\"xl5ArrowsGray\",\"5个灰色的箭形符号\"],[\"xl5Boxes\",\"5个按钮\"],[\"xl5CRV\",\"5个评价\"],[\"xl5Quarters\",\"黑白的圈\"]]}]');
INSERT INTO `t_tips` VALUES ('581', '582', '负号的数据设定', 'NegativeBarFormat 属性/AxisPosition 属性', 'NegativeBarFormat属性是，数据是负的值的场合的颜色的设定实行。\nAxisPosition属性是，数据的轴的位置的指定。指定的值是，「xlDataBarAxisAutomatic(自动)」\n和「xlDataBarAxisMidpoint(中央)」的任何一个。', 'Sub Sample582()@            With Range(\"A2 : A11\")@                .FormatConditions.AddDatabar     		<cite>数据追加</cite>@                With.FormatConditions(1)@                    .NegativeBarFormat.ColorType = xlDataBarColor@                    <cite>负的值使用指定颜色</cite>@                    .NegativeBarFormat.Color.Color = RGB(255, 0, 0)@                    <cite>负的值使用红色</cite>@                    .AxisPosition = xlDataBarAxisMidpoint@                    <cite>轴的位置在中央	</cite>@                End With@            End With@        End Sub', '数据中，负号的值的场合的实行设定。NegativeBarFormat对象的颜色类型属性，指定\nxlDataBarColor，正的数据指定不一样的颜色。并且和正的数据相同的场合，需要指定\nxlDataBarSameAsPositive。指定颜色属性是红，AxisPosition属性，轴的位置显示在\n中央。', '/images/zhiku/TipsNO582-001.png', '/images/zhiku/TipsNO582-002.png', '', '', '', '(负号的数据设定)', '(数据被设定了)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('582', '583', '单元格范围名称定义', 'Name  属性', 'Name 属性是,关于单元格范围取得单元格名称和设定.设定单元格名称是,Range属性的参数\n可能被指定.并且,实行设定眼熟啊的范围,印刷范围(Print_Area)选中的单元格范围的名称自动\n被赋予.', 'Sub Sample583()@            Dim Target As Range@            Set Target = Range(\"A1\").CurrentRegion@            <cite>取得单元格A1范围内包含的值</cite>@            With Target@                Set Target = .Resize(.Rows .Count - 1).Offset(1)@            End With@            <cite>取得选中单元格以外的值</cite>@            Target.Name = \"数据范围\"						<cite>单元格范围名称(数据范围)	</cite>@            Range(\"数据范围\").Select						<cite>(数据范围)选择</cite>@        End Sub', '单元格A1以下的表,选中的显示出单元格(A2-F7)是在(数据范围)内,赋予单元格范围名称\n这个单元格范围名称的使用,选择单元格名称', '/images/zhiku/TipsNO583-001.png', '/images/zhiku/TipsNO583-002.png', '', '', '', '(单元格范围设定)', '(单元格范围名称设定)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('583', '584', '单元格范围名称编辑', 'Name 属性', 'Name 属性是,指定目标单元格范围的收集返回.参数index的index序号仍然单元格范围名称被指定\n取得已经存在的单元格范围名称表示Name 目标对象', 'Sub Sample584()@            Dim Target As Range@            Set Target = Range(\"A1\").CurrentRegion@            With Target@                Set Target = .Resize(.Rows.Count - 1).Offset(1)@            End With@            <cite>取得单元格A2-F7的数据范围</cite>@            Target.Name = \"数据范围\"						<cite>赋予(数据范围)和单元格范围名称</cite>@            ThisWorkbook.Names(\"数据范围\").Name = \"数据领域\"@            <cite>单元格范围名称变更为(数据领域)</cite>@            Range(\"数据领域\").Select@            <cite>选择(数据领域)单元格范围</cite>@        End Sub', '这里是,单元格A2-F7中(数据范围)和单元格范围名称的设定后,将单元格范围名称变更为\n(数据领域).	\n已经存在的单元格范围名称,Name 属性能够取得.取得Name 目标对象,使用Name 属性\n赋予单元格范围名称值.', '/images/zhiku/TipsNO584-001.png', '/images/zhiku/TipsNO584-002.png', '', '', '', '(单元格范围名称变更)', '(单元格范围名被变更了)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('584', '585', '单元格范围名称删除', 'Delete 方法', 'Delete 方法是, object对应的Name 目标对象指定的,能够删除指定的单元格范围名称.', 'Sub Sample585()@            ThisWorkbook.Names(\"数据领域\").Delete@            <cite>单元格范围名称(数据领域)的删除</cite>@        End Sub', '这里是,单元格A2-F7(数据领域)的单元格范围名称的设定,那个单元格范围名称被删除了', '/images/zhiku/TipsNO585-001.png', '/images/zhiku/TipsNO585-002.png', '单元格范围名称的对象范围', '这里是,书的单元格范围名称的对象\n            这个好处是,Name属性是ThisWork\n            book对象,工作页面水准的单元格\n            范围名称的对象的场合是,指定工作页面.', '', '(单元格范围名称设定)', '(单元格范围名称删除)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('585', '586', '工作簿内定义的名称全部删除', 'Delete 方法', 'Delete 方法是, object对应的Name 目标对象指定的,能够删除指定的单元格范围名称.', 'Sub Sample586()@            Dim temp As Name@            For Each temp In ThisWorkbook.Names@            <cite>实行对书内全部的单元格范围名称处理</cite>@                temp.Delete				<cite>删除单元格范围名称</cite>@            Next@        End Sub', '单元格范围名称用集合表示,Name属性是没有Delete方法的.所以全部的单元格范围\n名称的删除,使用循环处理删除单元格范围名称.\n这里是,使用For Each 测试,书中的单元格范围名称全部删除.', '/images/zhiku/TipsNO586-001.png', '/images/zhiku/TipsNO586-002.png', '单元格范围名称的对象范围', '这里是,书的单元格范围名称的对象\n            这个好处是,Name属性是ThisWork\n            book对象,工作页面水准的单元格\n            范围名称的对象的场合是,指定工作页面.', '', '(单元格范围名称设定)', '(单元格范围名称删除)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('586', '587', '插入解说', 'AddComment 方法', 'AddComment方法是，对单元格追加评语。对参数Text用指定的字符串评语表示。', 'Sub Sample587()									<cite>#追加单元格A1的解说</cite>@            Range(\"A1\").AddComment \"售出日\"@        End Sub', '给单元格A1追加评语[售出日]。AddComment方法追加解释，设置解释后，鼠标光标如果不点击解说\n就会变为不表示状态。', '/images/zhiku/TipsNO587-001.png', '/images/zhiku/TipsNO587-002.png', 'AddComment方法的注意点', 'AddComment方法，对已经存在的单元格\n            设置插入解说程序执行会出现错误。使用Type\n            Name对是否已经设置解说进行判断。下次请参\n            照样本。', 'Sub Sample587_2()@                        If  TypeName  _@                            (Range(\"A1\").Comment) _@                            = \"Comment\" Then@                            MsgBox　_@                             \"设置解说\"@                        End If@                    End Sub', '(插入解说)', '(解说插入后)', '2017-11-30 14:05:10', null, null, '');
INSERT INTO `t_tips` VALUES ('587', '588', '显示全部的Comment', 'DisplayCommentIndicator属性', 'DisplayCommentIndicator属性，在指定单元格里标记Comment。设定的值请参照详解。', 'Sub Sample588()@                Application.DisplayCommentIndicator = xlCommentAndIndicator@                <cite>#显示Comment</cite>@        End Sub', '在这里，显示全部的Comment。DisplayCommentIndicator指定的值，如下。', '/images/zhiku/TipsNO588-001.png', '/images/zhiku/TipsNO588-002.png', '', '', '', '(显示全部Comment)', '(提示所有的Comment)', '2017-11-30 14:05:11', null, null, '[{\"title\":\"DisplayCommentIndicator执行ＸｌCommentDisplayMode级的定数\",\"heads\":[\"姓名\",\"说明\"],\"rows\":[[\"xlCommentAndIndicator\",\"通常表示标记Comment\"],[\"xlCommentIndicatorOnly\",\"显示标记的Comment当鼠标指针移动到指定单元格时，显示Comment。\"],[\"xlNoIndicator\",\"不显示Comment。\"]]}]');
INSERT INTO `t_tips` VALUES ('588', '589', '指定显示的说明', 'Visible属性', '特定说明的表示与非表示的转换时，利用Visible属性。', 'Sub　Sample589（）@            Range(\"A1\").Comment.Visible　=True@            <cite>#单元格A1设置Comment显示</cite>@        End　Sub', '在这里，我worksheet从A1到E1设置Commen。此外，单元格A1设置Comment显示。', '/images/zhiku/TipsNO589-001.png', '/images/zhiku/TipsNO589-002.png', 'Comment的显示与不显示的切换', 'Comment的表示与非表示转换，下面的叙述。这个例子每次执行，单元格A1的Comment的表示与非表示依次转换。', 'Sub Sample589_2()@                    Range(\"A1\").Comment.Visible = _@                    Not Range(\"A1\").Comment. Visible@                    End Sub', '(显示单元格A1Comment)', '(显示单元格A1的Comment)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('589', '590', '删除Comment', 'ClearComment方法', '', 'Sub Sample590()@            Range(\"A1\").ClearComments@        End Sub', 'A1单元格设定Comment删除', '/images/zhiku/TipsNO590-001.png', '/images/zhiku/TipsNO590-002.png', '删除全部的Comment', 'ClearComment方法，组件范围内的也是可以的。下面这个例子，是删除所有Sheet页的Comment。', 'Sub　Sample590_2()@                        ActiveSheet。Cells.ClearComments@                    End Sub', '(删除Comment)', '(删除后)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('590', '591', '宏观分配的快捷键', 'OnKey方法', 'OnKey方法,变量Key按指定的关键字，程序指定执行设定的方法。该方法使用，\n宏观上指定快捷键就好了。另外，取消设置时，指定相同的Key，程序指定为空白。', 'Sub Sample591()@                            Application.OnKey Key:=\"^{+}\",Procedure:=\"Sample591_2\"@                            <cite>#「Sample591_2」设定程序的快捷键Ctrl+\"+\"</cite>@                        End Sub@                        Sub Sample591_2()@                            MsgBox\"快捷方法\"								<cite>#MsgBox表示</cite>@                        End Sub', '在这里，[Sample591_2]Ctrl+\"+\"可以执行程序。首先，请先要执行程序[Sample591]\n                    然后，按下Ctrl+\"+\"的时候，MsgBox会提醒。另外，OnKey方法的变量Key指定的值，请参\n                    考Tip509。', '/images/zhiku/TipsNO591-001.png', '/images/zhiku/TipsNO591-002.png', '文件打开的时候开始快捷键的使用', '打开文件的情况下是可以使用快捷键的，OnKey可以记述在WorkBook的Open方法中。', '', '', '', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('591', '592', '处理测量时间', 'Timer函数', 'Timer函数，返回上午经过的秒数。', 'Sub Sample592()@                            Dim t As Single@                            Dim I As Long@                            t = Timer     <cite>#取得显示时间	</cite>@                            Do@                                I = I + 1@                            Loop Until I &gt;100000000　　　　　<cite>#循环处理</cite>@                            MsgBox Timer - t &amp; \"秒\"								<cite>#MsgBox表示</cite>@                        End Sub', '使用Timer函数，处理时间进行测量。Timer函数，返回上午经过的秒数。\n因此，获得时间，然后开始处理，处理结束时间停止，这样就能获得处理时间。', '/images/zhiku/TipsNO592-001.png', '/images/zhiku/TipsNO592-002.png', 'Timer函数需要注意的地方', 'Timer函数是返回上午0点经过的秒数。这是，日期时间没有变的时候。当时间超过处理时间的时候，第一天和第二天必须分两次处理。', '', '', '', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('592', '593', '不表示确认的信息', 'DisplayAlert函数', 'DislayAlert属性，确认设定消息的表示与非表示。默认为True。指定False的话，\n  确认的消息变得不被表示。Object，指定Application客观。', 'Sub Sample593()@                            Application.DisplayAlerts = False							<cite>#确认消息是非表示</cite>@                            Worksheets(\"Sheet2\").Delete							<cite>#确定sheet页</cite>@                            Application.DisplayAlerts = True							<cite>#确认表示的Msg属性是true</cite>@                        End Sub', '在这里，把删掉工作单的时候被表示的确认的消息做为非表示。这样做，删除Sheet页时，\n就无法中断处理了。', '/images/zhiku/TipsNO593-001.png', '/images/zhiku/TipsNO593-002.png', 'DisplayAlerts返回True属性的处理', 'VBA的方法，DisplayAlerts属性运行结束后会自动地返回到True。可是，也有根据使用环境的不同不返回的时候，为了确定处理，返还到True记述处理记述。', '', '', '', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('593', '594', '中断过程的实行', 'Wait方法', 'Wait方法，中断处理指定参数time的时间。', 'Sub Sample594()@                        Sub Sample594()@                            <cite>MsgBox\"中断处理\"</cite>@                            Application.Wait Now + TimeValue(\"00:00:05\")@                            <cite>MsgBox\"重新处理\"</cite>@                        End Sub', '这里，一旦提示Msg消息，点击OK按钮后，处理中断5秒。中断后提示消息。', '/images/zhiku/TipsNO594-001.png', '/images/zhiku/TipsNO594-002.png', 'Stop声明', 'Wait方法，由于处理的情况让程序停止运行一段时间，同样是中断命令，Stop有声明。这个，不是中断处理指定的时间，完全在Stop处停止中断处理。\n            为此，在程序的动作确认（debug）时使用。Stop声明，中断程序的动作，能确认窗口变量的内容等，被表示从VBE的「表示」菜单单击「窗口」。', '', '', '', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('594', '595', '指定时间运行程序', 'OnTime方法', 'OnTime方法，指定参数EarliestTime的时刻，参数Procedure指定程序的运行。', 'Sub Sample595()@                            Application.Ontime　EarliestTime:=Now + TimeValue(\"00:00:05\")@                            ,Procedure:=\"Sample595_2\"					<cite>#从现在开始5秒后运行 Sample595_2程序</cite>@                        End Sub@                        　Sub Sample595_2()@                            MsgBox\"运行Sample_2\"						<cite>#Msg表示</cite>@                        End Sub', '使用OnTime方法，指定时间运行程序。在这里，OnTime方法，参数EarliestTime使用Now函数\n取得了的现在的时刻，使用TimeValue函数5秒后，运行Sample595_2程序，Sample595_2程序\n运行后，提示Msg消息。', '/images/zhiku/TipsNO595-001.png', '/images/zhiku/TipsNO595-002.png', 'OnTime方法和通用的程序呼叫', 'OnTime方法，不仅仅在指定了的时刻运行程序，OnTime方法以后的处理也继续进行，通常程序会呼叫异常。通常一个程序调到另一个程序时，呼叫程序处理会停止。呼叫原来程序会中断。可是，OnTime方法会运行，请注意。', '', '(5秒后Msg提示)', '(Msg提示)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('595', '596', '程序执行中Windows控制返回', 'DoEcents函数', 'DoEvents函数是处理时通过操作系统控制。', 'Sub  Sample596()@                            Dim  i  As  Long@                              Do          <cite># 作循环处理</cite>@                    　　　　　　i  =  i  +  1@                                         DoEvents          <cite>#通过OS控制</cite>@                    　　　     Loop  Until   I   &gt;  1000000@                    　　　     MsgBox  \"over”　　　<cite>#显示信息内容</cite>@                        End  Sub', '那么在这，使用DoEvents函数，循环处理的时候一边用OS处理要点，一边通过OS控制。\nDoEvents函数在文件检索开始之后处理，对用户取消有很大作用。', '/images/zhiku/TipsNO596-001.png', '/images/zhiku/TipsNO596-002.png', '事件程序的并用', '事件程序产生暂时的处理，由于产生包括比例的不同，所以有必要注意。还有，通过操作系统\n            控制的时候。其他的应用不能确定程序最后可行性的方法时，DoEvents函数不可使用', '', '(处理时用OS控制返回)', '(循环处理时单元格选择的完好处理)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('596', '597', '添加超链接', 'Hyperlink对象/Add方法', '添加超链接需要使用Hyperlink对象和Add方法。关于指定Add方法的值，请参照解说', 'Sub  Sample597()@                        　　　　　Worksheets(\"Sheet1\").HyperLinks.Add  _@                                    Anchor:=Range(\"A1\")  _@                                        ,   Address:=\"http://www.shuwasystem.co.jp/product.html\"  _@                                        ,   TextToDisplay:=\"搜索\"@                        　　　　　<cite>#设置单元格A1的超链接，显示字符串“搜索”</cite>@                            End Sub', '在这里，设置单元格A1的超链接。先链接“http://www.shuwasystem.co.jp/\n	    product.html”，显示字符串“看”。\n	   下面是指定Add方法值的统称。', '/images/zhiku/TipsNO597-001.png', '/images/zhiku/TipsNO597-002.png', '', '', '', '(设置单元格A1的超链接)', '(设置单元格A1的超链接之后)', '2017-11-30 14:05:11', null, null, '[{\"title\":\"Add方法指定值\",\"heads\":[\"名称\",\"说明\"],\"rows\":[[\"Anchor\",\"指定超链接特别链接的对象\"],[\"Address\",\"指定超链接的地址\"],[\"SubAddress\",\"指定超链接的亚地址\"],[\"ScreenTip\",\"指定超链接上的鼠标指针指定的时候特别显示\"],[\"TextToDisplay\",\"指定超链接特别显示文本\"]]}]');
INSERT INTO `t_tips` VALUES ('597', '598', '删除超链接', 'Delete方法', 'Delete方法是将object指定为HyperLink对象，删除超链接。', 'Sub  Sample598()@                                Worksheets(\"Sheet1\").HyperLinks.Delete@                                <cite># 删除Sheet1的第一行</cite>@                            End  Sub', '删除设置在单元格A1的超链接。解除超链接后，使用Delete方法', '/images/zhiku/TipsNO598-001.png', '/images/zhiku/TipsNO598-002.png', '删除所有超链接', '删除指定工作表所有超链接。HyperLinks属性的索引号未指定实行删除方法。', 'Sub    Samlpe598_2()@                    worksheets(\"Sheet1\")._@                    Syperlinks.Delete@                    End  Sub', '(删除超链接)', '(删除超链接之后)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('598', '599', '执行超链接', 'Follow方法', '利用Follow方法先显示设置的超链接。关于指定变量的值，请参照解说', 'Sub   Sample599()						　@                     Worksheets(\"Sheet1\").HyperLinks(1).Follow       <cite># 执行超链接</cite>@        　　　　　	End  Sub', '在这里，执行单元格A1设定的超链接，打开设定的位置。指定Follow方法变量的值\n                  如下所示', '/images/zhiku/TipsNO599-001.png', '/images/zhiku/TipsNO599-002.png', '', '', '', '(执行超链接)', '(执行超链接后，显示网点)', '2017-11-30 14:05:11', null, null, '[{\"title\":\"Follow方法的参数\",\"heads\":[\"名称\",\"说明\"],\"rows\":[[\"NewWindow\",\"设置这个变量表示新的目的窗口的应用。默认值是False\"],[\"AddHistory\",\"修改正在使用的变量\"],[\"ExtraInfo\",\"为了解决超连接的指定字符串的HTTP的新增信息，或者指定的字节排列。例如，图像映射的的坐标，指定表单的内容。\"],[\"Method\",\"指定变量Extraininfo的连接方法\"],[\"HeaderInfo\",\"HTTP要求的指定字符串的页眉信息。默认值是空字符串\"]]},{\"title\":\"变量Method的指定MS在ExtrainfoMethod类里的值\",\"heads\":[\"常量\",\"内容\"],\"rows\":[[\"mosMeshodDet\",\"Extrainfo属性的指定值是字符串追加的地址\"],[\"msoMeshodPost\",\"Extrainfo属性的指定值是字符串字节排列的使用\"]]}]');
INSERT INTO `t_tips` VALUES ('599', '600', '设置快捷键菜单', 'Add方法', '显示默认的快捷键菜单，指定CommandBar对象为object,执行Add方法。变量Name是指定\n    增加的命令名。变量Position是指定msoBarPopup。', '<cite>“ Module１”记述模块</cite>@                     Sub Sample600()@                    　　　With   CommandBars.Add(Name :=\"MyMenu\",  Position :=msoBarPopup)@                    　　　<cite>#增加的快捷键菜单的名字是“MyMenu”</cite>@                    　　　　　With .Controls.Add     #コントロールを追加する@                    　　　　　　　　.Caption  =  \"ツール１\"　　#工具1是截屏@                    　　　　　　　　.OnAction  =  \"Sample600_2\"@                                                  <cite>#点击Sample600_2时执行</cite>@                    　　　　　End  With@                    　　　End  With@                    End  Sub@                    Sub  Sample600_2()@                              MsgBox  \"カスタムメニューか実行された\"　　　<cite>#显示信息</cite>@                    End  Sub@                    　<cite>#记述Sheet1模块</cite>@                    　Private  Sub  Worksheet_BeforeRightClick_@                                       (ByVal  Target   As  Range ,  Cancel  As  Boolean)@                                      CommandBars(\"MyMenu\").ShowPopup     <cite>#显示菜单MyMenu</cite>@                    　　　　　Cancel  =  True      <cite>#取消右击的动作</cite>@                    End  Sub', '在工作表上右击时显示设置的快捷键菜单快捷键菜单时增加的工具。点击 Sample600_2\n	       执行程序\n		Sheet模块“Sheet1”的BeferRightClick事件，使用ShowPopuo方法。在工作表上右健\n	      	时，显示设置的快捷键菜单。\n                参数Cancel设置为True，通常右健时取消显示菜单。', '/images/zhiku/TipsNO600-001.png', '/images/zhiku/TipsNO600-002.png', '删除所有超链接', '使用Delete方法删除已设置的快捷键菜单\n            请参考下面的例子\n                        \n            \n            保存设置的快捷键菜单。执行一次Sample\n            600后，再次执行会发生错误。点击确认\n            之后，执行Sample600_3，设置完快捷键\n            菜单请将其删除。\n            确认并登陆符合条件的快捷键菜单，如果\n            无法登陆，请参照下面的代码重新登陆。\n            下面的例子实际是登陆快捷键菜单处理\n            Sample600程序的输出。', 'Sub  Sample600_3()@            CommandBars(\"MyMenu\")@            .Delete@            End  Sub@            Sub  Sample600_4()@            　Dim  temp  As  CommandBar@            　Dim  flg  As  Boolean@              For Each  temp  InCommandBars@              　If  temp.Name _@                  = \"MyMenu\"  Then@                  flg  = True@                  Exit  For@                End  If@              Next@            if  Not flg Then@                Sample600@            End  If@            End  Sub', '(增加快捷键菜单)', '(显示快捷键菜单)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('600', '601', '正则表达式的使用', 'CreatObject函数', '正则表达式的使用是 指定CreatObject函数的参数为VBScript.RegExp，详情请参照\nMicrosoft　VBScript  Regular  Expression 5.5 。', 'Sub  Sample601()@                       With  CreateObject(\"VBScript.RegExp\")@                       <cite># 创建正则表达式的对象</cite>@                　　　　　　　.Pattern = \"^[0-9]\"     <cite>#设置文字模型</cite>@                　　　　　　　MsgBox .Test(Range(\"A1\").Value)@                              <cite>#　 测试适当的模型结果显示在MsgBox</cite>@                　　  End With@                    End  Sub', '介绍一个简单的正则表达式例子。正则表达式是支持VBScript的机能。创建CreateObject\n                      函数，RegExp对象，设置字符串模型检验Pattern属性。Test方法 指定字符串Pattern属性\n                      判断指定模块的目标原形，显示在MsgBox\n                   RegExp对象的属性方法，而指定字符串模块再下一组。字符串模型的意义是标记匹配的时\n                     候，那个文字的前面附加“\\”\n                   介绍一下例子，字符串模型指定0~9。“^”在字符串的开头表示匹配。[0-9]表示数字0~9\n                    结果  开头的数字或字符串的匹配，这就是它的意义。\n                   单元格A1值的判断程序，请试着改变单元格A1的值\n                   正则表达式中字符串模型的正确创建时很重要的。分析检索对象的字符串，正确的研究字符\n                   串模型，可以非常灵活的检索字符串。', '/images/zhiku/TipsNO601-001.png', '/images/zhiku/TipsNO601-002.png', '', '', '', '(使用正则表达式)', '(表达式的结果)', '2017-11-30 14:05:11', null, null, '[{\"title\":\"RegExp对象的属性\",\"heads\":[\"属性名称\",\"设置内容\"],\"rows\":[[\"Pattern\",\"定义正则表达式字符串。方法调用前必须设置\"],[\"lgnoreCase\",\"表示区别大小写字母。为True时，不区分大小写字母。默认值为False\"],[\"Global\",\"调用Replace方法和Execute方法时，表示复数匹配。为True的时候，对于正则表达式匹配全部进行检索置换。默认值为False\"],[\"MultiLine\",\"表示处理复数字符串时。为True的时候，每行开头和结尾的时候都要用\\\"^\\\"和\\\"$\\\"匹配。默认值为False\"]]},{\"title\":\"RegExp对象的方法\",\"heads\":[\"属性名称\",\"设置内容\"],\"rows\":[[\"Test(string)\",\"变量string指定字符串检索，正则表达式和匹配的时候返回True，不一致的时候返回False。\"],[\"Replace(string1.string2)\",\"变量string1，是检索置换对象指定字符串。变量string2是置换指定字符串\"],[\"Execute(string)\",\"变量string指定字符串检索，检索结果的Match对象包含在返回的Matches搜索结果里\"],[\"MultiLine\",\"表示处理复数字符串时。为True的时候，每行开头和结尾的时候都要用\\\"^\\\"和\\\"$\\\"匹配。默认值为False\"]]},{\"title\":\"正则表达式使用的字符串类型\",\"heads\":[\"属性名称\",\"设置内容\"],\"rows\":[[\"＾\",\"匹配字符串的开头\"],[\"＄\",\"匹配字符串的结尾\"],[\"\\\\b\",\"匹配词汇的边界\"],[\"\\\\B\",\"匹配词汇的边界以外\"],[\"\\\\n\",\"匹配换行\"],[\"\\\\f\",\"匹配格式样式\"],[\"\\\\r\",\"匹配行，开头，复数，返回值\"],[\"\\\\t\",\"匹配水平标签\"],[\"\\\\v\",\"匹配垂直标签\"],[\"\\\\xxx\",\"8进制表达式的字符串匹配。\\\"\\\\101\\\"匹配成“A”，使用ASC||字体以外的文字（半角，全角文字等）\"],[\"\\\\xdd\",\"16进制表达式的字符串匹配。\\\"\\\\x41\\\"匹配成“A”，使用ASC||字体以外的文字（半角，全角文字等）\"],[\"\\\\uxxxx\",\"Unicode(utf-16)xxxx表达式的字符串匹配。使用全角文字。Xxxx的部分必须是4位。“0041”匹配成“A”\"],[\"[ ]\",\"匹配\\\"[ ]\\\"里的文字。在“_”的指定范围内使用\"],[\"[^]\",\"匹配\\\"[＾]\\\"里文字以外的。在“_”的指定范围内使用\"],[\"\\\\w\",\"使用词汇的字体的匹配。类似于[a-zA-Z_0-9]\"],[\"\\\\W\",\"使用词汇的字体以外的匹配。类似于[a-zA-Z_0-9]\"],[\"\",\"匹配\\\\n以外的字体。也匹配全角字体\"],[\"\\\\d\",\"匹配数字，类似于[0-9]\"],[\"\\\\D\",\"匹配数字以外的文字。类似于[0-9]\"],[\"\\\\s\",\"匹配文字空间，类似于[\\\\t\\\\r\\\\n\\\\v\\\\f]\"],[\"\\\\S\",\"匹配文字空间以外的文字。类似于[\\\\t\\\\r\\\\n\\\\v\\\\f]\"],[\"[x]\",\"前面文字的第x回匹配\"],[\"[X]\",\"前面文字的第x回以上的匹配\"],[\"[x.y]\",\"前面文字的第x回以上第y回以下的匹配\"],[\"?\",\"前面文字是第0回还是第1回匹配。类似于[０．１]\"],[\"・\",\"前面文字的0回以上的匹配。类似于[０．]\"],[\"+\",\"前面文字的1回以上的匹配。类似于[1．]\"],[\"()\",\"复数的文字组成一组。可以继续执行\"],[\"|\",\"复数字符串保存一次正则表达式，任何时候都可以匹配\"]]}]');
INSERT INTO `t_tips` VALUES ('601', '602', '使用正则表达式对行中存在的字符串进行检查', 'Test方法', 'Test方法是，检索参数指定的字符串，当正则表达式匹配的情况是True时返回True。不符合的情况，\n     返回False。', 'Sub Sample602()@                        With CreateObject(\"VBScript.RegExp\")@                            .Pattern = \"^[0-9]\"@                            <cite>#使用正则表达式的Pattern指定前面的数值</cite>@                            MsgBox  \"判断字符串[0123] 的前面是否有数: \" _@                                &amp; .test(\"01234\") &amp; vbLf _@                                &amp; \"判断字符串[a123]的前面是否有数: \" _@                                &amp; .test(\"a1234\")@                            <cite>#字符串[0123]和[a123]的测试结果用MsgBox表示</cite>@                        End With@                    End Sub', '这里是测试两个字符串。指定RegExp对象的Pattern属性{^[0-9]}。这个意思是(^)的前面有数值\n ({0-9})。\n	测试的对象是字符串[0123]和字符串[a0123]。\n	使用MsgBox表示测试的结果。', '/images/zhiku/TipsNO602-001.png', '/images/zhiku/TipsNO602-002.png', '', '', '', '(使用正则表达式检查字符串)', '(使用MsgBox表示测试结果)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('602', '603', '使用正则表达式查询字符串', 'Execute 方法', 'Execute方法是根据参数string查询指定字符串，如果Match对象查询结果包含Matches  Collection就返回。', 'Sub Sample603()@                        Dim re As Object@                        Dim mc As Object@                        Dim msg As String@                        Dim i As Long@                        Set  re = CreateObject(\"VBScript.RegExp\")@                        <cite>#作成RegExp对象	</cite>@                        with  re@                            .Pattern = \"[A-Za-z]+[V][B][A]\"@                            <cite>#设置正则表达式Pattern		</cite>@                            .Global = True				<cite>#设置复数匹配为True	</cite>@                            Set mc = .Execute(Range(\"A1\").Value)@                            <cite>#执行字符串[ExcelVBA  AccessVBA   Word]</cite>@                        End with@                        with mc@                            If  .Count &gt; 0 Then				<cite>#判断对象字符串的值是否大于0	</cite>@                                For i=0 To .Count - 1@                                    msg = msg &amp; i+ 1 &amp; \"字符串序号\" &amp; _@                                        .Item(i).Value &amp;vbLf@                                    <cite>#有值得情况下，取得字符串</cite>@                            Next@                              Else@                            msg =\"匹配不成功\"				<cite>#取得没有值得情况下的字符串</cite>@                             End If@                        End with@                        MsgBox  msg				<cite>#使用MsgBox表示</cite>@                    End Sub', '这里是单元格A1的字符串是[Excel AccessVBA Word]，查询拉丁字母开始[VBA]结束的字符串。\n能查询到值的情况时，反复操作查询到的Matches Collection属性的值。Item属性是，返回Match对象\n指定的Index的序号。这个Match对象是实际查询到的字符串。取得字符串的Value属性，代入变量msg。\nItem属性的index序号是从[0]开始。\n	而且，为了取得复数指定字符串匹配条件的值，给Global属性赋值为True。\n	最后，作成的字符串msg用MsgBox表示。', '/images/zhiku/TipsNO603-001.png', '/images/zhiku/TipsNO603-002.png', '指定字符串样式', '”VBA\"是检索字符串的最终文字形式，指定字符串样式是“A-Z,a-z”+[V][B][A]这样的。\n            “A-Z,a-z”表示全部的字母表，“+”表示前面指定的文字转换返回。字母表的字符串意义\n            最后，[V][B][A]表示”VBA\"的意思。字母表字符串的最终字符串的意义。', '', '(查询以[VBA]结束的字符串)', '(表示查询结果)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('603', '604', '使用正则表达式替换字符串', 'Replace 方法', 'Replace方法是指定参数string1的值检索，指定参数string2的值进行替换。', 'Sub Sample604()@                　　　Dim re As Object@                　　　Set re = CreateObject(\"VBScript.RegExp\")@                    　　<cite>#作成RegExp对象</cite>@                    with re@                        .Pattern = \"[E] [A-Za-z]+[l]\"@                    　　　<cite>#设置正则表达式Pattern</cite>@                        MsgBox.Replace(Range(\"A1\").Value,\"工作簿\")@                    　　　<cite>#「E」开始「l」结束的字符串开始「Excel」替换</cite>@                    End With@                　End Sub', '这里是，使用Replace方法，指定[E]开始[1]结束的[Excel]字符串替换。', '/images/zhiku/TipsNO604-001.png', '/images/zhiku/TipsNO604-002.png', '', '', '', '(字符串替换)', '(MsgBox结果表示)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('604', '605', '管理联想排列的数据', 'CreateObject函数', '排列联想排列和字符串的key值。检索排列的内容和字符串的使用。在VBA中使用联想排列是，\n指定CreateObject函数的参数class[Scripting Dictionary],参照[Microsoft Scripting Runtime]设\n置，使用Dictionary对象。', 'Sub Sample605()@                        With CreateObject(\"Scripting.Dictionary\")@                            .Add \"A\", \"北京\"				<cite>#Key的值是A然后追加[北京]</cite>@                            .Add \"B\", \"上海\"				<cite>#Key的值是A然后追加[上海]</cite>@                            .Add \"C\", \"广州\"				<cite>#Key的值是A然后追加[广州]</cite>@                            MsgBox  \"Key  [A] : \" &amp; .Item(\"A\")@                                <cite>#检索Key[A]的值，使用MsgBox表示</cite>@                        End With@                    End Sub', '这里是使用CreateObject函数然后作成Dictionary对象。使用Add方法追加项目。Add方法是最开始的参数Key，Item变成两项。\n	这里是追加3个要素后，检索[A]的Key,附加条件Item[北京]用MsgBox表示。', '/images/zhiku/TipsNO605-001.png', '/images/zhiku/TipsNO605-002.png', '', '', '', '(使用Dictionary对象)', '(结果处理后表示)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('605', '606', '不重复联想排列取得值', 'Add 方法', 'Add方法是项目追加Dictionary对象。参数key是，关联参数item指定。使用字符串。参数item是，\n指定参数key，通过项目关联获得指定key的值。指定参数key，key已经存在的情况是，发生错误的\n时候。', 'Sub Sample606()@                        Dim Target As Range@                        Dim TargetValue As Variant@                        Dim  vKeys As Variant@                        Dim msg As String@                        Dim i As Long@                        Set  Target = Range(\"A1\").CurrentRegion@                        with  Target@                            TargetValue = .Resize(.Rows.Count - 1).Offset(1).Value@                        End with@                        <cite>#取得单元格A2以下范围的数据的排列</cite>@                        with CreateObject(\"Scripting.Dictionary\")@                        <cite>#作成Dictionary对象</cite>@                            On  Error Resume Next					<cite>#开始处理错误</cite>@                            For i=1 To UBound(TargetValue)@                                .Add  TargetValue(i,1),TargetValue(i,1)@                        Next@                        <cite>#追加对象DictionaryA列的数据</cite>@                               On  Error GoTo 0@                               vKeys = .keys				      <cite>#取得所有key值</cite>@                               For  i=0 To  .Count - 1@                                msg = msg &amp; vKeys(i) &amp; vbLf@                                    <cite>#取得变量msg的key</cite>@                                Next@                        MsgBox \"省 \" &amp; vbLf &amp; msg@                        <cite>#获得结果用MsgBox表示</cite>@                        End with@                    End Sub', '这里是作成城市名一览(不重复)。Dictionary对象的Add方法是指定参数key的值就变得有错误的\n     情况。因此，On Error Resume Next声明，发生错误的情况时无视，取得不重复的数据。\n        	Keys方法是返回Dictionary对象保存排列全部key值，这个值是从msg变量取得，最后表示声明。', '/images/zhiku/TipsNO606-001.png', '/images/zhiku/TipsNO606-002.png', '样本的注意点', '这个样本是，请注意Add方法的参数key指定省份名称，Dictionary对象是，参数key的值已经存在时变得出现错误。这种情况开始使用取得的不重复的数据，指定必要的参数key的城市名。', '', '(取得重复的省名)', '(结果list表示)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('606', '607', '检索联想排列的值', 'object.Exists(key)', 'Exists方法是指定参数key的值，Dictionary对象内存在的情况返回值值为True，不存在的情况返\n回False。', 'Sub Sample607()@                        Dim Target As Range,TargetValue As Variant@                        Dim i As Long@                        Set  Target = Range(\"A1\").CurrentRegion@                        with  Target@                            TargetValue = .Resize(.Rows.Count - 1).Offset(1).Value@                        End with@                        <cite>#取得单元格A2以下范围的数据的排列</cite>@                        with CreateObject(\"Scripting.Dictionary\")@                        <cite>#作成Dictionary对象</cite>@                            On  Error Resume Next					<cite>#处理错误的行</cite>@                            For i=1 To UBound(TargetValue)@                                .Add  TargetValue(i,1),TargetValue(i,1)@                        Next@                        <cite>#取得省份值(不重复)</cite>@                               On  Error GoTo 0@                         If  .Exists(\"吉林省\")  Then      						<cite>#存在[吉林省]</cite>@                            MsgBox \"有[吉林省]\"@                          Else@                            MsgBox \"没有[吉林省]\"@                         End  If@                        End with@                    End Sub', '这里是取得单元格A2以下数据范围内不重复的省份名称，检查其中是否存在[吉林省]。这样是为了，\n Dictionary对象是在字符串对象list里面进行检索。', '', '', '', '', '', '', '', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('607', '608', '使用Collection', 'Add 方法', '使用Collection管理数据是，使用Collection类的Add方法。根据指定参数，参照语法解释。', 'Sub Sample608()@                        Dim Target As Range@                        Dim TargetValue As Variant@                        Dim  Data As Collection@                        Dim i As Long@                        Set  Target = Range(\"A1\").CurrentRegion@                        with  Target@                            TargetValue = .Resize(.Rows.Count - 1).Offset(1).Value@                        End with@                        <cite>#取得单元格A2以下范围的数据的排列</cite>@                        Set Data = New Collection						<cite>#作成Collection对象</cite>@                            For i=1 To UBound(TargetValue)@                                Data.Add  TargetValue(i,1)@                        Next@                        <cite>#追加对象DictionaryA列的数据</cite>@                        MsgBox \"最初的数据 \" &amp; Data.Item(1)@                        <cite>#用MsgBox表示1个数据</cite>@                    End Sub', '使用Collection对象管理数据。Collection对象是作为Collection类的变量声明，使用新的关键字\n 初始化。\n        	这里是，使用Add方法，Collection追加单元格A2以下的省份名。而且，第一个追加的数据使用\nMsgBox表示。\n	然后，Add方法添加指定的数据。', '/images/zhiku/TipsNO608-001.png', '/images/zhiku/TipsNO608-002.png', 'Collection类的特征', 'Collection类的特征是，不管作为item的值是什么，都给对象等指定值。Sheets Collection是，为了相同的sheet作为一个集合表示，作成对象的\n            集合。下一个样本是，从sheet名的数值开始，作成Collection worksheet，那个sheet数用MsgBox表示。', 'Sub Sample608_2()@            Dim NumSh  As  Collection@            Dim sh As Worksheet@            Set NumSh=New Collection@            For Each sh In@                ThisWorkbook.Worksheets@                If  sh.Name Like@                    \"[0-9]\" \" Then@                    NumSh.Add sh@                End If@            Next@            MsgBox  NumSh.Count@            End  Sub', '(使用Collection对象)', '(表示Collection对象的一个元素)', '2017-11-30 14:05:11', null, null, '[{\"title\":\"指定Add方法的值\",\"heads\":[\"值\",\"说明\"],\"rows\":[[\"Item\",\"Collection追加指定元素\"],[\"Key\",\"使用key字符串替换索引表示，指定相同意思的字符串\"],[\"Before\",\"在指定元素前面追加Collection元素\"],[\"After\",\"在指定元素后面追加Collection元素\"]]}]');
INSERT INTO `t_tips` VALUES ('608', '609', '使用collection来作成不重复的list', 'Add方法', '使用Collection的Add方法管理Collection数据。Add方法是，一旦参数中指定重复的值就会发生错误。', 'Sub Sample609( )@                        Dim Target As Range, TargetValue As Variant@                        Dim Data As Collection@                        Dim msg As String, I As Long@                        Set Target = Range(\"A1\").CurrentRegion@                        With Target@                            TargetValue = .Resize(.Rows.Count - 1).Offset(1).Value@                        End With@                        <cite>#代入参数的取值范围</cite>@                        Set Data = New Collection    <cite>#创建Collection对象</cite>@                        On Error Resume Next@                        For i = 1 to Ubound(TargetValue)@                            Data Add TargetValue(Ii 1), TargetValue(i, 1)@                        Next@                        On Error Goto 0     <cite>#获取不重复的都道府县名</cite>@                        For i = 1 to Data.Count@                            msg = msg &amp; Data.Item(i) &amp; vbLf@                        Next@                        MsgBox \"都道府県名りスト:\" &amp; vbLf &amp; msg　　　<cite>#显示都道府县</cite>@                    End Sub', '使用Collection对象做成不重复的list.这样，根据都道府县名做成不重复的list。Collection对象的add\n方法在参数key中指定的值若已经存在则会出现异常。因此，使用 On Error Resume statement来避免中\n断的错误处理。而使用Item属性取得各种各样的值最后表示在留言箱中', '', '', '', '', '', '', '', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('609', '610', '删除Collection的数据', 'Remove 方法', 'Remove方法是object指定Collection对象，将指定的元素删除。删除的对象，key值是指定的index索引号。', 'Sub Sample610()@                        Dim Target As Range@                        Dim TargetValue As Variant@                        Dim  Data As Collection@                        Dim msg As String@                        Dim i As Long@                        Set  Target = Range(\"A1\").CurrentRegion@                        with  Target@                            TargetValue = .Resize(.Rows.Count - 1).Offset(1).Value@                        End with@                        <cite>#代入单元格A2以下范围的变量	</cite>@                        Set Data = New Collection							<cite>#作成Collection对象</cite>@                            On  Error Resume Next@                            For i=1 To UBound(TargetValue)@                                Data.Add  TargetValue(i,1),TargetValue(i,1)@                        Next@                               On  Error GoTo 0@                               Data.Remove \"吉林省\"						<cite>#删除\"吉林省\"的数据</cite>@                                #取得不重复的省名列表@                               For  i=1 To Data.Count@                                msg = msg &amp; Data.Item(i) &amp; vbLf@                                Next@                        MsgBox \"省名list:  \" &amp; vbLf &amp; msg@                        <cite>#表示省份名称</cite>@                    End Sub', '这里是使用Collection对象，作成不重复的省名list，其中要删除[吉林省]的元素。Collection对象\n的add方法是，指定已经存在的key会发生错误。因此，使用On Error Resume声明，回避对错误处理\n中断。而且，使用Remove方法删除[吉林省]的数据。使用Collection对象的key值省份名称是为了，在\n项目中使用key值，根据key值删除数据。		\n	最后，使用Collection对象的值取得Item属性，用MsgBox表示。', '/images/zhiku/TipsNO610-001.png', '/images/zhiku/TipsNO610-002.png', '', '', '', '(删除指定项目)', '(表示不包含[吉林省]的list)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('610', '611', '取得Worksheet的CodeName', 'CodeName属性', 'CodeName属性是指定object取得Worksheet的CodeName，CodeName是翻译VBE的[属性窗口]sheet对象时，\n     表示[(对象名称)]一栏的值。', 'Sub Sample611()@                        MsgBox \"sheet名 : \" &amp; ActiveSheet.Name &amp; vbCrLf &amp; _@                                \"Code名 : \" &amp; ActiveSheet.CodeName@                        　　　<cite>#取得Worksheet名和name</cite>@                        　　　<cite>#用MsgBox表示</cite>@                    　End Sub', '这里是，取得ActiveSheet的Worksheet名和CodeName，用MsgBox表示。在VBE的属性窗口确认[(对象名)]\n一栏的值。', '/images/zhiku/TipsNO611-001.png', '/images/zhiku/TipsNO611-002.png', '', '', '', '(参照CodeName)', '(用MsgBox表示CodeName)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('611', '612', '启动VBS其他的应用', 'CreateObject 方法', 'CreateObject函数是，开始使用VBScript。他的参数是Excel启动时指定应用自动对应的。', 'With  CreateObject(\"Excel.Application\")			<cite>#作成Excel对象</cite>@                    .Visible = True				<cite>#表示Excel</cite>@                    .Workbooks.Add				<cite>#追加新的workbooks</cite>', '这里是启动Excel使用VBScript，增加新的workbooks。VBScript是.vbs小程序文件的扩展名。\n内容是文本文件。因此，使用记事本等文本文件编辑。', '/images/zhiku/TipsNO612-001.png', '/images/zhiku/TipsNO612-002.png', 'VBScript的语法', 'VBScript的语法是，变量的类型是空的等是有差异的，和VBA经常是相似的。当然，ExcelVBA原有的命令，按照原样是不能使用的，需要在启动Excel的相关功能的前提下是有可能使用的。', '', '(取得重复的省名)', '(结果list表示)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('612', '613', '快捷键的制作', 'ＷshShell对象', 'Window Script Host (WSH)是Windows管理工具的一种。WSH自身程序的实行环境中\n    VBA可以使用。WSH是为了处理ＷshShell对象的。', 'Sub Sample613 ()@                        Dim wshShell As Object@                        Dim desktopPath As String@                        Dim shortcutPath As String@                        Set wshShell = CreateObject (\"Wscript.Shell\")@                        <cite>#ＷｓhShell对象的制作</cite>@                        desktopPath = wshShell.SpecialFolders (\"Desktop\")@                        <cite>#桌面获取</cite>@                        shortcutPath = desktopPath &amp; \"\\Sample\" &amp; \".lnk\"@                        <cite>#指定快捷方式的名</cite>@                        With wshShell . CreateShortcut(shortcutPath)@                            .targetPath = ThisWorkbook.Path@                            .Description = \"样品做成快捷方式。\"@                            <cite>#注释栏的设定</cite>@                            .Save		<cite>#保存</cite>@                        End With', '桌面名为「Sample」的快捷方式做成。开始链接，这个工作簿的共享文件夹。WSH的使用\n是为了VBA中OS的机能能够使用。', '/images/zhiku/TipsNO613-001.png', '/images/zhiku/TipsNO613-002.png', '', '', '', '(快捷键制作之前)', '(快捷键制作之后)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('613', '614', 'WindowsApi利用时间的测定', 'timeGettime函数', 'timeGettimeAPI函数是系统启动时取得毫秒数。', 'Declare Function timeGetTime Lib \"winmm.dll\" () As Long@                        Sub Sample614 ()@                        Dim StartTime As Long@                        Dim i As Long@                        StartTime = timeGetTime					<cite>处理取得的开始	</cite>@                        Do@                            i = i +1@                        Loop Until i &gt; 1000000					<cite>进行处理</cite>@                        MsgBox \"经过时间：\" &amp; timeGetTime - StartTime &amp; \"毫秒\"@                        <cite>经过时间用信息对话框表示	</cite>@                    End Sub', 'timeGettimeAPI函数的使用是处理时间进行测量。API函数是模块声明部分进行记述。\n    这个Do Loop声明处理时间用信息对话框表示。所以样品Do Loop声明内特别什么都没有。', '/images/zhiku/TipsNO614-001.png', '/images/zhiku/TipsNO614-002.png', '', '', '', '(处理时间测量)', '(被处理时间显示之后)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('614', '615', '利用WindowsApi测量窗', 'FindWindowAPI函数', 'FindWindowAPI函数是发现指定窗口还有窗口编号。没找到的情况下返回0。指定为参数\n    classname表示应用软件的级名。指定指定窗字幕。', 'Declare Function FindWindow Lib \"user32\" Alias  \"FindwindowA\"(@                        ByVal lpClassName As String _@                        ,ByVal lpwindowsName As String) As Long@                    <cite>findWindowAPI函数的宣言</cite>@                    Sub Sample615 ()@                        Dim className As String@                        Dim hw As Long , pID As Long@                        If Application . OperatingSystem Like  \"Windows (32-bit) NT 6*\" Then@                            className = \"CalcFrame\"@                        Else@                            className = \"SciCalc\"@                        End If@                        <cite>计算器的级名根据os不相同为了的处理</cite>@                        hw = FindWindow (className, vbNullString)@                        <cite>寻找计算器的窗</cite>@                        If hw = 0&amp; Then@                            pID = Shell (\"Calc.exe\",vbNormalFocus)@                            <cite>计算器没启动的情况，启动</cite>@                        Else@                            MsgBox \"\",vbInformation@                            <cite>如果启动表示消息</cite>@                        End If@                    End Sub', '在这里，FindWindowAPI函数使用，检查计算器启动着。没启动的情况，Shell函数使用启动\n    计算器。\n	FindWindowAPI函数，是寻找指定了的窗的函数。要指定窗，需要对象的应用软件的级名。\n        Windows7以后为了是计算器的情况，变成为「CalcFrame」,那个以前「SciCalc」，\n   OperatingSysytem属性取得着OS的版本。', '/images/zhiku/TipsNO615-001.png', '/images/zhiku/TipsNO615-002.png', 'API函数错误处理', 'WindowsAPI函数，为了直接操纵Windows的机能，也有如果所说的Excel突然落下的严重的错误发生。由于API呼叫错误发生，也利用On Error声明打算回避错误，错误发生。\n            再者，在这里把32bit版的Womdows和Excel作为前提。是64bit版的OS及Excel的情况，把PtrSafe关键字作为宣言API的时候，Declare关键字之间「请与Declare PtrSafe Function」 记述。', '', '(计算器没启动的情况启动)', '(计算器启动了)', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('615', '616', '用户窗口关闭按钮非表示', 'SetWindowLongAPI函数', 'SetWindowLongAPI函数是参数的指定窗口的属性的变更。', 'Declare Function FindWindow Lib \"user32\" Alias  \"FindwindowA\"( _@                        ByVal lpClassName As String _@                        ,ByVal lpwindowsName As String) As Long@                    <cite>#FindWindowAPI函数的声明</cite>@                    Declare Function GetWindowLong Lib \"user32\" Alias  \"GetWindowLongA\"( _@                        ByVal hWnd As Long ,ByVal nIndwx As Long) As Long@                    <cite>#GetWindowLong函数的声明</cite>@                    Declare Function SetWindowLong Lib \"user32\" Alias  \"SetWindowLongA\"( _@                        ByVal hWnd As Long ,ByVal nIndwx As Long _@                        , ByVal dwNewLong As Long) As Long@                    <cite>#SetWindowLong函数的声明</cite>@                    <cite>#UserFrom1的记述</cite>@                    Private Const GWL_STYLE = -16@                    Private Const WS_SYSMENU = &amp;H80000@                    Private Sub CommandButton1_Click()@                        Unload Me@                    End Sub@                    Private Sub UserForm_Initialize()@                        Dim hWnd As Long@                        Dim lngRet As Long@                        hWnd = FindWindow (\"ThunderDFrAME\", Me.Caption)@                        <cite>#用户窗口的获取	</cite>@                        lngRet = GetWindowLong(hWnd , GWL_STYLE)@                        <cite>#窗口关闭的情报获取	</cite>@                        lngRet = SetWindowLong (hWnd , GWL_STYLE , lngRet And Not WS_SYSMENU)@                        <cite>#窗口的属性变更	</cite>@                    End Sub', '在这里，FindWindowAPI函数使用，用户窗口关闭按钮非表示。用户窗口的初始化自己把自己\n　窗口的值获取，变更窗口的属性', '/images/zhiku/TipsNO616-001.png', '/images/zhiku/TipsNO616-002.png', '', '', '', '', '', '2017-11-30 14:05:11', null, null, '');
INSERT INTO `t_tips` VALUES ('616', '617', 'Flash填充的使用', 'AutoFill方法', '从Excel2013开始增加了新的机能Flash填充。是自动填充机能的扩充，比如从「姓名」里取到\n   「姓」放到隔壁栏里的时候能够使用。VBA的Flash填充的使用。关于指定参数，请参照「解说」。', 'Sub Sample617()@                        Range(\"B2\").AutoFill Destination: =Range(\"B2:B6\")_@                            , Type:= xlFlashFill@                    <cite>#单元格Ｂ2的值Flash填充输入到单元格B6</cite>@                    End Sub', '在这里，A列输入的的「姓名」的数据取出「姓」数据。首先，单元格只有一个「姓」的数据输入。\n   使用Fl这个数据Flash填充机能到单元格B6里输入。	\n	AutoFill方法的参数和参数Type输入的价值，如下所示。', '/images/zhiku/TipsNO617-001.png', '/images/zhiku/TipsNO617-002.png', '', '', '', '(使用Flash填充机能输入「姓」)', '(「姓」栏被输入了)', '2017-11-30 14:05:11', null, null, '[{\"title\":\"AutoFill方法的参数\",\"heads\":[\"值\",\"说明\"],\"rows\":[[\"Destination\",\"指定AutoFill的输入处。使它成为基准数据进入单元格的范围也包含它\"],[\"Type\",\"指定AutoFill的种类\"]]},{\"title\":\"参数Type指定的XlAutoFillType类的值\",\"heads\":[\"值\",\"说明\"],\"rows\":[[\"xlFillCopy\",\"从代码范围在目标范围复制的值和形式，有必要重复\"],[\"xlFillDays\",\"代码范围内的星期名可以适用\"],[\"xlFillDefault\",\"Excel对象范围的输入，是根据他的值和形式决定的。\"],[\"xlFillFormats\",\"从代码范围在目标范围复制的值和形式，有必要重复\"],[\"xlFillMonths\",\"代码范围内的月份的名可以适用\"],[\"xlFillSeries\",\"代码范围内的值的对象范围的数值可以适用\"],[\"xlFillValues\",\"从代码范围在目标范围复制的值和形式，有必要重复\"],[\"xlFillWeekdays\",\"代码范围内的平日的名字可以适用\"],[\"xlFillYears\",\"代码范围内的年龄可以适用\"],[\"xlGrowthTrend\",\"代码范围内的数字间的关系用乘法表示、代码范围从对象的范围的数值使用\"],[\"xlLinearTrend\",\"代码范围内的数字间的关系用加法表示、代码范围从对象的范围的数值使用\"],[\"xlFlashFill\",\"Flash填充的进行\"]]}]');
INSERT INTO `t_tips` VALUES ('617', '618', '快速分析显示', 'QuickAnalysis属性', 'QuickAnalysis属性的使用，在Excel2013时加入快速分析机能。QuickAnalysis属性\n   指定的值，请参照[解说]。', 'Sub Sample086()@                        Application.QuickAnalysis.Show xlTotals@                        <cite>表示快速分析机能的「合计」</cite>@                    End Sub', '快速分析的使用 。要使用快速分析，对象和表内结果的活动单元格是必须的。在这里，\n   QuickAnalysis属性指定xlTotal ，表示做Show方法快速分析机能的「合计」。\n	QuickAnalysis属性指定的值，如下所示。', '/images/zhiku/TipsNO618-001.png', '/images/zhiku/TipsNO618-002.png', '', '', '', '(表示快速分析机能)', '(快速分析机能被表示了)', '2017-11-30 14:05:11', null, null, '[{\"title\":\"QuickAnalysis属性指定的值\",\"heads\":[\"值\",\"说明\"],\"rows\":[[\"xlFormatConditions\",\"格式\"],[\"xlLensOnly\",\"工具芯片\"],[\"xlRecommendedCharts\",\"图表\"],[\"xlSparklines\",\"微线图\"],[\"xlTables\",\"目录\"],[\"xlTotals\",\"合计\"]]}]');
INSERT INTO `t_tips` VALUES ('618', '619', '表格中使用Slicer', 'SlicerObject/Add方法', '要使用Slicer，要使用Add方法追加Slicer.Add方法的参数，请参照详解。', 'Sub Sample619()@                        Dim TargetSheet As Worksheet@                        Set TargetSheet = Worksheets(\"Sheet1\")@                        ThisWorkbook.Slicercaches.Add2 _@                            (TargetSheet.LisrObjects(\"表格1\"),\"商品名\"). _@                            Slicers.Add(TargetSheet, , \"商品名\",\"商品名\"　_@                                , 114.75, 303.75, 144, 187.5).Name = \"Slicer_商品名\"@                        <cite>#追加Slicer,命名为［Slicer_商品名］</cite>@                        With ThisWorkbook.SlicerCaches(\"Ｓｌｉｃｅｒ_商品名\")@                        <cite>#对Slicer进行处理</cite>@                            .SlicerItems(\"冰箱\").Selected　=True@                            <cite>#用冰箱表示</cite>@                            .SlicerItems(\"液晶电视\").Selected　= False@                            .SlicerItems(\"洗衣机\").Selected　= False@                            .SlicerItems(\"吸尘器\").Selected　= False@                            <cite>#剩余的项目不显示</cite>@                        End　With@                    End Sub', '[Sheet1]的工作表，进行表格的表格的设定。对这个表格设置Slicer，只显示\"冰箱\"。\n要使用Slicer,SlicerChaches要追加Slicer.Slicer客观的Add方法的参数，如下。', '/images/zhiku/TipsNO619-001.png', '/images/zhiku/TipsNO619-002.png', '', '', '', '(设置Slicer)', '(Slicer设置完成)', '2017-11-30 14:05:11', null, null, '[{\"title\":\"Add2方法指定的参数\",\"heads\":[\"值\",\"说明\"],\"rows\":[[\"Slicer Destination\",\"制定了Slicer的配置显示值的名字，或指定表示配置Worksheet。配置sheet，需要在包含expression指定了的Slicers客观存在。\"],[\"Level\",\"是OPAP数据来源的时候、Slicer的作成的基础的水平的序数指定imention(MDX)的名字。OPAL以外的数据来源不被支持。\"],[\"Name\",\"指定Slicer的名字。不指定的时候Excel会自动生成。\"],[\"Caption\",\"指定Slicer的字\"],[\"Top\",\"以来自表格上端的垂直方向位置\"],[\"Left\",\"以来自表格左端的水平方向位置\"],[\"Width\",\"以点单位指定Slicer控制的宽度\"],[\"Height\",\"以点单位指定Slicer控制的高度\"]]}]');
INSERT INTO `t_tips` VALUES ('619', '620', '数据透视表Timeline的使用', 'TimelineState object的构成SetFilterDateRange方法', '数据数据透视表表示Timeline，使用TimelineState object的SetFilterDataRange的方法。\nTimelineState object，对SlicerChache客观使用。SetFilterDateRange方法，指定参数StartDate\n开始日，EndDate终止日，用这个期间过滤的数据作透视表。', 'Sub Sample59x()@                        Dim TargetSheet As Worksheet@                        Set TargetSheet = Worksheet(\"Sheet2\")@                        ThisWorkbook.SlicerCaches.Add2(TargetSheet.PivotTables(1) _@                            ,\"销售日期\" _@                            , ,xlTimeline).Slicers.Add(TargetSheet, ,\"销售日期\" _@                            , \"销售日期\",162.75, 147, 262.5, 111.75).Name = _@                            \"NativeTimeline_销售日期\"					<cite>#进行设定透视表	</cite>@                        ThisWorkbook.SlicerCaches(\"NativeTimeline_销售日期\").TimelineState. _@                            SetFilterDateRange \"2013/9/1\", \"2013/10/31\"@                        <cite>#表示透视表，从2013/9/1到2013/10/1</cite>@                    End Sub', '在这里，我们把Sheet2作成数据透视表，进行设定表示时间轴，同时，使用\nSetFilterDateRange方法，对透视表过滤。', '', '', '', '', '', '', '', '2017-11-30 14:05:11', null, null, '');

-- ----------------------------
-- Table structure for t_tips_func
-- ----------------------------
DROP TABLE IF EXISTS `t_tips_func`;
CREATE TABLE `t_tips_func` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `func_name` varchar(5000) DEFAULT NULL,
  `func_code` varchar(5000) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `tips_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=653 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_tips_func
-- ----------------------------
INSERT INTO `t_tips_func` VALUES ('1', 'Print 方法的语法解释', 'object.Print [outputlist]', '2017-11-30 14:04:56', null, '19');
INSERT INTO `t_tips_func` VALUES ('2', 'Ｓｕｂ声明的结构', '[Private | Public | Friend] [Static] Sub name [(arglist)]\n                    [statements]\n                    [Wxit Sub]\n                    [statements]\n                    End Sub', '2017-11-30 14:04:56', null, '22');
INSERT INTO `t_tips_func` VALUES ('3', 'Sub  声明的引数的结构', '[Optional] [ByVal | ByRef] [ParamArray] varname[()] [As tyoe][=defaultvalue]', '2017-11-30 14:04:56', null, '22');
INSERT INTO `t_tips_func` VALUES ('4', 'Function 声明语法', '[Public | Private | Friend] [Static] Function name [(arglist)] [As type]\n                    [statements]\n                    [name = expression]\n                    [Exit Function]\n                    [statements]\n                    [name = expression]\n                    End Function', '2017-11-30 14:04:56', null, '23');
INSERT INTO `t_tips_func` VALUES ('5', 'Function 声明变量语法', '[Optional] [ByVal | ByRef] [ParamArray] varname[()] [As type] [=defaultvalue]', '2017-11-30 14:04:56', null, '23');
INSERT INTO `t_tips_func` VALUES ('6', 'Property Let/Set声明语法', '[Public | Private | Friend] [Static] Property Get name [(arglist)] [As type]\n            [statements]\n            [Exit Property]	\n            [statements] \n            End Property', '2017-11-30 14:04:56', null, '24');
INSERT INTO `t_tips_func` VALUES ('7', 'Property Get 声明语法', '[Public | Private | Friend] [Static] Property Get name [(arglist)] [As type]\n            [statements]\n            [name = expression]	\n            [Exit Property]	\n            [statements]\n            [name = expression]	\n            End Property', '2017-11-30 14:04:56', null, '24');
INSERT INTO `t_tips_func` VALUES ('8', 'Sub声明/Function声明语法', 'Sub/Function mainname()\n                [statements]\n                subname\n                [statements]\n                End Sub\n\n                Sub/Function subname()\n                [statements]\n                End Sub', '2017-11-30 14:04:56', null, '25');
INSERT INTO `t_tips_func` VALUES ('9', 'Sub 声明/Function 声明的语法', 'Sub/Function name()\n                name arglist\n                end Sub', '2017-11-30 14:04:56', null, '26');
INSERT INTO `t_tips_func` VALUES ('10', 'ByVal关键字/ByRef关键字的概要', 'Sub/Function name(ByVal/ByRef arglist [As type])\n                [statements]		\n                End Sub', '2017-11-30 14:04:56', null, '27');
INSERT INTO `t_tips_func` VALUES ('11', 'ByRef关键字', 'Sub/Function name (ByRef arglist [As type])	\n                [statements]	\n                End Sub', '2017-11-30 14:04:56', null, '28');
INSERT INTO `t_tips_func` VALUES ('12', 'Optional关键字语法', 'Sub/Function name(Optional ByRef arglist [As type] [=defaultvalue])\n                [statements]\n                End Sub', '2017-11-30 14:04:56', null, '29');
INSERT INTO `t_tips_func` VALUES ('13', 'IsMissing函数的结构', 'IsMissing（argname）', '2017-11-30 14:04:56', null, '30');
INSERT INTO `t_tips_func` VALUES ('14', 'ParamArray关键字の结构', 'Sub/Function  name  ([Paramarray]  varname[()])	\n                [statements]\n                End  Sub', '2017-11-30 14:04:56', null, '31');
INSERT INTO `t_tips_func` VALUES ('15', 'Sub/Function 过程的结构', 'Sub/Function　name ([ByRef/ByVal] varname[( )]  [As type])\n                [statements]\n                End  Sub', '2017-11-30 14:04:56', null, '32');
INSERT INTO `t_tips_func` VALUES ('16', 'Visible属性的结构', 'object.Visible = expression', '2017-11-30 14:04:56', null, '33');
INSERT INTO `t_tips_func` VALUES ('17', 'Add方法的句法', 'object.Add(Component)', '2017-11-30 14:04:56', null, '34');
INSERT INTO `t_tips_func` VALUES ('18', 'Remove方法语句', 'object.remove(Component)', '2017-11-30 14:04:56', null, '35');
INSERT INTO `t_tips_func` VALUES ('19', 'Import方法的句法', 'object.Import(filename) As VBComponent', '2017-11-30 14:04:56', null, '36');
INSERT INTO `t_tips_func` VALUES ('20', 'Export方法的句法', 'object.Export(filename)', '2017-11-30 14:04:56', null, '36');
INSERT INTO `t_tips_func` VALUES ('21', 'Lines属性的句法', 'object.Lines(startline,count)As String', '2017-11-30 14:04:56', null, '37');
INSERT INTO `t_tips_func` VALUES ('22', 'InsertLines方法的结构', 'Object.InsertLines(line,code)', '2017-11-30 14:04:56', null, '38');
INSERT INTO `t_tips_func` VALUES ('23', 'ReplaceLine方法的结构', 'object.ReplaceLine(line,code)', '2017-11-30 14:04:56', null, '39');
INSERT INTO `t_tips_func` VALUES ('24', 'Collection对象的语法', 'set var = New Collection', '2017-11-30 14:04:56', null, '40');
INSERT INTO `t_tips_func` VALUES ('25', 'Add方法的语法', 'object.Add(item,key,before,after)', '2017-11-30 14:04:56', null, '40');
INSERT INTO `t_tips_func` VALUES ('26', 'Dim声明语法', 'Dim varname As type', '2017-11-30 14:04:56', null, '42');
INSERT INTO `t_tips_func` VALUES ('27', '公开声明文章结构', 'Public Varname As Type', '2017-11-30 14:04:56', null, '43');
INSERT INTO `t_tips_func` VALUES ('28', 'Aｓ关键字的句法', 'Dim vamame AS type', '2017-11-30 14:04:56', null, '44');
INSERT INTO `t_tips_func` VALUES ('29', 'Set 声明的语法', 'Set objectvar = {[New] objectexpression | Nothing}', '2017-11-30 14:04:56', null, '46');
INSERT INTO `t_tips_func` VALUES ('30', 'TyepName函数定义', 'TyepName(varname)', '2017-11-30 14:04:56', null, '47');
INSERT INTO `t_tips_func` VALUES ('31', 'VarType函数的语法', 'VarType(varname)', '2017-11-30 14:04:56', null, '48');
INSERT INTO `t_tips_func` VALUES ('32', 'Enum 声明语句', '[Public|Private] Enum name', '2017-11-30 14:04:56', null, '49');
INSERT INTO `t_tips_func` VALUES ('33', 'Constステートメントの構文', '[Public | Private]Const constname[As type]=expression', '2017-11-30 14:04:57', null, '51');
INSERT INTO `t_tips_func` VALUES ('34', 'If语句', 'If  condition  Then', '2017-11-30 14:04:57', null, '56');
INSERT INTO `t_tips_func` VALUES ('35', 'IF的声明', 'If condition Then', '2017-11-30 14:04:57', null, '57');
INSERT INTO `t_tips_func` VALUES ('36', 'if 声明的语法', 'If condition Then', '2017-11-30 14:04:57', null, '58');
INSERT INTO `t_tips_func` VALUES ('37', 'Select Case 声明的语法', 'Select Case testexpression', '2017-11-30 14:04:57', null, '59');
INSERT INTO `t_tips_func` VALUES ('38', 'Select Case 声明的语法', 'Select Case testexpression', '2017-11-30 14:04:57', null, '60');
INSERT INTO `t_tips_func` VALUES ('39', 'IIF函数的语法', 'IIF(expr,truepart,falsepart)', '2017-11-30 14:04:57', null, '61');
INSERT INTO `t_tips_func` VALUES ('40', 'Switch函数的构成', 'Switch(expr-1,value-1[,expr-2,value-2 … [,exp-n,value-n]])', '2017-11-30 14:04:57', null, '62');
INSERT INTO `t_tips_func` VALUES ('41', 'DoLoop语句的语法', 'Do[(While｜Until}condition]', '2017-11-30 14:04:57', null, '63');
INSERT INTO `t_tips_func` VALUES ('42', 'Do Loopステートメントの構文', 'Do[{While | Until}condition]', '2017-11-30 14:04:57', null, '64');
INSERT INTO `t_tips_func` VALUES ('43', 'Do Loop 声明的语法', 'Do[{While I Until}condition]', '2017-11-30 14:04:57', null, '65');
INSERT INTO `t_tips_func` VALUES ('44', 'For Next声明的结构', 'For counter = start To end [Step step]', '2017-11-30 14:04:57', null, '66');
INSERT INTO `t_tips_func` VALUES ('45', 'For Each Next声明的语法', 'For Each element ln group', '2017-11-30 14:04:57', null, '67');
INSERT INTO `t_tips_func` VALUES ('46', 'Exit语法', 'Exit For(Do/Sub/Function/Property)', '2017-11-30 14:04:57', null, '68');
INSERT INTO `t_tips_func` VALUES ('47', 'Do Loop  声明的语法', 'Do [{While I Until } condition]', '2017-11-30 14:04:57', null, '69');
INSERT INTO `t_tips_func` VALUES ('48', 'Function过程的结构', '[Public|Privarte|Friend][Static]Function name[(arglist)][As Type]', '2017-11-30 14:04:57', null, '70');
INSERT INTO `t_tips_func` VALUES ('49', 'MsgBox函数的语法', 'MsgBox（prompt[,buttons][,title][,helpfile,context]）', '2017-11-30 14:04:57', null, '71');
INSERT INTO `t_tips_func` VALUES ('50', 'MsgBox函数的语法', 'MsgBox(prompt[,buttons][,tittle][,helpfile,context])', '2017-11-30 14:04:57', null, '72');
INSERT INTO `t_tips_func` VALUES ('51', 'MsgBox函数的语法', 'MsgBox(prompt[,buttons][,tittle][,helpfile,context])', '2017-11-30 14:04:57', null, '73');
INSERT INTO `t_tips_func` VALUES ('52', 'InputBox函数的语法', 'InputBox(prompt[,title][,default][,xpos][,ypos][,helpfile,context])', '2017-11-30 14:04:57', null, '74');
INSERT INTO `t_tips_func` VALUES ('53', 'InputBoxメソッドの構文', 'object.InputBox(prompt,Title,Default,Left,Top,HelpFile,HelpContextID)', '2017-11-30 14:04:57', null, '75');
INSERT INTO `t_tips_func` VALUES ('54', 'On Error Gotoステートメントの構文', 'On Error Goto line', '2017-11-30 14:04:57', null, '77');
INSERT INTO `t_tips_func` VALUES ('55', 'On Error Resum Next语句的语法', 'On Error Resum Next', '2017-11-30 14:04:57', null, '78');
INSERT INTO `t_tips_func` VALUES ('56', 'On Error Goto 0语句的语法', 'On Error Goto 0', '2017-11-30 14:04:57', null, '79');
INSERT INTO `t_tips_func` VALUES ('57', 'Resume语句的语法', 'Resume line', '2017-11-30 14:04:57', null, '80');
INSERT INTO `t_tips_func` VALUES ('58', 'Resume Next语句的语法', 'Resume Next', '2017-11-30 14:04:57', null, '81');
INSERT INTO `t_tips_func` VALUES ('59', 'Number属性的语法', 'oject.Numbe', '2017-11-30 14:04:57', null, '82');
INSERT INTO `t_tips_func` VALUES ('60', 'Number属性的语法', 'oject.Numbe', '2017-11-30 14:04:57', null, '83');
INSERT INTO `t_tips_func` VALUES ('61', 'Beep声明的定义', 'Beep', '2017-11-30 14:04:57', null, '84');
INSERT INTO `t_tips_func` VALUES ('62', 'Raise方法的语法', 'object.Raise number,source,description,helpfile,helpcontext', '2017-11-30 14:04:57', null, '85');
INSERT INTO `t_tips_func` VALUES ('63', 'Dim声明的结构', 'Dim varname[([subscripts[lower To] upper[,[lower To] upper]])][As type]', '2017-11-30 14:04:57', null, '86');
INSERT INTO `t_tips_func` VALUES ('64', 'Option Base语句的语法', 'Option Base 0/1', '2017-11-30 14:04:57', null, '87');
INSERT INTO `t_tips_func` VALUES ('65', 'To关键字的语法', 'Dim varname[([subscripts [lower To] upper [, [lower To] upper]])] [As type]', '2017-11-30 14:04:57', null, '88');
INSERT INTO `t_tips_func` VALUES ('66', 'Array函数的语法', 'varname = Array(arglist)', '2017-11-30 14:04:57', null, '89');
INSERT INTO `t_tips_func` VALUES ('67', 'Join函数的定义', 'Join(sourcearray[,delimiter])', '2017-11-30 14:04:58', null, '90');
INSERT INTO `t_tips_func` VALUES ('68', 'Split函数的语法', 'Split(expression[,delimiter[,limit[,compare]]])', '2017-11-30 14:04:58', null, '91');
INSERT INTO `t_tips_func` VALUES ('69', 'ReDim声明的语法', 'ReDim[Preserve] varname(subscripts)[As type]', '2017-11-30 14:04:58', null, '92');
INSERT INTO `t_tips_func` VALUES ('70', 'Dim声明的语法', 'Dim varname[([subscripts [lower To] upper [,[lower To ] upper]])] [As type]', '2017-11-30 14:04:58', null, '93');
INSERT INTO `t_tips_func` VALUES ('71', 'Ubound函数/Lｂound函数的语法', 'ＵBound/LBound(arrayname[ , dimension])', '2017-11-30 14:04:58', null, '94');
INSERT INTO `t_tips_func` VALUES ('72', 'Preserve关键字的语法', 'ReDim Preserve varname(subscripts) [As type]', '2017-11-30 14:04:58', null, '95');
INSERT INTO `t_tips_func` VALUES ('73', 'Erase的声明语法', 'Erase arraylist', '2017-11-30 14:04:58', null, '96');
INSERT INTO `t_tips_func` VALUES ('74', 'UBound函数的语法', 'UBound(arrayname[, dimension])', '2017-11-30 14:04:58', null, '97');
INSERT INTO `t_tips_func` VALUES ('75', 'Value属性的语法', 'object.Value', '2017-11-30 14:04:58', null, '98');
INSERT INTO `t_tips_func` VALUES ('76', 'Range属性的语法', 'object.Range(Cell1,Cell2)', '2017-11-30 14:04:58', null, '99');
INSERT INTO `t_tips_func` VALUES ('77', 'Select方法的语法', 'object.Select', '2017-11-30 14:04:58', null, '99');
INSERT INTO `t_tips_func` VALUES ('78', 'Range属性的语法', 'object.Activate', '2017-11-30 14:04:58', null, '100');
INSERT INTO `t_tips_func` VALUES ('79', 'Select方法的语法', 'object.Select', '2017-11-30 14:04:58', null, '100');
INSERT INTO `t_tips_func` VALUES ('80', 'Cells属性的语法', 'object.Cells(RowIndex, ColumnIndex)', '2017-11-30 14:04:58', null, '101');
INSERT INTO `t_tips_func` VALUES ('81', 'Offset属性的语法', 'object.Offset(RowOffset, ColumnOffset)', '2017-11-30 14:04:58', null, '102');
INSERT INTO `t_tips_func` VALUES ('82', 'Goto方法的语法', 'Goto(Reference, Scroll)', '2017-11-30 14:04:58', null, '103');
INSERT INTO `t_tips_func` VALUES ('83', 'Resize属性的语法', 'object.Resize(RowSize, ColumnSize)', '2017-11-30 14:04:58', null, '104');
INSERT INTO `t_tips_func` VALUES ('84', 'Merge方法的语法', 'object.Merge(Across)', '2017-11-30 14:04:58', null, '105');
INSERT INTO `t_tips_func` VALUES ('85', 'UnMerge方法的语法', 'object.UnMerge', '2017-11-30 14:04:58', null, '106');
INSERT INTO `t_tips_func` VALUES ('86', 'MergeArea属性的语法', 'object.MergeArea', '2017-11-30 14:04:58', null, '107');
INSERT INTO `t_tips_func` VALUES ('87', 'MergeCells属性的语法', 'object.MergeCells  /  object.MergeCells = expression', '2017-11-30 14:04:58', null, '108');
INSERT INTO `t_tips_func` VALUES ('88', 'Union 方法的语法', 'Union(Arg1,Arg2,Arg3,…Arg30)', '2017-11-30 14:04:58', null, '109');
INSERT INTO `t_tips_func` VALUES ('89', 'Areas属性的语法', 'object.Areas(Index)', '2017-11-30 14:04:58', null, '110');
INSERT INTO `t_tips_func` VALUES ('90', 'CurrentRegion属性的语法', 'object.CurrentRegion', '2017-11-30 14:04:58', null, '111');
INSERT INTO `t_tips_func` VALUES ('91', 'UsedRange属性的语法', 'object.UsedRange', '2017-11-30 14:04:58', null, '112');
INSERT INTO `t_tips_func` VALUES ('92', 'Address属性的语法', 'object.Address(RowAbsolute, ColumnAbsolute, ReferenceStyle, External,Relative To)', '2017-11-30 14:04:58', null, '113');
INSERT INTO `t_tips_func` VALUES ('93', 'End属性的定义', 'object.End(Direction)', '2017-11-30 14:04:58', null, '114');
INSERT INTO `t_tips_func` VALUES ('94', 'Resize属性的语法', 'object.Resize(RowSize,ColumnSize)', '2017-11-30 14:04:58', null, '115');
INSERT INTO `t_tips_func` VALUES ('95', 'Offset属性的语法', 'object.Offset(RowSize,ColumnOffset)', '2017-11-30 14:04:58', null, '115');
INSERT INTO `t_tips_func` VALUES ('96', 'Previous属性的语法', 'object.Previous', '2017-11-30 14:04:58', null, '116');
INSERT INTO `t_tips_func` VALUES ('97', 'Next属性的语法', 'object.Next', '2017-11-30 14:04:58', null, '116');
INSERT INTO `t_tips_func` VALUES ('98', 'pecialCell方法的概要', 'object.SpecialCell(Type, Value)', '2017-11-30 14:04:58', null, '117');
INSERT INTO `t_tips_func` VALUES ('99', 'Count属性的概要', 'object.Count', '2017-11-30 14:04:58', null, '118');
INSERT INTO `t_tips_func` VALUES ('100', 'SpecialCells方法的语法', 'object.SpecialCells(Type,Value)', '2017-11-30 14:04:58', null, '119');
INSERT INTO `t_tips_func` VALUES ('101', 'Rows属性的语法', 'Object.Rows', '2017-11-30 14:04:58', null, '120');
INSERT INTO `t_tips_func` VALUES ('102', 'Columns属性的语法', 'Object.Columns', '2017-11-30 14:04:58', null, '120');
INSERT INTO `t_tips_func` VALUES ('103', 'Count属性的语法', 'Object.Count', '2017-11-30 14:04:58', null, '120');
INSERT INTO `t_tips_func` VALUES ('104', 'value属性的句法', 'object.Value', '2017-11-30 14:04:58', null, '121');
INSERT INTO `t_tips_func` VALUES ('105', 'Value2属性的语法', 'object.Value2', '2017-11-30 14:04:58', null, '122');
INSERT INTO `t_tips_func` VALUES ('106', 'Formula/FormulaR1C1属性的语法', 'object.Formula/FormulaR1C1', '2017-11-30 14:04:58', null, '123');
INSERT INTO `t_tips_func` VALUES ('107', 'HasFormula属性的语法', 'object.HasFormula', '2017-11-30 14:04:58', null, '124');
INSERT INTO `t_tips_func` VALUES ('108', 'IsDate函数的语法', 'IsDate(expression)', '2017-11-30 14:04:58', null, '125');
INSERT INTO `t_tips_func` VALUES ('109', 'IsEmpty函数的语法', 'IsEmpty(expression)', '2017-11-30 14:04:58', null, '126');
INSERT INTO `t_tips_func` VALUES ('110', 'IsError函数的语法', 'IsError(expression)', '2017-11-30 14:04:58', null, '127');
INSERT INTO `t_tips_func` VALUES ('111', 'Value属性的语法', 'object.Value = expression', '2017-11-30 14:04:58', null, '128');
INSERT INTO `t_tips_func` VALUES ('112', 'Formula属性的语法', 'object.Formula = expression', '2017-11-30 14:04:58', null, '129');
INSERT INTO `t_tips_func` VALUES ('113', 'Insert方法的语法', 'object.Insert(Shift,CopyOrigin)', '2017-11-30 14:04:59', null, '130');
INSERT INTO `t_tips_func` VALUES ('114', 'Delete方法的语法', 'object.Delete(Shift)', '2017-11-30 14:04:59', null, '131');
INSERT INTO `t_tips_func` VALUES ('115', 'Cut方法的语法', 'object.Cut(Destination)', '2017-11-30 14:04:59', null, '132');
INSERT INTO `t_tips_func` VALUES ('116', 'Copy方法的语法', 'object.Copy(Destination)', '2017-11-30 14:04:59', null, '133');
INSERT INTO `t_tips_func` VALUES ('117', 'Paste方法的语法', 'object.Paste(Destination, Link)', '2017-11-30 14:04:59', null, '134');
INSERT INTO `t_tips_func` VALUES ('118', 'CopyPicture方法的语法', 'object.CopyPicture(Appearance,Format)', '2017-11-30 14:04:59', null, '135');
INSERT INTO `t_tips_func` VALUES ('119', 'PasteSpecial方法的结构', 'object.PasteSpecial(Paste,Operation,SkipBlanks,Transpose)', '2017-11-30 14:04:59', null, '136');
INSERT INTO `t_tips_func` VALUES ('120', 'PasteSpecial方法的语法', 'object.PasteSpecial(Paste, Operation, SkipBlanks, Transpose)', '2017-11-30 14:04:59', null, '137');
INSERT INTO `t_tips_func` VALUES ('121', 'Height属性的语法', 'object.Height', '2017-11-30 14:04:59', null, '138');
INSERT INTO `t_tips_func` VALUES ('122', 'Width属性的语法', 'object.Width', '2017-11-30 14:04:59', null, '138');
INSERT INTO `t_tips_func` VALUES ('123', 'Name属性的语法', 'object.Name  /  object.Name = expression', '2017-11-30 14:04:59', null, '139');
INSERT INTO `t_tips_func` VALUES ('124', 'Size属性的语法', 'object.Size  /  object.Size = expression', '2017-11-30 14:04:59', null, '140');
INSERT INTO `t_tips_func` VALUES ('125', 'Bold属性语法', 'object.Bold(=True/False)', '2017-11-30 14:04:59', null, '141');
INSERT INTO `t_tips_func` VALUES ('126', 'Underline属性的语法', 'Object.Underline( = XIUnderlineStyle等级常量)', '2017-11-30 14:04:59', null, '142');
INSERT INTO `t_tips_func` VALUES ('127', 'Subscript属性的语法', 'object.Subscript( = True/False)', '2017-11-30 14:04:59', null, '143');
INSERT INTO `t_tips_func` VALUES ('128', 'Color属性语法', 'object.Color / object.Color = RGB值', '2017-11-30 14:04:59', null, '144');
INSERT INTO `t_tips_func` VALUES ('129', 'Characters属性的结构', 'object.Characters = (Start,Length)', '2017-11-30 14:04:59', null, '145');
INSERT INTO `t_tips_func` VALUES ('130', 'VerticalAlignment/HorizontalAlignment属性的结构', 'object.VerticalAlignment/HorizontalAlignment = expression', '2017-11-30 14:04:59', null, '146');
INSERT INTO `t_tips_func` VALUES ('131', 'AddIndent属性的语法构成', 'object.AddIndent / object.AddIndent = True/False', '2017-11-30 14:04:59', null, '147');
INSERT INTO `t_tips_func` VALUES ('132', 'PrintGridlines属性的构成', 'object.WrapText  /  object.WrapText = True/False', '2017-11-30 14:04:59', null, '148');
INSERT INTO `t_tips_func` VALUES ('133', 'ShrinkToFit属性语法', 'object.ShrinkToFit / object.ShrinkToFit = True/False', '2017-11-30 14:04:59', null, '149');
INSERT INTO `t_tips_func` VALUES ('134', 'Orientation属性语法', 'object.Orientation / object.Orientation = expression', '2017-11-30 14:04:59', null, '150');
INSERT INTO `t_tips_func` VALUES ('135', 'Justify方法语法', 'object.Justify', '2017-11-30 14:04:59', null, '151');
INSERT INTO `t_tips_func` VALUES ('136', 'NumberFormat/ NumberFormatLocal属性的语法', 'object.NumberFormat/NumberFormatLocal( = expression)', '2017-11-30 14:04:59', null, '152');
INSERT INTO `t_tips_func` VALUES ('137', 'Borders属性的构成', 'object.Borders(XlBordersIndex)', '2017-11-30 14:04:59', null, '153');
INSERT INTO `t_tips_func` VALUES ('138', 'Weight属性的语法', 'object.Weight/object.Weight = expression', '2017-11-30 14:04:59', null, '154');
INSERT INTO `t_tips_func` VALUES ('139', 'BorderAround方法的组成', 'object.BorderAround(LineStyle, Weight, ColorIndex, Color, ThemeColor)', '2017-11-30 14:04:59', null, '155');
INSERT INTO `t_tips_func` VALUES ('140', 'BBorder属性的结构', 'object.Borders(XlBorderIndex)', '2017-11-30 14:04:59', null, '156');
INSERT INTO `t_tips_func` VALUES ('141', 'ThemeColor属性の结构', 'object.ThemeColor( = expression)', '2017-11-30 14:04:59', null, '157');
INSERT INTO `t_tips_func` VALUES ('142', 'Pattern属性的结构', 'object.Pattern = expression', '2017-11-30 14:04:59', null, '158');
INSERT INTO `t_tips_func` VALUES ('143', 'ClearFormat方法的组成', 'object.ClearFormat', '2017-11-30 14:04:59', null, '159');
INSERT INTO `t_tips_func` VALUES ('144', 'Date/Time/Now函数的语法', 'Date/Time/Now', '2017-11-30 14:04:59', null, '160');
INSERT INTO `t_tips_func` VALUES ('145', 'Year函数/Month函数/Day函数的语法', 'Year/Month/Day(Date)', '2017-11-30 14:04:59', null, '161');
INSERT INTO `t_tips_func` VALUES ('146', 'Hour函数/Minute函数/Second函数的语法', 'Hour/Minute/Second(time)', '2017-11-30 14:04:59', null, '162');
INSERT INTO `t_tips_func` VALUES ('147', 'Weekday函数的语法', 'Weekday(date,fistdayofweek)', '2017-11-30 14:04:59', null, '163');
INSERT INTO `t_tips_func` VALUES ('148', 'WeekdayName函数的语法', 'WeekdayName(weekday,abbreviate,firstdayofweek)', '2017-11-30 14:04:59', null, '163');
INSERT INTO `t_tips_func` VALUES ('149', 'DateValue函数/TimeValue函数的语法', 'DateValue/TimeValue(date)', '2017-11-30 14:04:59', null, '164');
INSERT INTO `t_tips_func` VALUES ('150', 'DateSerial函数的语法', 'DateSerial(year,month,day)', '2017-11-30 14:04:59', null, '165');
INSERT INTO `t_tips_func` VALUES ('151', 'MonthName函数的语法', 'MonthName(month[,abbreviate])', '2017-11-30 14:04:59', null, '166');
INSERT INTO `t_tips_func` VALUES ('152', 'TimeSerial函数的语法', 'TimeSerial（hour,minute,second）', '2017-11-30 14:04:59', null, '167');
INSERT INTO `t_tips_func` VALUES ('153', 'DateDiff函数的语法', 'DateDiff(interval,date1,date2[,firstdayofweek[,firstweekofyear]])', '2017-11-30 14:05:00', null, '168');
INSERT INTO `t_tips_func` VALUES ('154', 'DatePart函数的语法', 'DatePart（interval,date[,firstdayofweek[,firstweekofyear]]）', '2017-11-30 14:05:00', null, '169');
INSERT INTO `t_tips_func` VALUES ('155', 'DateAdd函数的语法', 'DateAdd（interval,number,date）', '2017-11-30 14:05:00', null, '170');
INSERT INTO `t_tips_func` VALUES ('156', 'Timer函数的语法', 'Timer', '2017-11-30 14:05:00', null, '171');
INSERT INTO `t_tips_func` VALUES ('157', 'FormatDateTime函数的语法', 'FormatDateTime(Date[,NamedFormat])', '2017-11-30 14:05:00', null, '172');
INSERT INTO `t_tips_func` VALUES ('158', 'Len函数/LenB函数的语法', 'Len/LenB(string)', '2017-11-30 14:05:00', null, '173');
INSERT INTO `t_tips_func` VALUES ('159', 'Left函数/Right函数的语法', 'Left/Right(string,length)', '2017-11-30 14:05:00', null, '174');
INSERT INTO `t_tips_func` VALUES ('160', 'Mid函数的语法', 'Mid（string，start[,length])', '2017-11-30 14:05:00', null, '175');
INSERT INTO `t_tips_func` VALUES ('161', 'Chr函数的语法', 'Char（code）', '2017-11-30 14:05:00', null, '176');
INSERT INTO `t_tips_func` VALUES ('162', 'Asc函数的语法', 'Asc(string)', '2017-11-30 14:05:00', null, '177');
INSERT INTO `t_tips_func` VALUES ('163', 'Lcase函数/UCase函数的语法', 'LCase/UCase(string)', '2017-11-30 14:05:00', null, '178');
INSERT INTO `t_tips_func` VALUES ('164', 'StrConv函数的语法', 'StrConv(string,conversion,LCID)', '2017-11-30 14:05:00', null, '179');
INSERT INTO `t_tips_func` VALUES ('165', 'LTrim函数/RTrim函数/Trim函数的语法', 'LTrim/RTrim/Trim(string)', '2017-11-30 14:05:00', null, '180');
INSERT INTO `t_tips_func` VALUES ('166', 'Replace函数的语法', 'Replace（expression,find,replace[,start[,count[,compare]]])', '2017-11-30 14:05:00', null, '181');
INSERT INTO `t_tips_func` VALUES ('167', 'String函数的语法', 'String(number,character)', '2017-11-30 14:05:00', null, '182');
INSERT INTO `t_tips_func` VALUES ('168', 'StrComp函数的语法', 'StrComp（string1，string2[，compare]）', '2017-11-30 14:05:00', null, '183');
INSERT INTO `t_tips_func` VALUES ('169', 'InStr函数的语法', 'InStr([start,]string1,string2[,compare])', '2017-11-30 14:05:00', null, '184');
INSERT INTO `t_tips_func` VALUES ('170', 'InStrRev函数的语法', 'InStrRev(stringcheck,stringmatch[,start[,compare]])', '2017-11-30 14:05:00', null, '184');
INSERT INTO `t_tips_func` VALUES ('171', 'Val函数的语法', 'Val（string）', '2017-11-30 14:05:00', null, '185');
INSERT INTO `t_tips_func` VALUES ('172', 'CDate函数的语法', 'CDate（expression）', '2017-11-30 14:05:00', null, '186');
INSERT INTO `t_tips_func` VALUES ('173', 'CLng函数的语法', 'CLng（expression）', '2017-11-30 14:05:00', null, '187');
INSERT INTO `t_tips_func` VALUES ('174', 'Hex函数的语法', 'Hex（number）', '2017-11-30 14:05:00', null, '188');
INSERT INTO `t_tips_func` VALUES ('175', 'Int函数/Fix函数的语法', 'Int/Fix（number)', '2017-11-30 14:05:00', null, '189');
INSERT INTO `t_tips_func` VALUES ('176', 'IsNumeric函数的语法', 'IsNumeric（expression）', '2017-11-30 14:05:00', null, '190');
INSERT INTO `t_tips_func` VALUES ('177', 'IsArray函数的语法', 'IsArray（varname）', '2017-11-30 14:05:00', null, '191');
INSERT INTO `t_tips_func` VALUES ('178', 'Rnd函数的语法', 'Rnd（number）', '2017-11-30 14:05:00', null, '192');
INSERT INTO `t_tips_func` VALUES ('179', 'Filter函数的语法', 'Filter（sourcesrrary，match[,include[,compare]]）', '2017-11-30 14:05:00', null, '193');
INSERT INTO `t_tips_func` VALUES ('180', 'Environ函数的语法', 'Environ(｛envstring|number｝)', '2017-11-30 14:05:00', null, '194');
INSERT INTO `t_tips_func` VALUES ('181', 'WorksheetFunction函数的语法', 'WorksheetFunction.expression', '2017-11-30 14:05:00', null, '195');
INSERT INTO `t_tips_func` VALUES ('182', 'Evaluate 方法的语法解释', 'Evaluate(Name)', '2017-11-30 14:05:00', null, '196');
INSERT INTO `t_tips_func` VALUES ('183', 'Ｆunction过程的构成', 'Ｆunction name [(arglist)][As type]', '2017-11-30 14:05:00', null, '197');
INSERT INTO `t_tips_func` VALUES ('184', '?记号的定义', '?expression', '2017-11-30 14:05:00', null, '198');
INSERT INTO `t_tips_func` VALUES ('185', 'Function过程的结构', 'Function  name [(arglist)][As  type]', '2017-11-30 14:05:00', null, '199');
INSERT INTO `t_tips_func` VALUES ('186', 'CVErr函数的结构', 'CVErr(errornumber)', '2017-11-30 14:05:00', null, '200');
INSERT INTO `t_tips_func` VALUES ('187', 'Worksheets属性的语法', 'object.Worksheets(index:name)', '2017-11-30 14:05:00', null, '201');
INSERT INTO `t_tips_func` VALUES ('188', 'Activesheet属性的结构', 'object.Activesheet', '2017-11-30 14:05:00', null, '202');
INSERT INTO `t_tips_func` VALUES ('189', 'Select方法的概要', 'object.Select(replace)', '2017-11-30 14:05:01', null, '203');
INSERT INTO `t_tips_func` VALUES ('190', 'Activate方法的概要', 'object.Activate', '2017-11-30 14:05:01', null, '204');
INSERT INTO `t_tips_func` VALUES ('191', 'Array函数的结构', 'Array（arglist）', '2017-11-30 14:05:01', null, '205');
INSERT INTO `t_tips_func` VALUES ('192', 'Name属性的结构', 'object.Name/object.Name=expression', '2017-11-30 14:05:01', null, '206');
INSERT INTO `t_tips_func` VALUES ('193', 'SelectedSheets属性的结构', 'object.SelectedSheets', '2017-11-30 14:05:01', null, '207');
INSERT INTO `t_tips_func` VALUES ('194', 'Name属性的结构', 'object.Name/object.Name=expression', '2017-11-30 14:05:01', null, '208');
INSERT INTO `t_tips_func` VALUES ('195', 'Add 方法的结构', 'object.Add(Before,After,Count,Type)', '2017-11-30 14:05:01', null, '209');
INSERT INTO `t_tips_func` VALUES ('196', 'Delete 方法的结构', 'object.Delete', '2017-11-30 14:05:01', null, '210');
INSERT INTO `t_tips_func` VALUES ('197', 'Move  方法 / Copy 方法', 'object.Move / Copy  (Before/After)', '2017-11-30 14:05:01', null, '211');
INSERT INTO `t_tips_func` VALUES ('198', 'Move  方法 / Copy 方法', 'object.Move  (Before/After)', '2017-11-30 14:05:01', null, '212');
INSERT INTO `t_tips_func` VALUES ('199', 'Tab  属性的结构', 'object.Tab', '2017-11-30 14:05:01', null, '213');
INSERT INTO `t_tips_func` VALUES ('200', 'Visible  属性的结构', 'object.Visible /object.Visible　=　expression', '2017-11-30 14:05:01', null, '214');
INSERT INTO `t_tips_func` VALUES ('201', 'Count  属性的结构', 'object.Count', '2017-11-30 14:05:01', null, '215');
INSERT INTO `t_tips_func` VALUES ('202', 'Previous  属性 /  Next 属性', 'object.Previous / Next', '2017-11-30 14:05:01', null, '216');
INSERT INTO `t_tips_func` VALUES ('203', 'Protect  方法的结构', 'object.Protect(Password,DrawingObjects,Contents,Scenarios,UserInterfaceOnly)', '2017-11-30 14:05:01', null, '217');
INSERT INTO `t_tips_func` VALUES ('204', 'Locked  属性的结构', 'object.Locked =expression', '2017-11-30 14:05:01', null, '218');
INSERT INTO `t_tips_func` VALUES ('205', 'UnProtect  方法的结构', 'object.UnProtect(Password)', '2017-11-30 14:05:01', null, '219');
INSERT INTO `t_tips_func` VALUES ('206', 'Rows属性 / Columns 属性的结构', 'object.Rows / Columns(Index)', '2017-11-30 14:05:01', null, '220');
INSERT INTO `t_tips_func` VALUES ('207', 'EntireRow属性 / EntireColumn 属性的结构', 'object.EntireRow / EntireColumn(Index)', '2017-11-30 14:05:01', null, '221');
INSERT INTO `t_tips_func` VALUES ('208', 'Row属性 / Column 属性的结构', 'object.Row / Column', '2017-11-30 14:05:01', null, '222');
INSERT INTO `t_tips_func` VALUES ('209', 'Hidden 属性的结构', 'object.Hidden / object.Hidden = expression', '2017-11-30 14:05:01', null, '223');
INSERT INTO `t_tips_func` VALUES ('210', 'RowHeight 属性 / ColumnWidth 属性的结构', 'object.RowHeight /ColumnWidth = expression', '2017-11-30 14:05:01', null, '224');
INSERT INTO `t_tips_func` VALUES ('211', 'AutoFit 方法的结构', 'object.AutoFit', '2017-11-30 14:05:01', null, '225');
INSERT INTO `t_tips_func` VALUES ('212', 'AutoFit 方法的结构', 'object.AutoFit', '2017-11-30 14:05:01', null, '226');
INSERT INTO `t_tips_func` VALUES ('213', 'Insert方法的构成', 'object.Insert(Shift,CopyOrigin)', '2017-11-30 14:05:01', null, '227');
INSERT INTO `t_tips_func` VALUES ('214', 'Delete方法的构成', 'object.Delete(Shift)', '2017-11-30 14:05:01', null, '228');
INSERT INTO `t_tips_func` VALUES ('215', 'CentimetersToPoints方法的构成', 'object.CentimetersToPoints(Centimeters)', '2017-11-30 14:05:01', null, '229');
INSERT INTO `t_tips_func` VALUES ('216', 'Windows属性的语法', 'object.Windows(Index/name)', '2017-11-30 14:05:01', null, '230');
INSERT INTO `t_tips_func` VALUES ('217', 'ActiveWindows属性的语法', 'object.Windows', '2017-11-30 14:05:01', null, '231');
INSERT INTO `t_tips_func` VALUES ('218', 'Activate方法的语法', 'object.Activate', '2017-11-30 14:05:01', null, '232');
INSERT INTO `t_tips_func` VALUES ('219', 'Arrange 方法の语法', 'object.Arrange(ArrangeStyle,ActiveWorkbook,SyncHorizontal,SyncVertical)', '2017-11-30 14:05:01', null, '233');
INSERT INTO `t_tips_func` VALUES ('220', 'NewWindow 方法的语法', 'object.NewWindow', '2017-11-30 14:05:01', null, '234');
INSERT INTO `t_tips_func` VALUES ('221', 'CompareSideBySideWith 方法的语法', 'object.CompareSideBySideWith(WindowName)', '2017-11-30 14:05:01', null, '235');
INSERT INTO `t_tips_func` VALUES ('222', 'Caption 属性的语法', 'object.Caption', '2017-11-30 14:05:01', null, '236');
INSERT INTO `t_tips_func` VALUES ('223', 'Zoom特性的语法', 'object.Zoom/Object.Zoom = expression', '2017-11-30 14:05:02', null, '237');
INSERT INTO `t_tips_func` VALUES ('224', 'FreezePanes 属性的语法', 'object.FreezePanes/Object.FreezePanes = expression', '2017-11-30 14:05:02', null, '238');
INSERT INTO `t_tips_func` VALUES ('225', 'SplitRow属性/SplitColumn属性的语法', 'object.SplitRow /SplitColumn = expression', '2017-11-30 14:05:02', null, '239');
INSERT INTO `t_tips_func` VALUES ('226', 'ScrollRow属性/ScrollColumn属性的语法', 'object.ScrollRow /ScrollColumn = expression', '2017-11-30 14:05:02', null, '240');
INSERT INTO `t_tips_func` VALUES ('227', 'WindowState 属性的语法', 'object.WindowState = expression', '2017-11-30 14:05:02', null, '241');
INSERT INTO `t_tips_func` VALUES ('228', 'Width/Height 属性的语法', 'object.Width/Hight = expression', '2017-11-30 14:05:02', null, '242');
INSERT INTO `t_tips_func` VALUES ('229', 'Top/Left 属性的语法', 'object.Top/Left = expression', '2017-11-30 14:05:02', null, '243');
INSERT INTO `t_tips_func` VALUES ('230', 'EnableResize 属性的语法', 'object.EnableResize = expression', '2017-11-30 14:05:02', null, '244');
INSERT INTO `t_tips_func` VALUES ('231', 'UsableHeight 属性/UsableWidth 属性的语法', 'object.UsableHeight /UsableWidth  = expression', '2017-11-30 14:05:02', null, '245');
INSERT INTO `t_tips_func` VALUES ('232', 'Visible 属性的语法', 'object.Visible = expression', '2017-11-30 14:05:02', null, '246');
INSERT INTO `t_tips_func` VALUES ('233', 'DisplayGridLines 属性的语法', 'object.DisplayGridLines = expression', '2017-11-30 14:05:02', null, '247');
INSERT INTO `t_tips_func` VALUES ('234', 'GridlineColor /GridlineColorIndex 属性的语法', 'object.GridlineColor /GridlineColorIndex = expression', '2017-11-30 14:05:02', null, '247');
INSERT INTO `t_tips_func` VALUES ('235', 'View 属性的语法', 'object.View = expression', '2017-11-30 14:05:02', null, '248');
INSERT INTO `t_tips_func` VALUES ('236', 'DisplayWorkbookTabs 属性的语法', 'object.DisplayWorkbookTabs = expression', '2017-11-30 14:05:02', null, '249');
INSERT INTO `t_tips_func` VALUES ('237', 'StatusBar 属性的语法', 'object.StatusBar = expression', '2017-11-30 14:05:02', null, '250');
INSERT INTO `t_tips_func` VALUES ('238', 'ScreenUpdating属性的语法', 'object.ScreenUpdating = expression', '2017-11-30 14:05:02', null, '251');
INSERT INTO `t_tips_func` VALUES ('239', 'Workbooks属性的结构', 'object.Workbooks(index)', '2017-11-30 14:05:02', null, '252');
INSERT INTO `t_tips_func` VALUES ('240', 'ActiveWorkbook属性的结构', 'object.ActiveWorkbook', '2017-11-30 14:05:02', null, '253');
INSERT INTO `t_tips_func` VALUES ('241', 'Activate方法的结构', 'object.Activate', '2017-11-30 14:05:02', null, '254');
INSERT INTO `t_tips_func` VALUES ('242', 'Add方法的结构', 'object.Add(Template)', '2017-11-30 14:05:02', null, '255');
INSERT INTO `t_tips_func` VALUES ('243', 'Open方法的文章结构', 'object.Open(FileName,UpdateLinks,ReadOnly,Format,PassWord,\n                WriteResPassword,lgnoreReadOnlyRecommended,Origin,Delimiter,Editable,\n                Notify,Converter,AddToMru,Local,CorruptLoad)', '2017-11-30 14:05:02', null, '256');
INSERT INTO `t_tips_func` VALUES ('244', 'GetOpenFilename方法的语法', 'object.GetOpenFilename(FileFilter,FilterIndex,Title,ButtonText,MultiSelect)', '2017-11-30 14:05:02', null, '257');
INSERT INTO `t_tips_func` VALUES ('245', 'FileDialog属性的语法', 'object.FlieDialog(fileDialogType)', '2017-11-30 14:05:02', null, '258');
INSERT INTO `t_tips_func` VALUES ('246', 'Save方法的语法', 'object.Save', '2017-11-30 14:05:02', null, '259');
INSERT INTO `t_tips_func` VALUES ('247', 'SaveAs方法的结构', 'SaveAs(FileName,File Foraat,Password,WriteResPassword,\n                ReadOnlyRecommended,CreateBackup,AccessMode,ConflictResolution,\n                AddToMru,TextCodepage,TextVisualLayout,Local)', '2017-11-30 14:05:02', null, '260');
INSERT INTO `t_tips_func` VALUES ('248', 'SaveAs方法的结构', 'SaveAs(FileName,File Foraat,Password,WriteResPassword,ReadOnlyRecommended,CreateBackup,AccessMode,ConflictResolution,AddToMru,TextCodepage,TextVisualLayout,Local)', '2017-11-30 14:05:02', null, '261');
INSERT INTO `t_tips_func` VALUES ('249', 'SaveAs方法的结构', 'SaveAs(FileName,FileFormat,Password,WriteResPassword,ReadOnlyRecommended,CreateBackup,AccessMode,ConflictResolution,AddToMru,TextCodepage,TextVisualLayout,Local)', '2017-11-30 14:05:02', null, '262');
INSERT INTO `t_tips_func` VALUES ('250', 'SaveAs方法的结构', 'SaveAs(fileName,FileFormat,Password,WriteResPassword,ReadOnlyRecommended,CreateBackup,AccessMode,ConfilctResolution,AddToMru,TextCodepage,13 TextVisualLayout,Local)', '2017-11-30 14:05:02', null, '263');
INSERT INTO `t_tips_func` VALUES ('251', 'GetSaveAsFilename方法的结构', 'object.GetSaveAsFilename(InitialFilename,FileFilter,FilterIndex,Title,ButtonText)', '2017-11-30 14:05:02', null, '264');
INSERT INTO `t_tips_func` VALUES ('252', 'FileDialog属性的结构', 'Object.FileDialog(fileDialogType)', '2017-11-30 14:05:02', null, '265');
INSERT INTO `t_tips_func` VALUES ('253', 'ChDir函数的结构', 'ChDir path', '2017-11-30 14:05:02', null, '266');
INSERT INTO `t_tips_func` VALUES ('254', 'Dir函数的结构', 'Dir[(pathname[,attributes])]', '2017-11-30 14:05:02', null, '267');
INSERT INTO `t_tips_func` VALUES ('255', 'Path属性的文章结构', 'Object.Path', '2017-11-30 14:05:02', null, '268');
INSERT INTO `t_tips_func` VALUES ('256', 'ExportAsFixedFormat方法的结构', 'object.ExportAsFixedFormat(Type,Filename,QualityIncludeDocProperties,IgnorePrintAreas,From,To,OpenAfterPublish,FixedFormatExtClassPtr)', '2017-11-30 14:05:02', null, '269');
INSERT INTO `t_tips_func` VALUES ('257', 'Close方法的结构', 'Object.Close(SavaChanges,Filename,RouteWorkbook)', '2017-11-30 14:05:02', null, '270');
INSERT INTO `t_tips_func` VALUES ('258', 'Saved属性の语法', 'Object.Save', '2017-11-30 14:05:02', null, '271');
INSERT INTO `t_tips_func` VALUES ('259', 'Save属性的语法', 'Object.Saved', '2017-11-30 14:05:02', null, '272');
INSERT INTO `t_tips_func` VALUES ('260', 'Close方法的语法', 'Object.Close(SaveChanges,Fliename,RouteWorkbook)', '2017-11-30 14:05:03', null, '273');
INSERT INTO `t_tips_func` VALUES ('261', 'Quit方法的语法', 'Object.Quit', '2017-11-30 14:05:03', null, '274');
INSERT INTO `t_tips_func` VALUES ('262', 'Saved属性的语法', 'Object.Saved', '2017-11-30 14:05:03', null, '275');
INSERT INTO `t_tips_func` VALUES ('263', 'Name属性的语法', 'Object.Name', '2017-11-30 14:05:03', null, '276');
INSERT INTO `t_tips_func` VALUES ('264', 'Name属性的语法', 'Object.Name', '2017-11-30 14:05:03', null, '277');
INSERT INTO `t_tips_func` VALUES ('265', 'Fullname属性的语法', 'Object.Fullname', '2017-11-30 14:05:03', null, '278');
INSERT INTO `t_tips_func` VALUES ('266', 'Protect方法的语法', 'Object.Protect(Password,Structure,Windows)', '2017-11-30 14:05:03', null, '279');
INSERT INTO `t_tips_func` VALUES ('267', 'FileCopy声明的语法', 'FileCopy source,destination', '2017-11-30 14:05:03', null, '280');
INSERT INTO `t_tips_func` VALUES ('268', 'SaveCopyAs方法的语法', 'object.SaveCopyAs(Filename)', '2017-11-30 14:05:03', null, '281');
INSERT INTO `t_tips_func` VALUES ('269', 'ResentFiles属性的语法', 'oobject.RecentFiles', '2017-11-30 14:05:03', null, '282');
INSERT INTO `t_tips_func` VALUES ('270', 'Dialogs属性的语法', 'object.RecentFiles', '2017-11-30 14:05:03', null, '283');
INSERT INTO `t_tips_func` VALUES ('271', 'BuiltinDocumentProperties属性的语法', 'object.BuiltinDocumentProperties', '2017-11-30 14:05:03', null, '284');
INSERT INTO `t_tips_func` VALUES ('272', 'Sort对象的句法', 'object.Sort', '2017-11-30 14:05:03', null, '285');
INSERT INTO `t_tips_func` VALUES ('273', 'Add方法的句法', 'object.Add(Key,SortOn,Order,CustomOrder,DataOption)', '2017-11-30 14:05:03', null, '285');
INSERT INTO `t_tips_func` VALUES ('274', 'Sort对象的句法', 'object.Sort', '2017-11-30 14:05:03', null, '286');
INSERT INTO `t_tips_func` VALUES ('275', 'Add方法的句法', 'object.Add(Key,SortOn,Order,CustomOrder,DataOption)', '2017-11-30 14:05:03', null, '286');
INSERT INTO `t_tips_func` VALUES ('276', 'Sort对象的句法', 'object.Sort', '2017-11-30 14:05:03', null, '287');
INSERT INTO `t_tips_func` VALUES ('277', 'Add方法的句法', 'object.Add(Key,SortOn,Order,CustomOrder,DataOption)', '2017-11-30 14:05:03', null, '287');
INSERT INTO `t_tips_func` VALUES ('278', 'Sort对象的句法', 'object.Sort', '2017-11-30 14:05:03', null, '288');
INSERT INTO `t_tips_func` VALUES ('279', 'Add方法的句法', 'object.Add(Key,SortOn,Order,CustomOrder,DataOption)', '2017-11-30 14:05:03', null, '288');
INSERT INTO `t_tips_func` VALUES ('280', 'SubTotal方法的句法', 'object.SubTotal(GroupBy,function,TotalList,Replace,PageBreaks,SummaryBelowData)', '2017-11-30 14:05:03', null, '289');
INSERT INTO `t_tips_func` VALUES ('281', 'ShowLevels方法的句法', 'object.ShowLevels(RowLevels,ColumnLevels)', '2017-11-30 14:05:03', null, '290');
INSERT INTO `t_tips_func` VALUES ('282', 'ClearOutline方法的句法', 'object.ClearOutline', '2017-11-30 14:05:03', null, '291');
INSERT INTO `t_tips_func` VALUES ('283', 'AutoFitter方法的构成', 'AutoFitter(Field,Criteria1,Operator,Criteria2,VisibleDropDown)', '2017-11-30 14:05:03', null, '292');
INSERT INTO `t_tips_func` VALUES ('284', 'AutoFilter方法的句法', 'AutoFilter(Field,Criteria1,Operator,Criteria2,VisibleDropDown)', '2017-11-30 14:05:03', null, '293');
INSERT INTO `t_tips_func` VALUES ('285', 'AutoFilter方法的句法', 'AutoFilter(Field,Criteria1,Operator,Criteria2,VisibleDropDown)', '2017-11-30 14:05:03', null, '294');
INSERT INTO `t_tips_func` VALUES ('286', 'Array函数的句法', 'Array(arglist)', '2017-11-30 14:05:03', null, '295');
INSERT INTO `t_tips_func` VALUES ('287', 'AutoFilter方法的句法', 'AutoFilter(Field,Criteria1,Operator,Criteria2,VisibleDropDown)', '2017-11-30 14:05:03', null, '296');
INSERT INTO `t_tips_func` VALUES ('288', 'AutoFilter方法的构成', 'AutoFilter(Field,Criteria1,Operator,Criteria2,VisibleDropDown)', '2017-11-30 14:05:03', null, '297');
INSERT INTO `t_tips_func` VALUES ('289', 'AutoFilter方法的构成', 'AutoFilter(Field,Criteria1,Operator,Criteria2,VisibleDropDown)', '2017-11-30 14:05:03', null, '298');
INSERT INTO `t_tips_func` VALUES ('290', 'AutoFilter方法的构成', 'AutoFilter(Field,Criteria1,Operator,Criteria2,VisibleDropDown)', '2017-11-30 14:05:03', null, '299');
INSERT INTO `t_tips_func` VALUES ('291', 'SpecialCells方法的语法', 'Object.SpecialCells(Type, Value)', '2017-11-30 14:05:03', null, '300');
INSERT INTO `t_tips_func` VALUES ('292', 'AutoFilter 属性的解释', 'object.AutoFilter', '2017-11-30 14:05:03', null, '301');
INSERT INTO `t_tips_func` VALUES ('293', 'AutoFill方法的结构', 'object.AutoFill(Field,Criteria1,Operator,Criteria2,VisbleDropDown)', '2017-11-30 14:05:03', null, '302');
INSERT INTO `t_tips_func` VALUES ('294', 'FilterMode 属性的定义', 'object.FilterMode', '2017-11-30 14:05:03', null, '303');
INSERT INTO `t_tips_func` VALUES ('295', 'ShowAllData方法的句法', 'object.ShowAllData', '2017-11-30 14:05:03', null, '304');
INSERT INTO `t_tips_func` VALUES ('296', 'AutoFilter方法的句法', 'object.AutoFilter', '2017-11-30 14:05:03', null, '305');
INSERT INTO `t_tips_func` VALUES ('297', 'AdvancedFilter方法的语法', 'AdvancedFilter（Action,CriteraRange,CopyToRange,Unique)', '2017-11-30 14:05:03', null, '306');
INSERT INTO `t_tips_func` VALUES ('298', 'AdvancedFilter  方法的解释', 'AdvancedFilter(Action，CriteriaRange,CopyToRange,Unique)', '2017-11-30 14:05:03', null, '307');
INSERT INTO `t_tips_func` VALUES ('299', 'RemoveDuplicates 方法的解释', 'RemoveDuplicates(Columns，Header)', '2017-11-30 14:05:03', null, '308');
INSERT INTO `t_tips_func` VALUES ('300', 'AutoFill方法语句', 'object.AutoFill(Destination,Type)', '2017-11-30 14:05:04', null, '309');
INSERT INTO `t_tips_func` VALUES ('301', 'Value属性语法', 'object.Value', '2017-11-30 14:05:04', null, '310');
INSERT INTO `t_tips_func` VALUES ('302', 'Validation工程/Add方法的语法', 'oject.Validation.Add(Type,AlertStyle,Operator,Formula1,Formula2)', '2017-11-30 14:05:04', null, '311');
INSERT INTO `t_tips_func` VALUES ('303', 'Delete方法语法', 'object.Delete', '2017-11-30 14:05:04', null, '312');
INSERT INTO `t_tips_func` VALUES ('304', 'Modify方法语法', 'Modify(Type,AlertStyle,Operator,Formula1,Formula2)', '2017-11-30 14:05:04', null, '313');
INSERT INTO `t_tips_func` VALUES ('305', 'AddCustomList方法语法', 'object.AddCustomList(ListArray,ByRow)', '2017-11-30 14:05:04', null, '314');
INSERT INTO `t_tips_func` VALUES ('306', 'GetCustomListNum方法语法', 'GetCustomListNum(ListArray)', '2017-11-30 14:05:04', null, '315');
INSERT INTO `t_tips_func` VALUES ('307', 'DeleteCustomList方法语法', 'DeleteCustomList(ListNum)', '2017-11-30 14:05:04', null, '315');
INSERT INTO `t_tips_func` VALUES ('308', 'TextToColumn方法语法', 'TextToColumn(Destination,DataType,TextQualifier,ConsecutiveDelimiter,Tab,Semicolon,Comma,Space,Other,OtherChar,FieldInfo,DecimalSeparator,ThousandsSeparator,TrailingMinusNumbers)', '2017-11-30 14:05:04', null, '316');
INSERT INTO `t_tips_func` VALUES ('309', 'Phonetics对象', 'object.Phonetics', '2017-11-30 14:05:04', null, '317');
INSERT INTO `t_tips_func` VALUES ('310', 'Text属性语法', 'object.Phonetic.Text = text', '2017-11-30 14:05:04', null, '317');
INSERT INTO `t_tips_func` VALUES ('311', 'Formula属性/FormulaR1C1属性语法', 'object.Formula/FormulaR1C1', '2017-11-30 14:05:04', null, '318');
INSERT INTO `t_tips_func` VALUES ('312', 'FormulaArray属性语法', 'object.FormulaArray', '2017-11-30 14:05:04', null, '319');
INSERT INTO `t_tips_func` VALUES ('313', 'HasFormula属性语法', 'object.HasFormula', '2017-11-30 14:05:04', null, '320');
INSERT INTO `t_tips_func` VALUES ('314', 'Find方法语法', 'object.Find(What,After,Lookin,LookAt,SearchOrder,SearchDirection,\n                    MatchCase,MatchByte,SearchFormat)', '2017-11-30 14:05:04', null, '321');
INSERT INTO `t_tips_func` VALUES ('315', 'FindNext方法语法', 'object.FindNext(After)', '2017-11-30 14:05:04', null, '321');
INSERT INTO `t_tips_func` VALUES ('316', 'Find方法语法', 'object.Find(What,After,Lookin,LookAt,SearchOrder,SearchDirection,\n                    MatchCase,MatchByte,SearchFormat)', '2017-11-30 14:05:04', null, '322');
INSERT INTO `t_tips_func` VALUES ('317', 'FindFormat属性语法', 'object.FindFormat', '2017-11-30 14:05:04', null, '322');
INSERT INTO `t_tips_func` VALUES ('318', 'Replace方法语法', 'object.Replace(What,Replacement,LookAt,SearchOrder,MatchCase,\n                    MatchByte,SearchFormat,ReplaceFormat)', '2017-11-30 14:05:04', null, '323');
INSERT INTO `t_tips_func` VALUES ('319', 'Replace方法语法', 'object.Replace(What,Replacement,LookAt,SearchOrder,MatchCase,\n                    MatchByte,SearchFormat,ReplaceFormat)', '2017-11-30 14:05:04', null, '324');
INSERT INTO `t_tips_func` VALUES ('320', 'ListObjects属性语法', 'object.ListObjects(n)', '2017-11-30 14:05:04', null, '325');
INSERT INTO `t_tips_func` VALUES ('321', 'Add方法语法', 'object.Add(SourceType,Source,LinkSource,HasHeader,Destination)', '2017-11-30 14:05:04', null, '325');
INSERT INTO `t_tips_func` VALUES ('322', 'ListRows属性语法', 'object.ListRows(index)', '2017-11-30 14:05:04', null, '326');
INSERT INTO `t_tips_func` VALUES ('323', 'ListColumns属性语法', 'object.ListColumns(index)', '2017-11-30 14:05:04', null, '327');
INSERT INTO `t_tips_func` VALUES ('324', 'Active属性语法', 'object.Active', '2017-11-30 14:05:04', null, '328');
INSERT INTO `t_tips_func` VALUES ('325', 'HeaderRowRange属性语法', 'object.HeaderRowRange', '2017-11-30 14:05:04', null, '329');
INSERT INTO `t_tips_func` VALUES ('326', 'ShowTotals属性语法', 'object.ShowTotals = experssion', '2017-11-30 14:05:04', null, '330');
INSERT INTO `t_tips_func` VALUES ('327', 'TotalsCalculation属性语法', 'object.TotalsCalculation = calc', '2017-11-30 14:05:04', null, '330');
INSERT INTO `t_tips_func` VALUES ('328', 'PivottableWizard方法的句法', 'object.PivotTableWizard(SourceType,SourceData,TableDestination,\n            TableName,\n            RowGrand,ColumnGrand,SaveData,HasAutoFormat,AutoPage,Reserved,\n            BackgroundQuery,OptimizeCache,PageFieldOrder,PageFieldWrapCount,\n            ReadData,\n            Connection)', '2017-11-30 14:05:04', null, '331');
INSERT INTO `t_tips_func` VALUES ('329', 'Orientation属性的句法', 'object.Orientation = expression', '2017-11-30 14:05:04', null, '331');
INSERT INTO `t_tips_func` VALUES ('330', 'Function 属性的句法', 'object.Function = expression', '2017-11-30 14:05:04', null, '331');
INSERT INTO `t_tips_func` VALUES ('331', 'PivotCache方法的结构', 'object.PivotCaches', '2017-11-30 14:05:04', null, '332');
INSERT INTO `t_tips_func` VALUES ('332', 'CreatePivotTable方法的结构', 'object.CreatePivotTable(TableDestination,TableName,ReadData,DefaultVersion)', '2017-11-30 14:05:04', null, '332');
INSERT INTO `t_tips_func` VALUES ('333', 'AddFields方法的结构', 'object.AddFields(RowFields,ColumnFields,PageFieds,AddToTable)', '2017-11-30 14:05:04', null, '333');
INSERT INTO `t_tips_func` VALUES ('334', 'Position属性的结构', 'object.Position = num', '2017-11-30 14:05:04', null, '333');
INSERT INTO `t_tips_func` VALUES ('335', 'Refresh方法的结构', 'object.Refresh', '2017-11-30 14:05:04', null, '334');
INSERT INTO `t_tips_func` VALUES ('336', 'PivotCell属性的结构', 'object.PivotCell', '2017-11-30 14:05:04', null, '335');
INSERT INTO `t_tips_func` VALUES ('337', 'PivotCellType属性的结构', 'object.PivotCellType', '2017-11-30 14:05:04', null, '335');
INSERT INTO `t_tips_func` VALUES ('338', 'Location方法的结构', 'object.Location(Where,Name)', '2017-11-30 14:05:04', null, '336');
INSERT INTO `t_tips_func` VALUES ('339', 'Add方法的结构', 'object.Add', '2017-11-30 14:05:04', null, '337');
INSERT INTO `t_tips_func` VALUES ('340', 'Shapes属性的构成', 'object.Shapes(n)', '2017-11-30 14:05:04', null, '338');
INSERT INTO `t_tips_func` VALUES ('341', 'SelectAll方法の构成', 'object.SelectAll', '2017-11-30 14:05:04', null, '338');
INSERT INTO `t_tips_func` VALUES ('342', 'Shapes属性的语法', 'object.Shapes(n)', '2017-11-30 14:05:04', null, '339');
INSERT INTO `t_tips_func` VALUES ('343', 'Delete方法の语法', 'object.Delete', '2017-11-30 14:05:04', null, '339');
INSERT INTO `t_tips_func` VALUES ('344', 'Range属性的语法', 'object.Shapes.Range(index)', '2017-11-30 14:05:04', null, '340');
INSERT INTO `t_tips_func` VALUES ('345', 'Name属性的语法', 'object.Name', '2017-11-30 14:05:04', null, '341');
INSERT INTO `t_tips_func` VALUES ('346', 'Name方法的语法', 'object.AddLine(BeginX,BeginY,EndX,EndY)', '2017-11-30 14:05:04', null, '342');
INSERT INTO `t_tips_func` VALUES ('347', 'AddTextbox方法的语法', 'AddTextbox(Orientation,left,Top,Width,Height)', '2017-11-30 14:05:04', null, '343');
INSERT INTO `t_tips_func` VALUES ('348', 'AddShapeメソッドの構文', 'Object.AddShape(Type,left,Top,Width,Height)', '2017-11-30 14:05:04', null, '344');
INSERT INTO `t_tips_func` VALUES ('349', 'Left属性/Top属性的语法', 'object.Left/Top = position', '2017-11-30 14:05:04', null, '345');
INSERT INTO `t_tips_func` VALUES ('350', 'Visible属性的语法', 'object.Visible = expression', '2017-11-30 14:05:04', null, '346');
INSERT INTO `t_tips_func` VALUES ('351', 'Group方法/Ungroup方法', 'object.Group/Ungroup', '2017-11-30 14:05:05', null, '347');
INSERT INTO `t_tips_func` VALUES ('352', 'Flip方法的语法', 'object.Flip FlipCmd', '2017-11-30 14:05:05', null, '348');
INSERT INTO `t_tips_func` VALUES ('353', 'Rotation属性的语法', 'object.Rotation = angle', '2017-11-30 14:05:05', null, '349');
INSERT INTO `t_tips_func` VALUES ('354', 'RotationX/RotationY/RotationZプロパティの構文', 'object.RotationX/RotationY/RotationZ = angle', '2017-11-30 14:05:05', null, '350');
INSERT INTO `t_tips_func` VALUES ('355', 'AddTextEffectメソッドの语法', 'AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, Fontltalic, Left, Top)', '2017-11-30 14:05:05', null, '351');
INSERT INTO `t_tips_func` VALUES ('356', 'Line属性の语法', 'object.Line', '2017-11-30 14:05:05', null, '352');
INSERT INTO `t_tips_func` VALUES ('357', 'Fill属性の语法', 'object.Fill', '2017-11-30 14:05:05', null, '353');
INSERT INTO `t_tips_func` VALUES ('358', 'DashStyle属性的语法', 'object.DashStyle', '2017-11-30 14:05:05', null, '354');
INSERT INTO `t_tips_func` VALUES ('359', 'OneColorGradient方法的语法', 'object.OneColorGradient(Style, Variant, Degree)', '2017-11-30 14:05:05', null, '355');
INSERT INTO `t_tips_func` VALUES ('360', 'TwoColorGradient方法的语法', 'object.TwoColorGradient(Style, Variant)', '2017-11-30 14:05:05', null, '356');
INSERT INTO `t_tips_func` VALUES ('361', 'PresetTextured方法的语法', 'PresetTextured(PresetTexture)', '2017-11-30 14:05:05', null, '357');
INSERT INTO `t_tips_func` VALUES ('362', 'Glow属性的语法构成', 'object.Glow', '2017-11-30 14:05:05', null, '358');
INSERT INTO `t_tips_func` VALUES ('363', 'Reflection属性的语法构成', 'object.Reflection', '2017-11-30 14:05:05', null, '359');
INSERT INTO `t_tips_func` VALUES ('364', 'Add方法的语法', 'object.Add(Left,Top,Width,Height)', '2017-11-30 14:05:05', null, '360');
INSERT INTO `t_tips_func` VALUES ('365', 'SetSourceData方法的语法', 'object.SetSourceData(Source,PlotBy)', '2017-11-30 14:05:05', null, '360');
INSERT INTO `t_tips_func` VALUES ('366', 'ChartType属性的语法', 'object.ChartType=expression', '2017-11-30 14:05:05', null, '360');
INSERT INTO `t_tips_func` VALUES ('367', 'Charts对象的语法', 'object.Charts', '2017-11-30 14:05:05', null, '361');
INSERT INTO `t_tips_func` VALUES ('368', 'Add方法的语法', 'object.Add(Before,After,Count)', '2017-11-30 14:05:05', null, '361');
INSERT INTO `t_tips_func` VALUES ('369', 'Select方法的语法', 'object.Select', '2017-11-30 14:05:05', null, '362');
INSERT INTO `t_tips_func` VALUES ('370', 'Delete方法的语法', 'object.Delete', '2017-11-30 14:05:05', null, '362');
INSERT INTO `t_tips_func` VALUES ('371', 'ChartTypeプロパティ的语法', 'object.ChartType = XlChartType', '2017-11-30 14:05:05', null, '363');
INSERT INTO `t_tips_func` VALUES ('372', 'Name属性的语法', 'object.Name = expresson', '2017-11-30 14:05:05', null, '364');
INSERT INTO `t_tips_func` VALUES ('373', 'Name属性的语法', 'object.Name = expresson', '2017-11-30 14:05:05', null, '365');
INSERT INTO `t_tips_func` VALUES ('374', 'HasAxis属性的语法', 'object.HasAxis(index1, index2)', '2017-11-30 14:05:05', null, '366');
INSERT INTO `t_tips_func` VALUES ('375', 'AxisGroup属性的语法', 'object.AxisGroup', '2017-11-30 14:05:05', null, '366');
INSERT INTO `t_tips_func` VALUES ('376', 'Left属性/Top属性/Width属性/Height属性', 'object.Left/Top/Width/Height = expression', '2017-11-30 14:05:05', null, '367');
INSERT INTO `t_tips_func` VALUES ('377', 'PlotArea属性的语法', 'object.PlotArea', '2017-11-30 14:05:05', null, '368');
INSERT INTO `t_tips_func` VALUES ('378', 'Color属性的语法', 'object.Color', '2017-11-30 14:05:05', null, '368');
INSERT INTO `t_tips_func` VALUES ('379', 'HasTitle属性的语法', 'object.HasTitle = expression', '2017-11-30 14:05:05', null, '369');
INSERT INTO `t_tips_func` VALUES ('380', 'ChartTitle属性的语法', 'object.ChartTitle', '2017-11-30 14:05:05', null, '369');
INSERT INTO `t_tips_func` VALUES ('381', 'HasTitle属性的语法', 'object.HasTitle = expression', '2017-11-30 14:05:05', null, '370');
INSERT INTO `t_tips_func` VALUES ('382', 'AxisTitle属性的语法', 'object.AxisTitle', '2017-11-30 14:05:05', null, '370');
INSERT INTO `t_tips_func` VALUES ('383', 'MaximumScale属性/MinimumScale属性的语法', 'object.MaximumScale/MinimumScale = expression', '2017-11-30 14:05:05', null, '371');
INSERT INTO `t_tips_func` VALUES ('384', 'HasLegend属性的语法', 'object.HasLegend', '2017-11-30 14:05:05', null, '372');
INSERT INTO `t_tips_func` VALUES ('385', 'Legend属性的语法', 'object.Legend', '2017-11-30 14:05:05', null, '372');
INSERT INTO `t_tips_func` VALUES ('386', 'Count属性的语法', 'object.Count', '2017-11-30 14:05:05', null, '373');
INSERT INTO `t_tips_func` VALUES ('387', 'SeriesCollection方法的语法', 'object.SeriesCollection（index)', '2017-11-30 14:05:05', null, '374');
INSERT INTO `t_tips_func` VALUES ('388', 'Points方法的语法', 'object.Points（index)', '2017-11-30 14:05:05', null, '375');
INSERT INTO `t_tips_func` VALUES ('389', 'MarkerStyle属性的语法', 'object.MarkerSize', '2017-11-30 14:05:05', null, '376');
INSERT INTO `t_tips_func` VALUES ('390', 'MarkerStyle属性的语法', 'object.MarkerStyle = XlMarkerStyle', '2017-11-30 14:05:05', null, '376');
INSERT INTO `t_tips_func` VALUES ('391', 'MarkerBackgroundColor的语法/MarkerForegroundColor属性', 'MarkerBackgroundColor/MarkerForegroundColor = color', '2017-11-30 14:05:05', null, '376');
INSERT INTO `t_tips_func` VALUES ('392', 'HasDataLabels属性的语法', 'object.HasDataLabels = expression', '2017-11-30 14:05:05', null, '377');
INSERT INTO `t_tips_func` VALUES ('393', 'DataLabels属性的语法', 'object.DataLabels', '2017-11-30 14:05:05', null, '377');
INSERT INTO `t_tips_func` VALUES ('394', 'HasDataTable属性的语法', 'object.HasDataTable = expression', '2017-11-30 14:05:05', null, '378');
INSERT INTO `t_tips_func` VALUES ('395', 'DataTable属性的语法', 'object.DataTable', '2017-11-30 14:05:05', null, '378');
INSERT INTO `t_tips_func` VALUES ('396', 'Export方法的语法', 'object.Export（Filename）', '2017-11-30 14:05:05', null, '379');
INSERT INTO `t_tips_func` VALUES ('397', 'Show方法的结构', 'object.Select', '2017-11-30 14:05:05', null, '381');
INSERT INTO `t_tips_func` VALUES ('398', 'Controls属性的结构', 'object.Controls(index)', '2017-11-30 14:05:06', null, '385');
INSERT INTO `t_tips_func` VALUES ('399', 'AutoSize属性的结构', 'object.AutoSize=expression', '2017-11-30 14:05:06', null, '386');
INSERT INTO `t_tips_func` VALUES ('400', 'Count属性的结构', 'object.Count', '2017-11-30 14:05:06', null, '387');
INSERT INTO `t_tips_func` VALUES ('401', 'TabIndex属性的结构', 'object.TabIndex=num', '2017-11-30 14:05:06', null, '388');
INSERT INTO `t_tips_func` VALUES ('402', 'SetFocus方法的结构', 'object.SetFocus', '2017-11-30 14:05:06', null, '389');
INSERT INTO `t_tips_func` VALUES ('403', 'ControlTipText属性的结构', 'object.ControlTipText = expression', '2017-11-30 14:05:06', null, '390');
INSERT INTO `t_tips_func` VALUES ('404', 'Caption属性の构成', 'object.Caption=expression', '2017-11-30 14:05:06', null, '391');
INSERT INTO `t_tips_func` VALUES ('405', 'StartupPosition属性', 'object.StartupPosition=position', '2017-11-30 14:05:06', null, '392');
INSERT INTO `t_tips_func` VALUES ('406', 'Left属性/Top属性', 'object.Left/Top=position', '2017-11-30 14:05:06', null, '393');
INSERT INTO `t_tips_func` VALUES ('407', 'Height属性/Wiｄth属性的结构', 'object.Height/Width=position', '2017-11-30 14:05:06', null, '394');
INSERT INTO `t_tips_func` VALUES ('408', 'MousePointer属性的结构', 'object.MousePointer=ｆｍMousePointer', '2017-11-30 14:05:06', null, '395');
INSERT INTO `t_tips_func` VALUES ('409', 'MouseIcon属性的结构', 'object.MouseIcon=LoadPicture(pathname)', '2017-11-30 14:05:06', null, '395');
INSERT INTO `t_tips_func` VALUES ('410', 'Initialize事件的结构', 'Private Sub UserForm_Initialize()    StatementsEnd Sub', '2017-11-30 14:05:06', null, '396');
INSERT INTO `t_tips_func` VALUES ('411', 'BackColor属性的结构', 'object.BackColor=RGB(red,green,blue)', '2017-11-30 14:05:06', null, '397');
INSERT INTO `t_tips_func` VALUES ('412', 'Hide方法的结构', 'object.Hide', '2017-11-30 14:05:06', null, '398');
INSERT INTO `t_tips_func` VALUES ('413', 'Unload方法的结构', 'Unload object', '2017-11-30 14:05:06', null, '399');
INSERT INTO `t_tips_func` VALUES ('414', 'Click事件的结构', 'Private Sub CommandButton1_Click()    处理End Sub', '2017-11-30 14:05:06', null, '400');
INSERT INTO `t_tips_func` VALUES ('415', 'Default属性/Cancel属性的结构', 'object.Default/Cancel=expression', '2017-11-30 14:05:06', null, '401');
INSERT INTO `t_tips_func` VALUES ('416', 'Enabled属性的结构', null, '2017-11-30 14:05:06', null, '402');
INSERT INTO `t_tips_func` VALUES ('417', 'Tag属性的结构', 'object.Tag=expression', '2017-11-30 14:05:06', null, '403');
INSERT INTO `t_tips_func` VALUES ('418', 'TakeFocusOnClick属性的结构', 'object.TakeFocusOnClick=expression', '2017-11-30 14:05:06', null, '404');
INSERT INTO `t_tips_func` VALUES ('419', 'Picture属性的结构', 'object.Picture=LoadPicture(path)', '2017-11-30 14:05:06', null, '405');
INSERT INTO `t_tips_func` VALUES ('420', 'Accelerator属性的结构', 'object.Accelerator=str', '2017-11-30 14:05:06', null, '406');
INSERT INTO `t_tips_func` VALUES ('421', 'Value属性的结构', 'object.Value=expression', '2017-11-30 14:05:06', null, '407');
INSERT INTO `t_tips_func` VALUES ('422', 'TripleState属性的结构', 'object.TripleState=expression', '2017-11-30 14:05:06', null, '408');
INSERT INTO `t_tips_func` VALUES ('423', 'Text属性的结构', 'object.Text = expression', '2017-11-30 14:05:06', null, '409');
INSERT INTO `t_tips_func` VALUES ('424', 'TextLength属性的语法', 'object.TextLength', '2017-11-30 14:05:06', null, '410');
INSERT INTO `t_tips_func` VALUES ('425', 'TextAlign属性的语法', 'object.TextAlign　= position', '2017-11-30 14:05:06', null, '411');
INSERT INTO `t_tips_func` VALUES ('426', 'MultiLine属性的语法', 'object.MultiLine fmMultiLine', '2017-11-30 14:05:06', null, '412');
INSERT INTO `t_tips_func` VALUES ('427', 'MaxLength属性的语法', 'object.MaxLength　= num', '2017-11-30 14:05:06', null, '413');
INSERT INTO `t_tips_func` VALUES ('428', 'EnterKeyBehavior属性的语法/TabKeyBehavior属性的语法', 'EnterKeyBehavior/TabKeyBehavior = expression', '2017-11-30 14:05:06', null, '414');
INSERT INTO `t_tips_func` VALUES ('429', 'EnterFieldBehavior属性的语法', 'object.EnterFieldBehavior = position', '2017-11-30 14:05:06', null, '415');
INSERT INTO `t_tips_func` VALUES ('430', 'HideSelection属性的语法', 'object.HideSelection = expression', '2017-11-30 14:05:06', null, '416');
INSERT INTO `t_tips_func` VALUES ('431', 'SelectionMargin属性的语法', 'object.SelectionMargin = expression', '2017-11-30 14:05:06', null, '417');
INSERT INTO `t_tips_func` VALUES ('432', 'Locked属性的语法', 'object.Locked/Enable = expression', '2017-11-30 14:05:06', null, '418');
INSERT INTO `t_tips_func` VALUES ('433', 'PasswordChar属性的语法', 'object.PasswordChar = str', '2017-11-30 14:05:06', null, '419');
INSERT INTO `t_tips_func` VALUES ('434', 'ScrollBar属性的语法', 'object.ScrollBar = position', '2017-11-30 14:05:06', null, '420');
INSERT INTO `t_tips_func` VALUES ('435', 'ControlSource属性的语法', 'object.ControlSource = expression', '2017-11-30 14:05:06', null, '421');
INSERT INTO `t_tips_func` VALUES ('436', 'BackColor属性的语法', 'BackColor = expression', '2017-11-30 14:05:06', null, '422');
INSERT INTO `t_tips_func` VALUES ('437', 'TypeName属性的语法', 'TypeName(varname)', '2017-11-30 14:05:06', null, '423');
INSERT INTO `t_tips_func` VALUES ('438', 'AddItem方法语法', 'object.AddItem item,varindex', '2017-11-30 14:05:06', null, '424');
INSERT INTO `t_tips_func` VALUES ('439', 'listIndex属性的语法', 'object.listIndex = num', '2017-11-30 14:05:07', null, '425');
INSERT INTO `t_tips_func` VALUES ('440', 'ColumnCount属性的语法', 'object.ColumnCount = num', '2017-11-30 14:05:07', null, '426');
INSERT INTO `t_tips_func` VALUES ('441', 'TextColumn属性的语法', 'object.TextColumn = columnno', '2017-11-30 14:05:07', null, '426');
INSERT INTO `t_tips_func` VALUES ('442', 'Style属性的语法', 'object.Style =expression', '2017-11-30 14:05:07', null, '427');
INSERT INTO `t_tips_func` VALUES ('443', 'AddItem方法的语法', 'object.AddＩtem item, varindex', '2017-11-30 14:05:07', null, '428');
INSERT INTO `t_tips_func` VALUES ('444', 'RowSource属性の构造', 'object.RowSource = string', '2017-11-30 14:05:07', null, '429');
INSERT INTO `t_tips_func` VALUES ('445', 'ColumnCount属性の构造', 'object.ColumnCount = num', '2017-11-30 14:05:07', null, '430');
INSERT INTO `t_tips_func` VALUES ('446', 'TextColumn 属性の构造', 'object.TextColumn = columnno', '2017-11-30 14:05:07', null, '430');
INSERT INTO `t_tips_func` VALUES ('447', 'ListIndex属性の构造', 'object.ListIndex = num', '2017-11-30 14:05:07', null, '431');
INSERT INTO `t_tips_func` VALUES ('448', 'List属性の构造', 'object.List row,column', '2017-11-30 14:05:07', null, '432');
INSERT INTO `t_tips_func` VALUES ('449', 'MultiSelect属性的语法', 'Object.MultiSelect = expression', '2017-11-30 14:05:07', null, '433');
INSERT INTO `t_tips_func` VALUES ('450', 'RemoveItem方法的语法', 'Object.RemoveItem Index', '2017-11-30 14:05:07', null, '434');
INSERT INTO `t_tips_func` VALUES ('451', 'Picture属性的句法', 'object.Picture=LoadPicture(pathname)', '2017-11-30 14:05:07', null, '435');
INSERT INTO `t_tips_func` VALUES ('452', 'Size属性/Bold属性的句法', 'object.Size/Bold = expression', '2017-11-30 14:05:07', null, '436');
INSERT INTO `t_tips_func` VALUES ('453', 'Value属性的语法', 'Object.Value = expression', '2017-11-30 14:05:07', null, '437');
INSERT INTO `t_tips_func` VALUES ('454', 'Visible属性的结构', 'object.Visible = expression', '2017-11-30 14:05:07', null, '438');
INSERT INTO `t_tips_func` VALUES ('455', 'GroupName属性的构成', 'object.GroupName=name', '2017-11-30 14:05:07', null, '439');
INSERT INTO `t_tips_func` VALUES ('456', 'Add方法的语法', 'object.Add', '2017-11-30 14:05:07', null, '440');
INSERT INTO `t_tips_func` VALUES ('457', 'SelectedItem 属性的语法解释', 'object.SelectedItem', '2017-11-30 14:05:07', null, '441');
INSERT INTO `t_tips_func` VALUES ('458', 'Max属性/Min属性', 'object.Max/Min = num', '2017-11-30 14:05:07', null, '442');
INSERT INTO `t_tips_func` VALUES ('459', 'Value属性的语法', 'object.Value = num', '2017-11-30 14:05:07', null, '443');
INSERT INTO `t_tips_func` VALUES ('460', 'PrintOut方法的构成', 'object.PrintOut(From,To,Copies,Preview,ActivePrinter,PrintToFile,Collate,PrToFileName)', '2017-11-30 14:05:07', null, '445');
INSERT INTO `t_tips_func` VALUES ('461', 'PrintPrewview方法的构成', 'object.PrintPreview(EnableChanges)', '2017-11-30 14:05:07', null, '446');
INSERT INTO `t_tips_func` VALUES ('462', 'ActivePrinter属性的结构', 'object.PrintPreview(EnableChanges)', '2017-11-30 14:05:07', null, '447');
INSERT INTO `t_tips_func` VALUES ('463', 'PaperSize属性/Orientation属性的构成', 'object.PaperSize/Orientation=expression', '2017-11-30 14:05:07', null, '448');
INSERT INTO `t_tips_func` VALUES ('464', 'HPageBreaks属性/VPageBreaks属性的构成', 'object.HPageBreaks/VPageBreaks', '2017-11-30 14:05:07', null, '449');
INSERT INTO `t_tips_func` VALUES ('465', 'FitToPagesTall属性/FitToPagesWide属性的构成', 'object.FitToPagesTall/FitToPagesWide = expression', '2017-11-30 14:05:07', null, '450');
INSERT INTO `t_tips_func` VALUES ('466', 'CentimetersTopoints方法的构成', 'object.CentimetersTopoints　num', '2017-11-30 14:05:07', null, '451');
INSERT INTO `t_tips_func` VALUES ('467', 'CenterHorizontally属性/CenterVertically属性的构成', 'object.CenterHorizontally/CenterVertically = expression', '2017-11-30 14:05:07', null, '452');
INSERT INTO `t_tips_func` VALUES ('468', 'LeftHeader属性/CenterHeader属性/RightHeader属性的构成', 'object.LeftHeader/CenterHeader/RightHeader = expression', '2017-11-30 14:05:07', null, '453');
INSERT INTO `t_tips_func` VALUES ('469', 'LeftFooter/CenterFooter/RightFooter属性的构成', 'LeftFooter/CenterFooter/RightFooter = expression', '2017-11-30 14:05:07', null, '454');
INSERT INTO `t_tips_func` VALUES ('470', 'LeftHeaderPicture属性的构成', 'object.LeftHeaderPicture = expression', '2017-11-30 14:05:07', null, '455');
INSERT INTO `t_tips_func` VALUES ('471', 'PrintTitleRows属性', 'object.PrintTitleRows', '2017-11-30 14:05:07', null, '456');
INSERT INTO `t_tips_func` VALUES ('472', 'PrintTitleColumns属性的构成', 'PrintTitleColumns = expression', '2017-11-30 14:05:07', null, '456');
INSERT INTO `t_tips_func` VALUES ('473', 'BlackAndWhite属性的构成', 'object.BlackAndWhite = expression', '2017-11-30 14:05:08', null, '457');
INSERT INTO `t_tips_func` VALUES ('474', 'PrintOut方法的构成', 'object.PrintOut(From,to,Copies,Preview,ActivePrinter<PrintToFileCollate,PrToFileName)', '2017-11-30 14:05:08', null, '458');
INSERT INTO `t_tips_func` VALUES ('475', 'PrintArea属性的构成', 'object.PrintArea = expression', '2017-11-30 14:05:08', null, '459');
INSERT INTO `t_tips_func` VALUES ('476', 'Zoom属性的构成', 'object.Zoom  =  num', '2017-11-30 14:05:08', null, '460');
INSERT INTO `t_tips_func` VALUES ('477', 'PrintGridlines属性的构成', 'object.PrintGridlines  =  expression', '2017-11-30 14:05:08', null, '461');
INSERT INTO `t_tips_func` VALUES ('478', 'Dir函数语法', 'Dir[(pathname[,attributes])', '2017-11-30 14:05:08', null, '462');
INSERT INTO `t_tips_func` VALUES ('479', 'FileLen函数语法', 'FileLen(filename)', '2017-11-30 14:05:08', null, '463');
INSERT INTO `t_tips_func` VALUES ('480', 'GetAttr函数语法', 'SetAttr(pathname)', '2017-11-30 14:05:08', null, '464');
INSERT INTO `t_tips_func` VALUES ('481', 'SetAttr函数语法', 'SetAttr pathname,attributes', '2017-11-30 14:05:08', null, '464');
INSERT INTO `t_tips_func` VALUES ('482', 'FileDateTime函数语法', 'FileDateTime(pathname)', '2017-11-30 14:05:08', null, '465');
INSERT INTO `t_tips_func` VALUES ('483', 'FileCopy声明语法', 'FileCopy　source,destination', '2017-11-30 14:05:08', null, '466');
INSERT INTO `t_tips_func` VALUES ('484', 'Name属性语法', 'object.Bold(=True/False)', '2017-11-30 14:05:08', null, '467');
INSERT INTO `t_tips_func` VALUES ('485', 'Kill声明语法', 'Kill pathname', '2017-11-30 14:05:08', null, '468');
INSERT INTO `t_tips_func` VALUES ('486', 'Name声明语法', 'Name oldname As newname', '2017-11-30 14:05:08', null, '469');
INSERT INTO `t_tips_func` VALUES ('487', 'InStrRev函数语法/Right函数语法', 'InStrRev(string1,string2[,start[,compare]])/Right(str、length)', '2017-11-30 14:05:08', null, '470');
INSERT INTO `t_tips_func` VALUES ('488', 'Dir函数语法', 'Dir[(pathname[,attributes])', '2017-11-30 14:05:08', null, '471');
INSERT INTO `t_tips_func` VALUES ('489', 'RecentFiles属性语法', 'object,RecentFiles', '2017-11-30 14:05:08', null, '472');
INSERT INTO `t_tips_func` VALUES ('490', 'Kill声明语法', 'Kill pathname', '2017-11-30 14:05:08', null, '473');
INSERT INTO `t_tips_func` VALUES ('491', 'RmDir声明/Kill声明语法', 'Kill pathname', '2017-11-30 14:05:08', null, '474');
INSERT INTO `t_tips_func` VALUES ('492', 'ChDrive属性语法', 'ChDrive　drive', '2017-11-30 14:05:08', null, '475');
INSERT INTO `t_tips_func` VALUES ('493', 'CurDir函数的语法', 'CurDir　path', '2017-11-30 14:05:08', null, '476');
INSERT INTO `t_tips_func` VALUES ('494', 'ChDir声明语法', 'ChDir　pathname', '2017-11-30 14:05:08', null, '477');
INSERT INTO `t_tips_func` VALUES ('495', 'FileSystemObject对象的句法', 'Set Object = New FileSystemObject', '2017-11-30 14:05:08', null, '478');
INSERT INTO `t_tips_func` VALUES ('496', 'CreateObject函数', 'Set object = CreateObject(ProgId)', '2017-11-30 14:05:08', null, '478');
INSERT INTO `t_tips_func` VALUES ('497', 'FileExists方法的句法', 'Object.FileExists(filespec)', '2017-11-30 14:05:08', null, '479');
INSERT INTO `t_tips_func` VALUES ('498', 'CopyFile方法的句法', 'Object.CopyFile source,destination[,overwrite]', '2017-11-30 14:05:08', null, '480');
INSERT INTO `t_tips_func` VALUES ('499', 'Move方法的句法', 'object.Move destination', '2017-11-30 14:05:08', null, '481');
INSERT INTO `t_tips_func` VALUES ('500', 'GetFile方法的句法', 'object.GetFile(filespec)', '2017-11-30 14:05:08', null, '481');
INSERT INTO `t_tips_func` VALUES ('501', 'Delete方法的句法', 'object.Delete force', '2017-11-30 14:05:08', null, '482');
INSERT INTO `t_tips_func` VALUES ('502', 'Attributes方法的句法', 'object.Attributes', '2017-11-30 14:05:08', null, '483');
INSERT INTO `t_tips_func` VALUES ('503', 'GetFileName方法的句法', 'object.GetFileName(pathspec)', '2017-11-30 14:05:08', null, '484');
INSERT INTO `t_tips_func` VALUES ('504', 'Path属性', 'object.Path', '2017-11-30 14:05:08', null, '485');
INSERT INTO `t_tips_func` VALUES ('505', 'ParentFolder属性的句法', 'ParentFolder', '2017-11-30 14:05:08', null, '485');
INSERT INTO `t_tips_func` VALUES ('506', 'GetExtensionName方法的句法', 'object.GetExtensionName(path)', '2017-11-30 14:05:08', null, '486');
INSERT INTO `t_tips_func` VALUES ('507', 'FolderExists方法的句法', 'object.FolderExists(folderspec)', '2017-11-30 14:05:08', null, '487');
INSERT INTO `t_tips_func` VALUES ('508', 'CreateFolder方法的句法', 'object.CreateFolder(foldername)', '2017-11-30 14:05:08', null, '488');
INSERT INTO `t_tips_func` VALUES ('509', 'CopyFolder方法的句法', 'CopyFolder source,destination[,overwrite]', '2017-11-30 14:05:08', null, '489');
INSERT INTO `t_tips_func` VALUES ('510', 'MoveFolder方法的句法', 'MoveFolder source,destination', '2017-11-30 14:05:08', null, '490');
INSERT INTO `t_tips_func` VALUES ('511', 'DeleteFolder方法的句法', 'object.DeleteFolder folderspec[,force]', '2017-11-30 14:05:08', null, '491');
INSERT INTO `t_tips_func` VALUES ('512', 'Attributes方法的句法', 'object.Attributes', '2017-11-30 14:05:08', null, '492');
INSERT INTO `t_tips_func` VALUES ('513', 'SubFolders属性的句法', 'object.SubFolders', '2017-11-30 14:05:08', null, '493');
INSERT INTO `t_tips_func` VALUES ('514', 'TotalSize属性/FreeSpace属性的句法', 'object.TotalSize/FreeSpace', '2017-11-30 14:05:08', null, '494');
INSERT INTO `t_tips_func` VALUES ('515', 'DriveType性能的语法', 'object.DriveType', '2017-11-30 14:05:08', null, '495');
INSERT INTO `t_tips_func` VALUES ('516', 'FilSystem属性的语法', 'object.FileSyatem', '2017-11-30 14:05:08', null, '496');
INSERT INTO `t_tips_func` VALUES ('517', 'OpenText方法的语法', 'object.OpenText(Filename,Origin,StartRow,DataType,TextQualifier,\n                                    Consecutive,Delimiter,Tab,Semicolon,Comma,Space,Other,OtherChar,\n                                     Fieldinfo,TextVisualLayout,DecimalSeparator,ThousandsSeparator,\n                                    TrailingMinusNumbers,Local)', '2017-11-30 14:05:08', null, '497');
INSERT INTO `t_tips_func` VALUES ('518', 'OpenText的语法', 'Object.OpenText(Filename,Origin,StartRow,DataType,TextQualifier,\n                                  Consecutive,Delimiter,Tab,Semicolon,Comma,Space,Other,OtherChar,\n                                  FieldInfo,TextVisualLayout,DecimalSeparator,ThousandsSeparator,\n                                  TrailingMinusNumbers,Local)', '2017-11-30 14:05:08', null, '498');
INSERT INTO `t_tips_func` VALUES ('519', 'OpenText的语法', 'Object.OpenText(Filename,Origin,StartRow,DataType,TextQualifier,\nConsecutive,Delimiter,Tab,Semicolon,Comma,Space,Other,OtherChar,\nFieldInfo,TextVisualLayout,DecimalSeparator,ThousandsSeparator,\nTrailingMinusNumbers,Local)', '2017-11-30 14:05:09', null, '499');
INSERT INTO `t_tips_func` VALUES ('520', 'Open声明的文章结构', 'Open　pathname For mode [Access access][lock]As[#]filenumber\n                                [Len=reclength]', '2017-11-30 14:05:09', null, '500');
INSERT INTO `t_tips_func` VALUES ('521', 'Input 声明的文章结构', 'Input #filenumber,varlist', '2017-11-30 14:05:09', null, '500');
INSERT INTO `t_tips_func` VALUES ('522', 'Close声明的文章结构', 'Close[filenumberlist]', '2017-11-30 14:05:09', null, '500');
INSERT INTO `t_tips_func` VALUES ('523', 'Line Input文本的语法', 'Line Input #filenumber,varname', '2017-11-30 14:05:09', null, '501');
INSERT INTO `t_tips_func` VALUES ('524', 'Write声明的文章结构', 'Write #filenumber,[outputlist]', '2017-11-30 14:05:09', null, '502');
INSERT INTO `t_tips_func` VALUES ('525', 'Print声明的文章结构', 'Print #filenumber[, outputlist]', '2017-11-30 14:05:09', null, '503');
INSERT INTO `t_tips_func` VALUES ('526', 'Seek 声明的语法', 'Seek 「#」filenumber,position', '2017-11-30 14:05:09', null, '504');
INSERT INTO `t_tips_func` VALUES ('527', 'Put 声明的语法', 'Put 「#」fileNumber,[recnumber],varname', '2017-11-30 14:05:09', null, '505');
INSERT INTO `t_tips_func` VALUES ('528', 'Get 声明的语法', 'Get[#]filenumber,[recnumber],varname', '2017-11-30 14:05:09', null, '506');
INSERT INTO `t_tips_func` VALUES ('529', 'Split 函数的语法', 'Split(expression[, delimiter[limit[,compare]]])', '2017-11-30 14:05:09', null, '506');
INSERT INTO `t_tips_func` VALUES ('530', 'Shell 函数的语法', 'Shell(pathname[ , windowstyle ])', '2017-11-30 14:05:09', null, '507');
INSERT INTO `t_tips_func` VALUES ('531', 'Seek 方法的语法', 'object.SendKeys(Keys,Wait)', '2017-11-30 14:05:09', null, '508');
INSERT INTO `t_tips_func` VALUES ('532', 'CreateOｂject 声明的语法', 'CreateOｂject(class,[servername])', '2017-11-30 14:05:09', null, '509');
INSERT INTO `t_tips_func` VALUES ('533', 'GetObject 函数的语法', 'GetObject([pathname][, class])', '2017-11-30 14:05:09', null, '510');
INSERT INTO `t_tips_func` VALUES ('534', '变量class的语法', 'appname.objecttype', '2017-11-30 14:05:09', null, '510');
INSERT INTO `t_tips_func` VALUES ('535', 'CreateObject 函数的结构', 'CreateObject(class,[servetname])', '2017-11-30 14:05:09', null, '511');
INSERT INTO `t_tips_func` VALUES ('536', 'CreateObject 函数的结构', 'CreateObject(class,[servetname])', '2017-11-30 14:05:09', null, '512');
INSERT INTO `t_tips_func` VALUES ('537', 'Paste 方法的结构', 'Object.Paste', '2017-11-30 14:05:09', null, '513');
INSERT INTO `t_tips_func` VALUES ('538', 'CopyPicture方法的构成', 'object.CopyPicture(Appearance,Format)', '2017-11-30 14:05:09', null, '514');
INSERT INTO `t_tips_func` VALUES ('539', 'CreateObjet函数的构成', 'CreateObjcet(calss,[servername])', '2017-11-30 14:05:09', null, '515');
INSERT INTO `t_tips_func` VALUES ('540', 'object.Run', null, '2017-11-30 14:05:09', null, '516');
INSERT INTO `t_tips_func` VALUES ('541', 'Paste语法', 'object Paste', '2017-11-30 14:05:09', null, '517');
INSERT INTO `t_tips_func` VALUES ('542', 'Createltem方法的句法', 'object.Createltem', '2017-11-30 14:05:09', null, '518');
INSERT INTO `t_tips_func` VALUES ('543', 'GetNameSpace方法的句法', 'object.GetNameSpace(namespase)', '2017-11-30 14:05:09', null, '519');
INSERT INTO `t_tips_func` VALUES ('544', 'OpenReport方法的句法', 'object.OpenReport　reportname,view', '2017-11-30 14:05:09', null, '520');
INSERT INTO `t_tips_func` VALUES ('545', 'Navigate方法的句法', 'object.Navigate url', '2017-11-30 14:05:09', null, '521');
INSERT INTO `t_tips_func` VALUES ('546', 'Document属性的句法', 'object.Document', '2017-11-30 14:05:09', null, '522');
INSERT INTO `t_tips_func` VALUES ('547', 'SaveAs方法的句法', 'object.SaveAs(FileName,FileFormat,Password,WriteResPassword,ReadOnly\n        Recommended,CreateBackup,AddToMru,TextCodepage,TextVisualLayout,Local)', '2017-11-30 14:05:09', null, '523');
INSERT INTO `t_tips_func` VALUES ('548', 'OpenXML方法的构成', 'object.OpenXMl(Filename,Stylesheets,LoadOption)', '2017-11-30 14:05:09', null, '524');
INSERT INTO `t_tips_func` VALUES ('549', 'Open方法的文章结构', 'object.connection.Open ConnectionString,UserID,Password,Options', '2017-11-30 14:05:09', null, '525');
INSERT INTO `t_tips_func` VALUES ('550', 'Close方法的文章结构', 'object.Close', '2017-11-30 14:05:09', null, '525');
INSERT INTO `t_tips_func` VALUES ('551', 'Open方法的文章结构', 'connection.Open ConnectionString,UserID,Password,Options', '2017-11-30 14:05:09', null, '526');
INSERT INTO `t_tips_func` VALUES ('552', 'CopyFromRecordset方法的文章结构', 'CopyFromRecordset(Data,MaxColumns)', '2017-11-30 14:05:09', null, '527');
INSERT INTO `t_tips_func` VALUES ('553', 'RecordCount属性的文章结构', 'object.RecordCount', '2017-11-30 14:05:09', null, '528');
INSERT INTO `t_tips_func` VALUES ('554', 'Source属性的结构', 'Object.Source', '2017-11-30 14:05:09', null, '529');
INSERT INTO `t_tips_func` VALUES ('555', 'Execute方法的文章结构', 'command.Execute RecordsAffected,Parameters,Options', '2017-11-30 14:05:09', null, '530');
INSERT INTO `t_tips_func` VALUES ('556', 'ActiveConnection属性的语法', 'ActiveConnection', '2017-11-30 14:05:09', null, '531');
INSERT INTO `t_tips_func` VALUES ('557', 'Create方法的语法', 'object.Create ConnectionString', '2017-11-30 14:05:09', null, '532');
INSERT INTO `t_tips_func` VALUES ('558', 'Find方法的结构', 'Find(Criteria,SkipRows,SearchDirection,Start)', '2017-11-30 14:05:09', null, '533');
INSERT INTO `t_tips_func` VALUES ('559', 'Update方法的结构', 'Object.Update', '2017-11-30 14:05:09', null, '534');
INSERT INTO `t_tips_func` VALUES ('560', 'Delete方法的结构', 'Object.Delete', '2017-11-30 14:05:09', null, '535');
INSERT INTO `t_tips_func` VALUES ('561', 'BeginTrance方法的结构', 'Object.BeginTrance', '2017-11-30 14:05:09', null, '536');
INSERT INTO `t_tips_func` VALUES ('562', '说明', null, '2017-11-30 14:05:09', null, '537');
INSERT INTO `t_tips_func` VALUES ('563', 'Open事件的语法', 'Private Sub Workbook_Open()\n                                statements\n                                End Sub', '2017-11-30 14:05:09', null, '539');
INSERT INTO `t_tips_func` VALUES ('564', 'Open事件的语法', 'Pricate SubWorkbook_BeforeClose(Cancel As Boolean)\n                                    statements\n                                    End Sub', '2017-11-30 14:05:09', null, '540');
INSERT INTO `t_tips_func` VALUES ('565', 'Activate事件的语法', 'Private Sub Workbook_Active()\n                                    statements\n                                    End Sub', '2017-11-30 14:05:09', null, '541');
INSERT INTO `t_tips_func` VALUES ('566', 'Deactivate事件的语法', 'Private Sub Workbook_Deactivate()\n                                    statements\n                                    End Sub', '2017-11-30 14:05:09', null, '542');
INSERT INTO `t_tips_func` VALUES ('567', 'Addinlnstall事件的语法', 'Private Sub Workbook_Addinlnstall()\n                                    statements\n                                    End Sub', '2017-11-30 14:05:09', null, '543');
INSERT INTO `t_tips_func` VALUES ('568', 'BeforePrint事件的语法', 'Private Sub Workbook_BeforePrint(Cancel As Boolean)\n                                    statements\n                                    End Sub', '2017-11-30 14:05:10', null, '544');
INSERT INTO `t_tips_func` VALUES ('569', 'BeforeSave事件的语法', 'Private Sub Workbook_BeforeSave(ByVal SaveAsUl As Boolean _\n                                       ,Cancel As Boolean)\n                                    statements\n                                    End Sub', '2017-11-30 14:05:10', null, '545');
INSERT INTO `t_tips_func` VALUES ('570', 'AfterSave事件的语法', 'Private Sub Workbook_AfterSave(ByVal Success As Boolean)\n                                    statements\n                                    End Sub', '2017-11-30 14:05:10', null, '546');
INSERT INTO `t_tips_func` VALUES ('571', 'Activate事件的语法', 'Private Sub Worksheet_Activate()\n                                    statements\n                                    End  Sub', '2017-11-30 14:05:10', null, '547');
INSERT INTO `t_tips_func` VALUES ('572', 'Change事件语法', 'Private  Sub   Worksheet_Change(Bybal Target As Range)\n                                    statements\n                                    End  Sub', '2017-11-30 14:05:10', null, '548');
INSERT INTO `t_tips_func` VALUES ('573', 'SelectionChange 事件的语句', 'Private  Sub Worksheet_SelectionChange(ByVal Target As Range)\n                                    statements\n                                    End   Sub', '2017-11-30 14:05:10', null, '549');
INSERT INTO `t_tips_func` VALUES ('574', 'NewSheet事件的语法', 'Private  Sub  Workbook_NewSheet(ByVal Sh As Object)\nstatements\nEnd  Sub', '2017-11-30 14:05:10', null, '550');
INSERT INTO `t_tips_func` VALUES ('575', 'BeforeDoubleClick事件的语法', 'Private   Sub  Worksheet_BeforeDoubleClick(ByVal Target _\n                                         As  Range, Cancel  As  Boolean)\n                                    statements\n                                    End  Sub', '2017-11-30 14:05:10', null, '551');
INSERT INTO `t_tips_func` VALUES ('576', 'BeforeRightClick事件的语法', 'Private  Sub  Worksheet_BeforeRightClick(ByVal  Target As  Range _)\n                                        , Cancel  As  Boolean)\n                                    statements\n                                    End   Sub', '2017-11-30 14:05:10', null, '552');
INSERT INTO `t_tips_func` VALUES ('577', 'FollowHyperlink 事件的语法', 'Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)\n                                    statements\n                                    End Sub', '2017-11-30 14:05:10', null, '553');
INSERT INTO `t_tips_func` VALUES ('578', 'Calculate 事件的语法', 'Private Sub Worksheet_Calculate()\n                                    statements\n                                    End Sub', '2017-11-30 14:05:10', null, '554');
INSERT INTO `t_tips_func` VALUES ('579', 'WindowActivate 事件的语法', 'Private Sub Workbook_WindowActivate(ByVal Wn As Window)\n                                    statements\n                                    End Sub', '2017-11-30 14:05:10', null, '555');
INSERT INTO `t_tips_func` VALUES ('580', 'WindowResize 事件的语法', 'Private Sub Workbook_WindowResize(ByVal Wn As Window)\n                                    statements\n                                    End Sub', '2017-11-30 14:05:10', null, '556');
INSERT INTO `t_tips_func` VALUES ('581', 'PivotTableUpdate 事件的语法', 'Private Sub Worksheet_PivotTableUpdate(ByVal Target As PivotTable)\n                                    statements\n                                    End Sub', '2017-11-30 14:05:10', null, '557');
INSERT INTO `t_tips_func` VALUES ('582', 'EnableEvents 属性的语法', 'object.EnableEvents = expression', '2017-11-30 14:05:10', null, '558');
INSERT INTO `t_tips_func` VALUES ('583', 'WithEvents 关键字的语法', 'Private [Dim/Public] WithEvents expression As Type', '2017-11-30 14:05:10', null, '559');
INSERT INTO `t_tips_func` VALUES ('584', 'Event声明的句法', 'Public Event eventname', '2017-11-30 14:05:10', null, '560');
INSERT INTO `t_tips_func` VALUES ('585', 'RaiseEvent声明的句法', 'RaiseEvent eventname', '2017-11-30 14:05:10', null, '560');
INSERT INTO `t_tips_func` VALUES ('586', 'Version属性的语法', 'Object.Version', '2017-11-30 14:05:10', null, '561');
INSERT INTO `t_tips_func` VALUES ('587', 'OperatingSystem属性的语法', 'Object.OperatingSystem', '2017-11-30 14:05:10', null, '562');
INSERT INTO `t_tips_func` VALUES ('588', '#IF Then #Else directive的语法', '#If expression Then\n                                statements		\n                            [ #ElseIf expression Then 	\n                                 [statements]			\n                            [#Else					\n                                 [statements}]		\n                            #Eed If', '2017-11-30 14:05:10', null, '563');
INSERT INTO `t_tips_func` VALUES ('589', '#IF Then #Else directive的语法', '#If expression Then\n                                statements		\n                            [ #ElseIf expression Then 	\n                                 [statements]			\n                            [#Else					\n                                 [statements}]		\n                            #Eed If', '2017-11-30 14:05:10', null, '564');
INSERT INTO `t_tips_func` VALUES ('590', 'CountLarge属性的语法', 'Object.CountLarge', '2017-11-30 14:05:10', null, '565');
INSERT INTO `t_tips_func` VALUES ('591', '#Rows属性的语法', 'object.Rows', '2017-11-30 14:05:10', null, '566');
INSERT INTO `t_tips_func` VALUES ('592', '#Columns属性的语法', 'object.Columns', '2017-11-30 14:05:10', null, '566');
INSERT INTO `t_tips_func` VALUES ('593', '#Count属性的语法', 'object.Count', '2017-11-30 14:05:10', null, '566');
INSERT INTO `t_tips_func` VALUES ('594', 'References属性的概要', 'object.References', '2017-11-30 14:05:10', null, '567');
INSERT INTO `t_tips_func` VALUES ('595', 'NumberFormatLocal属性的概要', 'object.NumberFormatLocal = expression', '2017-11-30 14:05:10', null, '568');
INSERT INTO `t_tips_func` VALUES ('596', 'Close方法的概要', 'object.Close(SaveChanges, Filename, RouteWorkbook)', '2017-11-30 14:05:10', null, '569');
INSERT INTO `t_tips_func` VALUES ('597', 'Visible属性的概要', 'object.Visible = expression', '2017-11-30 14:05:10', null, '570');
INSERT INTO `t_tips_func` VALUES ('598', 'Len函数的概要', 'Len(strings)', '2017-11-30 14:05:10', null, '571');
INSERT INTO `t_tips_func` VALUES ('599', 'SendKeys声明的概要', 'SendKeys　string[, wait]', '2017-11-30 14:05:10', null, '572');
INSERT INTO `t_tips_func` VALUES ('600', 'object.SaveAS(FileName, FileFormat, Password, WriteResPassword,\n            ReadOnlyRecommended, CreateBackup, AccessMode, ConflictResolution,\n            AddToMru, TextCodepage, TextVisualLayout, Local)', null, '2017-11-30 14:05:10', null, '573');
INSERT INTO `t_tips_func` VALUES ('601', 'Add方法的概要', 'object.Add(Type, Operator, Formula1, Formula2)', '2017-11-30 14:05:10', null, '574');
INSERT INTO `t_tips_func` VALUES ('602', 'Delete方法的概要', 'object.Delete', '2017-11-30 14:05:10', null, '574');
INSERT INTO `t_tips_func` VALUES ('603', 'Modify方法的概要', 'object.Modify(Type, Operator, Formula1, Formula2)', '2017-11-30 14:05:10', null, '575');
INSERT INTO `t_tips_func` VALUES ('604', 'Version属性的语法', 'Object.Version', '2017-11-30 14:05:10', null, '576');
INSERT INTO `t_tips_func` VALUES ('605', 'Priority属性的语法', 'Object.Priority=expression', '2017-11-30 14:05:10', null, '577');
INSERT INTO `t_tips_func` VALUES ('606', 'AddDatabar方法的语法', 'object.AddDatabar', '2017-11-30 14:05:10', null, '578');
INSERT INTO `t_tips_func` VALUES ('607', 'MaxPoint属性的语法', 'object.MaxPoint', '2017-11-30 14:05:10', null, '578');
INSERT INTO `t_tips_func` VALUES ('608', 'MinPoint属性的语法', 'object.MinPoint', '2017-11-30 14:05:10', null, '578');
INSERT INTO `t_tips_func` VALUES ('609', 'AddColorScale函数语法', 'object.AddColorScale(ColorScaleType)', '2017-11-30 14:05:10', null, '579');
INSERT INTO `t_tips_func` VALUES ('610', 'AddiconSetCondition方法的语法', 'object.AddiconSetCondition', '2017-11-30 14:05:10', null, '580');
INSERT INTO `t_tips_func` VALUES ('611', 'NegativeBarFormat属性的定义', 'object.NegativeBarFormat', '2017-11-30 14:05:10', null, '581');
INSERT INTO `t_tips_func` VALUES ('612', 'AxisPosition属性的定义', 'object.AxisPosition = expression', '2017-11-30 14:05:10', null, '581');
INSERT INTO `t_tips_func` VALUES ('613', 'Name 属性的定义', 'object.Name = expression', '2017-11-30 14:05:10', null, '582');
INSERT INTO `t_tips_func` VALUES ('614', 'Name 属性的定义', 'object.Names(index)', '2017-11-30 14:05:10', null, '583');
INSERT INTO `t_tips_func` VALUES ('615', 'Delete 方法的定义', 'object.Delete', '2017-11-30 14:05:10', null, '584');
INSERT INTO `t_tips_func` VALUES ('616', 'Delete 方法的定义', 'object.Delete', '2017-11-30 14:05:10', null, '585');
INSERT INTO `t_tips_func` VALUES ('617', 'AddComment  方法的语法解释', 'AddComment (Text)', '2017-11-30 14:05:11', null, '586');
INSERT INTO `t_tips_func` VALUES ('618', 'DisplayCommentIndicator属性的构成', 'object.DisplayCommentIndicator = expression', '2017-11-30 14:05:11', null, '587');
INSERT INTO `t_tips_func` VALUES ('619', 'Visible属性的语法', 'object.Visible', '2017-11-30 14:05:11', null, '588');
INSERT INTO `t_tips_func` VALUES ('620', 'ClearComment的结构', 'object.ClearComments', '2017-11-30 14:05:11', null, '589');
INSERT INTO `t_tips_func` VALUES ('621', 'OnKey方法的结构', 'object.OnKey(Key,Procedure)', '2017-11-30 14:05:11', null, '590');
INSERT INTO `t_tips_func` VALUES ('622', 'Timer函数的结构', 'Timer', '2017-11-30 14:05:11', null, '591');
INSERT INTO `t_tips_func` VALUES ('623', 'DisplayAlert属性的结构', 'object.DisplayAlert', '2017-11-30 14:05:11', null, '592');
INSERT INTO `t_tips_func` VALUES ('624', 'Wait方法的构成', 'object.Wait time', '2017-11-30 14:05:11', null, '593');
INSERT INTO `t_tips_func` VALUES ('625', 'OnTime方法的构成', 'object.OnTime(EarliestTime,Procedure,LatestTime,Schedule)', '2017-11-30 14:05:11', null, '594');
INSERT INTO `t_tips_func` VALUES ('626', 'DoEcents函数的语法', 'DoEcents', '2017-11-30 14:05:11', null, '595');
INSERT INTO `t_tips_func` VALUES ('627', 'Add方法的语法', 'object.HyperLinks.Add(Anchor,Address,SubAddress,ScreenTip,TextToDisplay)', '2017-11-30 14:05:11', null, '596');
INSERT INTO `t_tips_func` VALUES ('628', 'Delete方法', 'object.Delete', '2017-11-30 14:05:11', null, '597');
INSERT INTO `t_tips_func` VALUES ('629', 'Follow方法的语法', 'object.Follow(NewWindow,AddHistory,ExtrazInfo,Method,HeaderInfo)', '2017-11-30 14:05:11', null, '598');
INSERT INTO `t_tips_func` VALUES ('630', 'Add方法的语法', 'object.Add(Name,Position,MenuBar,Temporary)', '2017-11-30 14:05:11', null, '599');
INSERT INTO `t_tips_func` VALUES ('631', 'CreatObject函数的语法', 'CreatObject(class,[servername])', '2017-11-30 14:05:11', null, '600');
INSERT INTO `t_tips_func` VALUES ('632', 'Test方法的语法解释', 'Test(string)', '2017-11-30 14:05:11', null, '601');
INSERT INTO `t_tips_func` VALUES ('633', 'Execute 方法的语法解释', 'Execute (string)', '2017-11-30 14:05:11', null, '602');
INSERT INTO `t_tips_func` VALUES ('634', 'Replace 方法的语法解释', 'Replace(string1,string2)', '2017-11-30 14:05:11', null, '603');
INSERT INTO `t_tips_func` VALUES ('635', 'CreateObject函数语法解释', 'CreateObject(class,[servername])', '2017-11-30 14:05:11', null, '604');
INSERT INTO `t_tips_func` VALUES ('636', 'Add 方法的语法解释', 'object.Add (key,item)', '2017-11-30 14:05:11', null, '605');
INSERT INTO `t_tips_func` VALUES ('637', 'Exists方法的语法解释', 'object.Exists (key)', '2017-11-30 14:05:11', null, '606');
INSERT INTO `t_tips_func` VALUES ('638', 'Add 方法的语法解释', 'object.Add (item,key,before,after)', '2017-11-30 14:05:11', null, '607');
INSERT INTO `t_tips_func` VALUES ('639', 'Add方法的语法', 'object.Add(item,key,before,affter)', '2017-11-30 14:05:11', null, '608');
INSERT INTO `t_tips_func` VALUES ('640', 'Remove 方法的语法解释', 'object.Remove{Key | Index }', '2017-11-30 14:05:11', null, '609');
INSERT INTO `t_tips_func` VALUES ('641', 'CodeName的语法解释', 'object.CodeName', '2017-11-30 14:05:11', null, '610');
INSERT INTO `t_tips_func` VALUES ('642', 'CreateObject 方法的语法解释', 'CreateObject (class,[servername])', '2017-11-30 14:05:11', null, '611');
INSERT INTO `t_tips_func` VALUES ('643', 'WshShell对象的构成', 'Set expression= CreateObject(\"Wscript.Shell\")', '2017-11-30 14:05:11', null, '612');
INSERT INTO `t_tips_func` VALUES ('644', 'timeGettime函数', 'timeGettime', '2017-11-30 14:05:11', null, '613');
INSERT INTO `t_tips_func` VALUES ('645', 'FindWindowAPI函数的结构', 'FindWindow（classname,windowname）', '2017-11-30 14:05:11', null, '614');
INSERT INTO `t_tips_func` VALUES ('646', 'SetWindowLongAPI函数的结构', 'SetWindowLong（hWnd,nlndex,dwNewLong）', '2017-11-30 14:05:11', null, '615');
INSERT INTO `t_tips_func` VALUES ('647', 'AutoFill方法的结构', 'object.AutoFill(Destination , Type)', '2017-11-30 14:05:11', null, '616');
INSERT INTO `t_tips_func` VALUES ('648', 'QuickAnalysis属性的结构', 'object.QuickAnalysis(type)', '2017-11-30 14:05:11', null, '617');
INSERT INTO `t_tips_func` VALUES ('649', 'SlicerObject的构成', 'object.Slicer', '2017-11-30 14:05:11', null, '618');
INSERT INTO `t_tips_func` VALUES ('650', 'Add方法的的构成', 'Add(SlicerDestination,Level,Name,Caption,Top,Left,Width,Height)', '2017-11-30 14:05:11', null, '618');
INSERT INTO `t_tips_func` VALUES ('651', 'TimelineState object的构成', 'object.TimelineState', '2017-11-30 14:05:11', null, '619');
INSERT INTO `t_tips_func` VALUES ('652', 'SetFilterDateRange方法', 'object.SetFilterDateRange(StartDate.EndDate)', '2017-11-30 14:05:11', null, '619');
